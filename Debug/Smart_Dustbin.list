
Smart_Dustbin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000da0  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f38  08000f38  0000240c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f38  08000f38  0000240c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000f38  08000f38  0000240c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000f38  08000f38  0000240c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f38  08000f38  00001f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000f3c  08000f3c  00001f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000040c  20000000  08000f40  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000040c  0800134c  0000240c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  0800134c  00002430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000240c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000034cd  00000000  00000000  0000243c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fe3  00000000  00000000  00005909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000448  00000000  00000000  000068f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000302  00000000  00000000  00006d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014ba0  00000000  00000000  0000703a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005f4e  00000000  00000000  0001bbda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082cfa  00000000  00000000  00021b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a4822  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e5c  00000000  00000000  000a4868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000a56c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000040c 	.word	0x2000040c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000f20 	.word	0x08000f20

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000410 	.word	0x20000410
 80001d4:	08000f20 	.word	0x08000f20

080001d8 <HCSR04_Init>:
/*
 * PC6: ECHO pin
 * PC7: TRIG pin
*/
void HCSR04_Init()
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80001de:	2300      	movs	r3, #0
 80001e0:	603b      	str	r3, [r7, #0]
 80001e2:	4b10      	ldr	r3, [pc, #64]	@ (8000224 <HCSR04_Init+0x4c>)
 80001e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000224 <HCSR04_Init+0x4c>)
 80001e8:	f043 0304 	orr.w	r3, r3, #4
 80001ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80001ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000224 <HCSR04_Init+0x4c>)
 80001f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001f2:	f003 0304 	and.w	r3, r3, #4
 80001f6:	603b      	str	r3, [r7, #0]
 80001f8:	683b      	ldr	r3, [r7, #0]
	uint32_t* GPIOC_MODER = (uint32_t*) (GPIOC_BASE_ADDR + 0x00);
 80001fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000228 <HCSR04_Init+0x50>)
 80001fc:	607b      	str	r3, [r7, #4]
	*GPIOC_MODER &= ~(0b1111 << 12);	// set PC6 as INPUT ~ ECHO
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	601a      	str	r2, [r3, #0]
	*GPIOC_MODER |= (0b01 << 14);	// set PC7 as OUTPUT ~ TRIG
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	601a      	str	r2, [r3, #0]
}
 8000216:	bf00      	nop
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	40023800 	.word	0x40023800
 8000228:	40020800 	.word	0x40020800

0800022c <trig_HCSR04>:

/* This function is used to trigger the HC-SR04 sensor to start sending out an ultrasonic burst */
void trig_HCSR04()
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
	uint32_t* GPIOC_ODR = (uint32_t*) (GPIOC_BASE_ADDR + 0x14);
 8000232:	4b0a      	ldr	r3, [pc, #40]	@ (800025c <trig_HCSR04+0x30>)
 8000234:	607b      	str	r3, [r7, #4]
	*GPIOC_ODR |= (1 << 7);		// set TRIG to HIGH
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	601a      	str	r2, [r3, #0]
	delay_us(10);
 8000242:	200a      	movs	r0, #10
 8000244:	f000 f8b4 	bl	80003b0 <delay_us>
	*GPIOC_ODR &= ~(1 << 7);	// clear TRIG to LOW
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	601a      	str	r2, [r3, #0]
}
 8000254:	bf00      	nop
 8000256:	3708      	adds	r7, #8
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	40020814 	.word	0x40020814

08000260 <cal_distance>:

/*
 * This function is used to calculate the distance in centimeter
 */
uint32_t cal_distance()
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
	trig_HCSR04();
 8000266:	f7ff ffe1 	bl	800022c <trig_HCSR04>
	volatile uint32_t* GPIOC_IDR = (uint32_t*) (GPIOC_BASE_ADDR + 0x10);
 800026a:	4b11      	ldr	r3, [pc, #68]	@ (80002b0 <cal_distance+0x50>)
 800026c:	60fb      	str	r3, [r7, #12]
	while (((*GPIOC_IDR >> 6) & 1) == 0);	// wait until ECHO is HIGH
 800026e:	bf00      	nop
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	099b      	lsrs	r3, r3, #6
 8000276:	f003 0301 	and.w	r3, r3, #1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d0f8      	beq.n	8000270 <cal_distance+0x10>

	volatile uint32_t* TIM2_CNT = (uint32_t*) (TIM2_BASE_ADDR + 0x24);
 800027e:	4b0d      	ldr	r3, [pc, #52]	@ (80002b4 <cal_distance+0x54>)
 8000280:	60bb      	str	r3, [r7, #8]
	*TIM2_CNT = 0;	// set counter counting back from 0
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
	while (((*GPIOC_IDR >> 6) & 1) == 1);	// Keep counting until ECHO is LOW
 8000288:	bf00      	nop
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	099b      	lsrs	r3, r3, #6
 8000290:	f003 0301 	and.w	r3, r3, #1
 8000294:	2b01      	cmp	r3, #1
 8000296:	d0f8      	beq.n	800028a <cal_distance+0x2a>
	uint32_t time = *TIM2_CNT;	// save the time
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	607b      	str	r3, [r7, #4]
	return time / 58;	// use equation 3 in datasheet to calculate distance
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	4a05      	ldr	r2, [pc, #20]	@ (80002b8 <cal_distance+0x58>)
 80002a2:	fba2 2303 	umull	r2, r3, r2, r3
 80002a6:	095b      	lsrs	r3, r3, #5
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3710      	adds	r7, #16
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	40020810 	.word	0x40020810
 80002b4:	40000024 	.word	0x40000024
 80002b8:	8d3dcb09 	.word	0x8d3dcb09

080002bc <main>:
#include "oled.h"

int distance = 0;

int main()
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	HAL_Init();
 80002c0:	f000 fc8e 	bl	8000be0 <HAL_Init>
	HCSR04_Init();
 80002c4:	f7ff ff88 	bl	80001d8 <HCSR04_Init>
	TIM2_Init();
 80002c8:	f000 f832 	bl	8000330 <TIM2_Init>
	USART2_Init();
 80002cc:	f000 fbec 	bl	8000aa8 <USART2_Init>
	TIM3_Init();
 80002d0:	f000 fafe 	bl	80008d0 <TIM3_Init>
	I2C_Init();
 80002d4:	f000 fa54 	bl	8000780 <I2C_Init>
	SSD1306_Init();
 80002d8:	f000 f941 	bl	800055e <SSD1306_Init>
	OLED_ClrScr();
 80002dc:	f000 f910 	bl	8000500 <OLED_ClrScr>
	servo_ctrl(LEFT);
 80002e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002e4:	f000 fad8 	bl	8000898 <servo_ctrl>
	OLED_print_lidClose();
 80002e8:	f000 f896 	bl	8000418 <OLED_print_lidClose>

	while (1)
	{
		distance = cal_distance();
 80002ec:	f7ff ffb8 	bl	8000260 <cal_distance>
 80002f0:	4603      	mov	r3, r0
 80002f2:	461a      	mov	r2, r3
 80002f4:	4b0d      	ldr	r3, [pc, #52]	@ (800032c <main+0x70>)
 80002f6:	601a      	str	r2, [r3, #0]
		if (distance <= 10)
 80002f8:	4b0c      	ldr	r3, [pc, #48]	@ (800032c <main+0x70>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	2b0a      	cmp	r3, #10
 80002fe:	dc0f      	bgt.n	8000320 <main+0x64>
		{
			servo_ctrl(RIGHT);
 8000300:	f640 1092 	movw	r0, #2450	@ 0x992
 8000304:	f000 fac8 	bl	8000898 <servo_ctrl>
			OLED_print_lidOpen();
 8000308:	f000 f8c0 	bl	800048c <OLED_print_lidOpen>
			delay_ms(4000);
 800030c:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000310:	f000 f866 	bl	80003e0 <delay_ms>
			servo_ctrl(LEFT);
 8000314:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000318:	f000 fabe 	bl	8000898 <servo_ctrl>
			OLED_print_lidClose();
 800031c:	f000 f87c 	bl	8000418 <OLED_print_lidClose>
		}
		HAL_Delay(1000);
 8000320:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000324:	f000 fcce 	bl	8000cc4 <HAL_Delay>
		distance = cal_distance();
 8000328:	e7e0      	b.n	80002ec <main+0x30>
 800032a:	bf00      	nop
 800032c:	20000428 	.word	0x20000428

08000330 <TIM2_Init>:
#include "main.h"
#include "mydelay.h"

/* This function is used to initialize the TIMER2 */
void TIM2_Init()
{
 8000330:	b480      	push	{r7}
 8000332:	b085      	sub	sp, #20
 8000334:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();
 8000336:	2300      	movs	r3, #0
 8000338:	603b      	str	r3, [r7, #0]
 800033a:	4b1a      	ldr	r3, [pc, #104]	@ (80003a4 <TIM2_Init+0x74>)
 800033c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800033e:	4a19      	ldr	r2, [pc, #100]	@ (80003a4 <TIM2_Init+0x74>)
 8000340:	f043 0301 	orr.w	r3, r3, #1
 8000344:	6413      	str	r3, [r2, #64]	@ 0x40
 8000346:	4b17      	ldr	r3, [pc, #92]	@ (80003a4 <TIM2_Init+0x74>)
 8000348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800034a:	f003 0301 	and.w	r3, r3, #1
 800034e:	603b      	str	r3, [r7, #0]
 8000350:	683b      	ldr	r3, [r7, #0]
	uint32_t* TIM2_CR1 = (uint32_t*) (TIM2_BASE_ADDR + 0x00);
 8000352:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000356:	60fb      	str	r3, [r7, #12]
	*TIM2_CR1 &= ~(1 << 4);	// up-counter
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	f023 0210 	bic.w	r2, r3, #16
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	601a      	str	r2, [r3, #0]
	*TIM2_CR1 &= ~(1 << 0); // make sure CEN = 0 (stop timer)
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f023 0201 	bic.w	r2, r3, #1
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	601a      	str	r2, [r3, #0]

	uint32_t* TIM2_PSC = (uint32_t*) (TIM2_BASE_ADDR + 0x28);
 8000370:	4b0d      	ldr	r3, [pc, #52]	@ (80003a8 <TIM2_Init+0x78>)
 8000372:	60bb      	str	r3, [r7, #8]
	*TIM2_PSC = 16 - 1;		// PSC = N - 1, set CLK_TIM2 = 1 MHz
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	220f      	movs	r2, #15
 8000378:	601a      	str	r2, [r3, #0]

	uint32_t* TIM2_EGR = (uint32_t*) (TIM2_BASE_ADDR + 0x14);
 800037a:	4b0c      	ldr	r3, [pc, #48]	@ (80003ac <TIM2_Init+0x7c>)
 800037c:	607b      	str	r3, [r7, #4]
	*TIM2_EGR |= (1 << 0); 	// enable update generation
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	f043 0201 	orr.w	r2, r3, #1
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	601a      	str	r2, [r3, #0]

	*TIM2_CR1 |= (1 << 0);	// enable counter
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	f043 0201 	orr.w	r2, r3, #1
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	601a      	str	r2, [r3, #0]
}
 8000396:	bf00      	nop
 8000398:	3714      	adds	r7, #20
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	40023800 	.word	0x40023800
 80003a8:	40000028 	.word	0x40000028
 80003ac:	40000014 	.word	0x40000014

080003b0 <delay_us>:

/* This function is used to delay in microsecond */
void delay_us(uint32_t us)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	uint32_t* TIM2_CNT = (uint32_t*) (TIM2_BASE_ADDR + 0x24);
 80003b8:	4b08      	ldr	r3, [pc, #32]	@ (80003dc <delay_us+0x2c>)
 80003ba:	60fb      	str	r3, [r7, #12]
	*TIM2_CNT = 0;
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
	while (*TIM2_CNT < us);
 80003c2:	bf00      	nop
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	687a      	ldr	r2, [r7, #4]
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d8fa      	bhi.n	80003c4 <delay_us+0x14>
}
 80003ce:	bf00      	nop
 80003d0:	bf00      	nop
 80003d2:	3714      	adds	r7, #20
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	40000024 	.word	0x40000024

080003e0 <delay_ms>:

/* This function is used to delay in millisecond */
void delay_ms(uint32_t ms)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
	uint32_t* TIM2_CNT = (uint32_t*) (TIM2_BASE_ADDR + 0x24);
 80003e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000414 <delay_ms+0x34>)
 80003ea:	60fb      	str	r3, [r7, #12]
	*TIM2_CNT = 0;
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
	while (*TIM2_CNT < (ms * 1000));
 80003f2:	bf00      	nop
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	681a      	ldr	r2, [r3, #0]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80003fe:	fb01 f303 	mul.w	r3, r1, r3
 8000402:	429a      	cmp	r2, r3
 8000404:	d3f6      	bcc.n	80003f4 <delay_ms+0x14>
}
 8000406:	bf00      	nop
 8000408:	bf00      	nop
 800040a:	3714      	adds	r7, #20
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr
 8000414:	40000024 	.word	0x40000024

08000418 <OLED_print_lidClose>:
		}
	}
}

void OLED_print_lidClose()
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
	// Set column address range (0-127) ~ 128px
	OLED_WriteCMD(0x21);  // Set column address
 800041e:	2021      	movs	r0, #33	@ 0x21
 8000420:	f000 f90d 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0x00);  // Column start = 0
 8000424:	2000      	movs	r0, #0
 8000426:	f000 f90a 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0x7F);  // Column end = 127
 800042a:	207f      	movs	r0, #127	@ 0x7f
 800042c:	f000 f907 	bl	800063e <OLED_WriteCMD>

	// Set page address range (0 - 31) ~ 32px
	OLED_WriteCMD(0x22);  // Set page address
 8000430:	2022      	movs	r0, #34	@ 0x22
 8000432:	f000 f904 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0x00);  // Page start = 0
 8000436:	2000      	movs	r0, #0
 8000438:	f000 f901 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0x03);  // Page end = 3
 800043c:	2003      	movs	r0, #3
 800043e:	f000 f8fe 	bl	800063e <OLED_WriteCMD>

	OLED_ClrScr();
 8000442:	f000 f85d 	bl	8000500 <OLED_ClrScr>
	for (int i = 0; i < PAGE; i++)
 8000446:	2300      	movs	r3, #0
 8000448:	607b      	str	r3, [r7, #4]
 800044a:	e015      	b.n	8000478 <OLED_print_lidClose+0x60>
	{
		for (int j = 0; j < COLUMN; j++)
 800044c:	2300      	movs	r3, #0
 800044e:	603b      	str	r3, [r7, #0]
 8000450:	e00c      	b.n	800046c <OLED_print_lidClose+0x54>
		{
			OLED_WriteData(close[i][j]);
 8000452:	4a0d      	ldr	r2, [pc, #52]	@ (8000488 <OLED_print_lidClose+0x70>)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	01db      	lsls	r3, r3, #7
 8000458:	441a      	add	r2, r3
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	4413      	add	r3, r2
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	4618      	mov	r0, r3
 8000462:	f000 f8d4 	bl	800060e <OLED_WriteData>
		for (int j = 0; j < COLUMN; j++)
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	3301      	adds	r3, #1
 800046a:	603b      	str	r3, [r7, #0]
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000470:	ddef      	ble.n	8000452 <OLED_print_lidClose+0x3a>
	for (int i = 0; i < PAGE; i++)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	3301      	adds	r3, #1
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2b03      	cmp	r3, #3
 800047c:	dde6      	ble.n	800044c <OLED_print_lidClose+0x34>
		}
	}
}
 800047e:	bf00      	nop
 8000480:	bf00      	nop
 8000482:	3708      	adds	r7, #8
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	20000200 	.word	0x20000200

0800048c <OLED_print_lidOpen>:

void OLED_print_lidOpen()
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
	// Set column address range (0-127) ~ 128px
	OLED_WriteCMD(0x21);  // Set column address
 8000492:	2021      	movs	r0, #33	@ 0x21
 8000494:	f000 f8d3 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0x00);  // Column start = 0
 8000498:	2000      	movs	r0, #0
 800049a:	f000 f8d0 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0x7F);  // Column end = 127
 800049e:	207f      	movs	r0, #127	@ 0x7f
 80004a0:	f000 f8cd 	bl	800063e <OLED_WriteCMD>

	// Set page address range (0 - 31) ~ 32px
	OLED_WriteCMD(0x22);  // Set page address
 80004a4:	2022      	movs	r0, #34	@ 0x22
 80004a6:	f000 f8ca 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0x00);  // Page start = 0
 80004aa:	2000      	movs	r0, #0
 80004ac:	f000 f8c7 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0x03);  // Page end = 3
 80004b0:	2003      	movs	r0, #3
 80004b2:	f000 f8c4 	bl	800063e <OLED_WriteCMD>

	OLED_ClrScr();
 80004b6:	f000 f823 	bl	8000500 <OLED_ClrScr>
	for (int i = 0; i < PAGE; i++)
 80004ba:	2300      	movs	r3, #0
 80004bc:	607b      	str	r3, [r7, #4]
 80004be:	e015      	b.n	80004ec <OLED_print_lidOpen+0x60>
	{
		for (int j = 0; j < COLUMN; j++)
 80004c0:	2300      	movs	r3, #0
 80004c2:	603b      	str	r3, [r7, #0]
 80004c4:	e00c      	b.n	80004e0 <OLED_print_lidOpen+0x54>
		{
			OLED_WriteData(open[i][j]);
 80004c6:	4a0d      	ldr	r2, [pc, #52]	@ (80004fc <OLED_print_lidOpen+0x70>)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	01db      	lsls	r3, r3, #7
 80004cc:	441a      	add	r2, r3
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	4413      	add	r3, r2
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	4618      	mov	r0, r3
 80004d6:	f000 f89a 	bl	800060e <OLED_WriteData>
		for (int j = 0; j < COLUMN; j++)
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	3301      	adds	r3, #1
 80004de:	603b      	str	r3, [r7, #0]
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80004e4:	ddef      	ble.n	80004c6 <OLED_print_lidOpen+0x3a>
	for (int i = 0; i < PAGE; i++)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	3301      	adds	r3, #1
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2b03      	cmp	r3, #3
 80004f0:	dde6      	ble.n	80004c0 <OLED_print_lidOpen+0x34>
		}
	}
}
 80004f2:	bf00      	nop
 80004f4:	bf00      	nop
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20000000 	.word	0x20000000

08000500 <OLED_ClrScr>:

void OLED_ClrScr()
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
	// Set column address range (0-127) ~ 128px
	OLED_WriteCMD(0x21);  // Set column address
 8000506:	2021      	movs	r0, #33	@ 0x21
 8000508:	f000 f899 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0x00);  // Column start = 0
 800050c:	2000      	movs	r0, #0
 800050e:	f000 f896 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0x7F);  // Column end = 127
 8000512:	207f      	movs	r0, #127	@ 0x7f
 8000514:	f000 f893 	bl	800063e <OLED_WriteCMD>

    // Set page address range (0 - 31) ~ 32px
	OLED_WriteCMD(0x22);  // Set page address
 8000518:	2022      	movs	r0, #34	@ 0x22
 800051a:	f000 f890 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0x00);  // Page start = 0
 800051e:	2000      	movs	r0, #0
 8000520:	f000 f88d 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0x03);  // Page end = 3
 8000524:	2003      	movs	r0, #3
 8000526:	f000 f88a 	bl	800063e <OLED_WriteCMD>

    // Fill whole screen (4 pages x 128 columns)
    for (int page = 0; page < 4; page++)
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	e00e      	b.n	800054e <OLED_ClrScr+0x4e>
    {
        for (int col = 0; col < 128; col++)
 8000530:	2300      	movs	r3, #0
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	e005      	b.n	8000542 <OLED_ClrScr+0x42>
        {
            OLED_WriteData(0x00);
 8000536:	2000      	movs	r0, #0
 8000538:	f000 f869 	bl	800060e <OLED_WriteData>
        for (int col = 0; col < 128; col++)
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	3301      	adds	r3, #1
 8000540:	603b      	str	r3, [r7, #0]
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	2b7f      	cmp	r3, #127	@ 0x7f
 8000546:	ddf6      	ble.n	8000536 <OLED_ClrScr+0x36>
    for (int page = 0; page < 4; page++)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	3301      	adds	r3, #1
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2b03      	cmp	r3, #3
 8000552:	dded      	ble.n	8000530 <OLED_ClrScr+0x30>
        }
    }
}
 8000554:	bf00      	nop
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <SSD1306_Init>:
        }
    }
}

void SSD1306_Init()
{
 800055e:	b580      	push	{r7, lr}
 8000560:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8000562:	2064      	movs	r0, #100	@ 0x64
 8000564:	f000 fbae 	bl	8000cc4 <HAL_Delay>
	OLED_WriteCMD(0xAE); //display off
 8000568:	20ae      	movs	r0, #174	@ 0xae
 800056a:	f000 f868 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0x20); //Set Memory Addressing Mode
 800056e:	2020      	movs	r0, #32
 8000570:	f000 f865 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000574:	2000      	movs	r0, #0
 8000576:	f000 f862 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800057a:	20b0      	movs	r0, #176	@ 0xb0
 800057c:	f000 f85f 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0xC8); //Set COM Output Scan Direction
 8000580:	20c8      	movs	r0, #200	@ 0xc8
 8000582:	f000 f85c 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0x00); //---set low column address
 8000586:	2000      	movs	r0, #0
 8000588:	f000 f859 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0x10); //---set high column address
 800058c:	2010      	movs	r0, #16
 800058e:	f000 f856 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0x40); //--set start line address - CHECK
 8000592:	2040      	movs	r0, #64	@ 0x40
 8000594:	f000 f853 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0xFF);
 8000598:	20ff      	movs	r0, #255	@ 0xff
 800059a:	f000 f850 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0xA1); //--set segment re-map 0 to 127 - CHECK
 800059e:	20a1      	movs	r0, #161	@ 0xa1
 80005a0:	f000 f84d 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0xA6); //--set normal color
 80005a4:	20a6      	movs	r0, #166	@ 0xa6
 80005a6:	f000 f84a 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80005aa:	20a8      	movs	r0, #168	@ 0xa8
 80005ac:	f000 f847 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0x1F); //
 80005b0:	201f      	movs	r0, #31
 80005b2:	f000 f844 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80005b6:	20a4      	movs	r0, #164	@ 0xa4
 80005b8:	f000 f841 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0xD3); //-set display offset - CHECK
 80005bc:	20d3      	movs	r0, #211	@ 0xd3
 80005be:	f000 f83e 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0x00); //-not offset
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 f83b 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0xD5); //--set display clock divide ratio/oscillator frequency
 80005c8:	20d5      	movs	r0, #213	@ 0xd5
 80005ca:	f000 f838 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0xF0); //--set divide ratio
 80005ce:	20f0      	movs	r0, #240	@ 0xf0
 80005d0:	f000 f835 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0xD9); //--set pre-charge period
 80005d4:	20d9      	movs	r0, #217	@ 0xd9
 80005d6:	f000 f832 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0x22); //
 80005da:	2022      	movs	r0, #34	@ 0x22
 80005dc:	f000 f82f 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0xDA); //--set com pins hardware configuration - CHECK
 80005e0:	20da      	movs	r0, #218	@ 0xda
 80005e2:	f000 f82c 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0x02);
 80005e6:	2002      	movs	r0, #2
 80005e8:	f000 f829 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0xDB); //--set vcomh
 80005ec:	20db      	movs	r0, #219	@ 0xdb
 80005ee:	f000 f826 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0x20); //0x20,0.77xVcc
 80005f2:	2020      	movs	r0, #32
 80005f4:	f000 f823 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0x8D); //--set DC-DC enable
 80005f8:	208d      	movs	r0, #141	@ 0x8d
 80005fa:	f000 f820 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0x14); //
 80005fe:	2014      	movs	r0, #20
 8000600:	f000 f81d 	bl	800063e <OLED_WriteCMD>
	OLED_WriteCMD(0xAF); //--turn on SSD1306 panel
 8000604:	20af      	movs	r0, #175	@ 0xaf
 8000606:	f000 f81a 	bl	800063e <OLED_WriteCMD>
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}

0800060e <OLED_WriteData>:

void OLED_WriteData(uint8_t data)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	b082      	sub	sp, #8
 8000612:	af00      	add	r7, sp, #0
 8000614:	4603      	mov	r3, r0
 8000616:	71fb      	strb	r3, [r7, #7]
	I2C_start();
 8000618:	f000 f892 	bl	8000740 <I2C_start>
	I2C_send_addr(SSD1306_ADDR, WRITE);
 800061c:	2100      	movs	r1, #0
 800061e:	203c      	movs	r0, #60	@ 0x3c
 8000620:	f000 f85a 	bl	80006d8 <I2C_send_addr>
	I2C_send_byte(DATA);
 8000624:	2040      	movs	r0, #64	@ 0x40
 8000626:	f000 f823 	bl	8000670 <I2C_send_byte>
	I2C_send_byte(data);
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	4618      	mov	r0, r3
 800062e:	f000 f81f 	bl	8000670 <I2C_send_byte>
	I2C_stop();
 8000632:	f000 f83d 	bl	80006b0 <I2C_stop>
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <OLED_WriteCMD>:

void OLED_WriteCMD(uint8_t cmd)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	4603      	mov	r3, r0
 8000646:	71fb      	strb	r3, [r7, #7]
	I2C_start();
 8000648:	f000 f87a 	bl	8000740 <I2C_start>
	I2C_send_addr(SSD1306_ADDR, WRITE);
 800064c:	2100      	movs	r1, #0
 800064e:	203c      	movs	r0, #60	@ 0x3c
 8000650:	f000 f842 	bl	80006d8 <I2C_send_addr>
	I2C_send_byte(CMD);
 8000654:	2000      	movs	r0, #0
 8000656:	f000 f80b 	bl	8000670 <I2C_send_byte>
	I2C_send_byte(cmd);
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	4618      	mov	r0, r3
 800065e:	f000 f807 	bl	8000670 <I2C_send_byte>
	I2C_stop();
 8000662:	f000 f825 	bl	80006b0 <I2C_stop>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <I2C_send_byte>:

void I2C_send_byte(uint8_t data)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
	uint8_t* I2C_DR = (uint8_t*) (I2C1_BASE_ADDR + 0x10);
 800067a:	4b0b      	ldr	r3, [pc, #44]	@ (80006a8 <I2C_send_byte+0x38>)
 800067c:	60fb      	str	r3, [r7, #12]
	uint32_t* I2C_SR1 = (uint32_t*) (I2C1_BASE_ADDR + 0x14);
 800067e:	4b0b      	ldr	r3, [pc, #44]	@ (80006ac <I2C_send_byte+0x3c>)
 8000680:	60bb      	str	r3, [r7, #8]
	*I2C_DR = data;
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	79fa      	ldrb	r2, [r7, #7]
 8000686:	701a      	strb	r2, [r3, #0]
	while (((*I2C_SR1 >> 7) & 1) == 0);	// wait until data has been transferred
 8000688:	bf00      	nop
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	09db      	lsrs	r3, r3, #7
 8000690:	f003 0301 	and.w	r3, r3, #1
 8000694:	2b00      	cmp	r3, #0
 8000696:	d0f8      	beq.n	800068a <I2C_send_byte+0x1a>
}
 8000698:	bf00      	nop
 800069a:	bf00      	nop
 800069c:	3714      	adds	r7, #20
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	40005410 	.word	0x40005410
 80006ac:	40005414 	.word	0x40005414

080006b0 <I2C_stop>:

void I2C_stop()
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
	uint32_t* I2C_CR1 = (uint32_t*) (I2C1_BASE_ADDR + 0x00);
 80006b6:	4b07      	ldr	r3, [pc, #28]	@ (80006d4 <I2C_stop+0x24>)
 80006b8:	607b      	str	r3, [r7, #4]
	*I2C_CR1 |= 1 << 9;		// send STOP
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	601a      	str	r2, [r3, #0]
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40005400 	.word	0x40005400

080006d8 <I2C_send_addr>:

void I2C_send_addr(uint8_t slave_addr, mode_t mode)
{
 80006d8:	b480      	push	{r7}
 80006da:	b087      	sub	sp, #28
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	460a      	mov	r2, r1
 80006e2:	71fb      	strb	r3, [r7, #7]
 80006e4:	4613      	mov	r3, r2
 80006e6:	71bb      	strb	r3, [r7, #6]
	uint8_t* I2C_DR = (uint8_t*) (I2C1_BASE_ADDR + 0x10);
 80006e8:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <I2C_send_addr+0x5c>)
 80006ea:	617b      	str	r3, [r7, #20]
	uint32_t* I2C_SR1 = (uint32_t*) (I2C1_BASE_ADDR + 0x14);
 80006ec:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <I2C_send_addr+0x60>)
 80006ee:	613b      	str	r3, [r7, #16]
	uint32_t* I2C_SR2 = (uint32_t*) (I2C1_BASE_ADDR + 0x18);
 80006f0:	4b12      	ldr	r3, [pc, #72]	@ (800073c <I2C_send_addr+0x64>)
 80006f2:	60fb      	str	r3, [r7, #12]
	/*	ADDRESS PHASE  */
	// send address to slave and select WRITE mode
	*I2C_DR = (slave_addr << 1) | mode;
 80006f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	b25a      	sxtb	r2, r3
 80006fc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000700:	4313      	orrs	r3, r2
 8000702:	b25b      	sxtb	r3, r3
 8000704:	b2da      	uxtb	r2, r3
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	701a      	strb	r2, [r3, #0]
	// wait until the address transmission is completed
	while (((*I2C_SR1 >> 1) & 1) == 0);
 800070a:	bf00      	nop
 800070c:	693b      	ldr	r3, [r7, #16]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	085b      	lsrs	r3, r3, #1
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	2b00      	cmp	r3, #0
 8000718:	d0f8      	beq.n	800070c <I2C_send_addr+0x34>
	// read SR1 and SR2 to clear ADDR bit
	volatile int tmp = *I2C_SR1;
 800071a:	693b      	ldr	r3, [r7, #16]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	60bb      	str	r3, [r7, #8]
	tmp = *I2C_SR2;
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	60bb      	str	r3, [r7, #8]
}
 8000726:	bf00      	nop
 8000728:	371c      	adds	r7, #28
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40005410 	.word	0x40005410
 8000738:	40005414 	.word	0x40005414
 800073c:	40005418 	.word	0x40005418

08000740 <I2C_start>:

void I2C_start()
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
	uint32_t* I2C_CR1 = (uint32_t*) (I2C1_BASE_ADDR + 0x00);
 8000746:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <I2C_start+0x38>)
 8000748:	607b      	str	r3, [r7, #4]
	uint32_t* I2C_SR1 = (uint32_t*) (I2C1_BASE_ADDR + 0x14);
 800074a:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <I2C_start+0x3c>)
 800074c:	603b      	str	r3, [r7, #0]
	// send START
	*I2C_CR1 |= 1 << 8;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	601a      	str	r2, [r3, #0]
	// wait until START condition is generated and operate at Master mode
	while ((*I2C_SR1 & 1) == 0);
 800075a:	bf00      	nop
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f003 0301 	and.w	r3, r3, #1
 8000764:	2b00      	cmp	r3, #0
 8000766:	d0f9      	beq.n	800075c <I2C_start+0x1c>
}
 8000768:	bf00      	nop
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40005400 	.word	0x40005400
 800077c:	40005414 	.word	0x40005414

08000780 <I2C_Init>:
 * This function is used to initialize I2C1 peripheral
 * PB6: SCL
 * PB7: SDA
 */
void I2C_Init()
{
 8000780:	b480      	push	{r7}
 8000782:	b08b      	sub	sp, #44	@ 0x2c
 8000784:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b3a      	ldr	r3, [pc, #232]	@ (8000874 <I2C_Init+0xf4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a39      	ldr	r2, [pc, #228]	@ (8000874 <I2C_Init+0xf4>)
 8000790:	f043 0302 	orr.w	r3, r3, #2
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b37      	ldr	r3, [pc, #220]	@ (8000874 <I2C_Init+0xf4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0302 	and.w	r3, r3, #2
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
	uint32_t* GPIOB_MODER = (uint32_t*) (GPIOB_BASE_ADDR + 0x00);
 80007a2:	4b35      	ldr	r3, [pc, #212]	@ (8000878 <I2C_Init+0xf8>)
 80007a4:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t* GPIOB_OTYPER = (uint32_t*) (GPIOB_BASE_ADDR + 0x04);
 80007a6:	4b35      	ldr	r3, [pc, #212]	@ (800087c <I2C_Init+0xfc>)
 80007a8:	623b      	str	r3, [r7, #32]
	uint32_t* GPIOB_PUPDR = (uint32_t*) (GPIOB_BASE_ADDR + 0x0C);
 80007aa:	4b35      	ldr	r3, [pc, #212]	@ (8000880 <I2C_Init+0x100>)
 80007ac:	61fb      	str	r3, [r7, #28]
	uint32_t* GPIOB_AFRL = (uint32_t*) (GPIOB_BASE_ADDR + 0x20);
 80007ae:	4b35      	ldr	r3, [pc, #212]	@ (8000884 <I2C_Init+0x104>)
 80007b0:	61bb      	str	r3, [r7, #24]
	*GPIOB_MODER &= ~(0xf << 12);	// clear bit
 80007b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 80007ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007bc:	601a      	str	r2, [r3, #0]
	*GPIOB_MODER |= (0b1010 << 12);	// set PB6, PB7 at AF mode
 80007be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f443 4220 	orr.w	r2, r3, #40960	@ 0xa000
 80007c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007c8:	601a      	str	r2, [r3, #0]
	*GPIOB_OTYPER |= (0b11 << 6);	// set open-drain mode
 80007ca:	6a3b      	ldr	r3, [r7, #32]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f043 02c0 	orr.w	r2, r3, #192	@ 0xc0
 80007d2:	6a3b      	ldr	r3, [r7, #32]
 80007d4:	601a      	str	r2, [r3, #0]
	*GPIOB_PUPDR &= ~(0xf << 12);	// clear bit
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	601a      	str	r2, [r3, #0]
	*GPIOB_PUPDR |= (0b0101 << 12);	// configure PB6, PB7 the I/O pull-up
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f443 42a0 	orr.w	r2, r3, #20480	@ 0x5000
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	601a      	str	r2, [r3, #0]
	*GPIOB_AFRL &= ~(0xff << 24);	// clear bit
 80007ee:	69bb      	ldr	r3, [r7, #24]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80007f6:	69bb      	ldr	r3, [r7, #24]
 80007f8:	601a      	str	r2, [r3, #0]
	*GPIOB_AFRL |= (4 << 24) | (4 << 28);	// select AF04
 80007fa:	69bb      	ldr	r3, [r7, #24]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f043 4288 	orr.w	r2, r3, #1140850688	@ 0x44000000
 8000802:	69bb      	ldr	r3, [r7, #24]
 8000804:	601a      	str	r2, [r3, #0]

	__HAL_RCC_I2C1_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	4b1a      	ldr	r3, [pc, #104]	@ (8000874 <I2C_Init+0xf4>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080e:	4a19      	ldr	r2, [pc, #100]	@ (8000874 <I2C_Init+0xf4>)
 8000810:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000814:	6413      	str	r3, [r2, #64]	@ 0x40
 8000816:	4b17      	ldr	r3, [pc, #92]	@ (8000874 <I2C_Init+0xf4>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]
	uint32_t* I2C_CR2 = (uint32_t*) (I2C1_BASE_ADDR + 0x04);
 8000822:	4b19      	ldr	r3, [pc, #100]	@ (8000888 <I2C_Init+0x108>)
 8000824:	617b      	str	r3, [r7, #20]
	uint32_t* I2C_CCR = (uint32_t*) (I2C1_BASE_ADDR + 0x1C);
 8000826:	4b19      	ldr	r3, [pc, #100]	@ (800088c <I2C_Init+0x10c>)
 8000828:	613b      	str	r3, [r7, #16]
	uint32_t* I2C_TRISE = (uint32_t*) (I2C1_BASE_ADDR + 0x20);
 800082a:	4b19      	ldr	r3, [pc, #100]	@ (8000890 <I2C_Init+0x110>)
 800082c:	60fb      	str	r3, [r7, #12]
	uint32_t* I2C_CR1 = (uint32_t*) (I2C1_BASE_ADDR + 0x00);
 800082e:	4b19      	ldr	r3, [pc, #100]	@ (8000894 <I2C_Init+0x114>)
 8000830:	60bb      	str	r3, [r7, #8]
	*I2C_CR2 |= (16 << 0);	// set f = 16MHz
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f043 0210 	orr.w	r2, r3, #16
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	601a      	str	r2, [r3, #0]
	*I2C_CCR &= ~(1 << 15);	// select standard mode
 800083e:	693b      	ldr	r3, [r7, #16]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	601a      	str	r2, [r3, #0]
	*I2C_CCR |= 80 << 0; 	// set SCL freq = 100 kHz
 800084a:	693b      	ldr	r3, [r7, #16]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f043 0250 	orr.w	r2, r3, #80	@ 0x50
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	601a      	str	r2, [r3, #0]
	*I2C_TRISE = 17; 		// set time rise
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	2211      	movs	r2, #17
 800085a:	601a      	str	r2, [r3, #0]
	*I2C_CR1 |= (1 << 0);	// enable peripheral
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f043 0201 	orr.w	r2, r3, #1
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	601a      	str	r2, [r3, #0]
}
 8000868:	bf00      	nop
 800086a:	372c      	adds	r7, #44	@ 0x2c
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	40023800 	.word	0x40023800
 8000878:	40020400 	.word	0x40020400
 800087c:	40020404 	.word	0x40020404
 8000880:	4002040c 	.word	0x4002040c
 8000884:	40020420 	.word	0x40020420
 8000888:	40005404 	.word	0x40005404
 800088c:	4000541c 	.word	0x4000541c
 8000890:	40005420 	.word	0x40005420
 8000894:	40005400 	.word	0x40005400

08000898 <servo_ctrl>:
 */
#include "main.h"
#include "servo.h"

void servo_ctrl(direc_t d)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	80fb      	strh	r3, [r7, #6]
	uint32_t* TIM3_CCR1 = (uint32_t*) (TIM3_BASE_ADDR + 0x34);
 80008a2:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <servo_ctrl+0x30>)
 80008a4:	60fb      	str	r3, [r7, #12]
	*TIM3_CCR1 = d;
 80008a6:	88fa      	ldrh	r2, [r7, #6]
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	601a      	str	r2, [r3, #0]
	uint32_t* TIM3_EGR = (uint32_t*) (TIM3_BASE_ADDR + 0x14);
 80008ac:	4b07      	ldr	r3, [pc, #28]	@ (80008cc <servo_ctrl+0x34>)
 80008ae:	60bb      	str	r3, [r7, #8]
	*TIM3_EGR |= (1 << 0);	// update generation
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f043 0201 	orr.w	r2, r3, #1
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	601a      	str	r2, [r3, #0]
}
 80008bc:	bf00      	nop
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	40000434 	.word	0x40000434
 80008cc:	40000414 	.word	0x40000414

080008d0 <TIM3_Init>:

/*
 * PB4: Timer3 Channel 1 (AF2)
*/
void TIM3_Init()
{
 80008d0:	b480      	push	{r7}
 80008d2:	b08b      	sub	sp, #44	@ 0x2c
 80008d4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b35      	ldr	r3, [pc, #212]	@ (80009b0 <TIM3_Init+0xe0>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a34      	ldr	r2, [pc, #208]	@ (80009b0 <TIM3_Init+0xe0>)
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b32      	ldr	r3, [pc, #200]	@ (80009b0 <TIM3_Init+0xe0>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
	uint32_t* GPIOB_MODER = (uint32_t*) (GPIOB_BASE_ADDR + 0x00);
 80008f2:	4b30      	ldr	r3, [pc, #192]	@ (80009b4 <TIM3_Init+0xe4>)
 80008f4:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t* GPIOB_AFRL = (uint32_t*) (GPIOB_BASE_ADDR + 0x20);
 80008f6:	4b30      	ldr	r3, [pc, #192]	@ (80009b8 <TIM3_Init+0xe8>)
 80008f8:	623b      	str	r3, [r7, #32]
	*GPIOB_MODER &= ~(0b11 << 8);
 80008fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8000902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000904:	601a      	str	r2, [r3, #0]
	*GPIOB_MODER |= (0b10 << 8);	// set PB4 at AF mode for TIMER3
 8000906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800090e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000910:	601a      	str	r2, [r3, #0]
	*GPIOB_AFRL &= ~(0xf << 16);
 8000912:	6a3b      	ldr	r3, [r7, #32]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800091a:	6a3b      	ldr	r3, [r7, #32]
 800091c:	601a      	str	r2, [r3, #0]
	*GPIOB_AFRL |= (2 << 16);	// select AF02
 800091e:	6a3b      	ldr	r3, [r7, #32]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000926:	6a3b      	ldr	r3, [r7, #32]
 8000928:	601a      	str	r2, [r3, #0]

	__HAL_RCC_TIM3_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	4b20      	ldr	r3, [pc, #128]	@ (80009b0 <TIM3_Init+0xe0>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000932:	4a1f      	ldr	r2, [pc, #124]	@ (80009b0 <TIM3_Init+0xe0>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	6413      	str	r3, [r2, #64]	@ 0x40
 800093a:	4b1d      	ldr	r3, [pc, #116]	@ (80009b0 <TIM3_Init+0xe0>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]
	uint32_t* TIM3_CR1 = (uint32_t*) (TIM3_BASE_ADDR + 0x00);
 8000946:	4b1d      	ldr	r3, [pc, #116]	@ (80009bc <TIM3_Init+0xec>)
 8000948:	61fb      	str	r3, [r7, #28]
	uint32_t* TIM3_PSC = (uint32_t*) (TIM3_BASE_ADDR + 0x28);
 800094a:	4b1d      	ldr	r3, [pc, #116]	@ (80009c0 <TIM3_Init+0xf0>)
 800094c:	61bb      	str	r3, [r7, #24]
	uint32_t* TIM3_ARR = (uint32_t*) (TIM3_BASE_ADDR + 0x2C);
 800094e:	4b1d      	ldr	r3, [pc, #116]	@ (80009c4 <TIM3_Init+0xf4>)
 8000950:	617b      	str	r3, [r7, #20]
	uint32_t* TIM3_CCMR1 = (uint32_t*) (TIM3_BASE_ADDR + 0x18);
 8000952:	4b1d      	ldr	r3, [pc, #116]	@ (80009c8 <TIM3_Init+0xf8>)
 8000954:	613b      	str	r3, [r7, #16]
	uint32_t* TIM3_CCR1 = (uint32_t*) (TIM3_BASE_ADDR + 0x34);
 8000956:	4b1d      	ldr	r3, [pc, #116]	@ (80009cc <TIM3_Init+0xfc>)
 8000958:	60fb      	str	r3, [r7, #12]
	uint32_t* TIM_CCER = (uint32_t*) (TIM3_BASE_ADDR + 0x20);
 800095a:	4b1d      	ldr	r3, [pc, #116]	@ (80009d0 <TIM3_Init+0x100>)
 800095c:	60bb      	str	r3, [r7, #8]
	*TIM3_CR1 &= ~(1 << 4);		// up-counter
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f023 0210 	bic.w	r2, r3, #16
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	601a      	str	r2, [r3, #0]
	*TIM3_PSC = 16 - 1;		// PSC = N - 1, set CLK_TIM3 = 1 MHz
 800096a:	69bb      	ldr	r3, [r7, #24]
 800096c:	220f      	movs	r2, #15
 800096e:	601a      	str	r2, [r3, #0]
	*TIM3_ARR = 19999;		// PWM period = 20 ms (50 Hz)
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000976:	601a      	str	r2, [r3, #0]
	*TIM3_CCMR1 |= (0b110 << 4);	// select PWM mode 1
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	601a      	str	r2, [r3, #0]
//	*TIM3_CCMR1 |= (1 << 3);	// enable pre-load
	*TIM3_CCR1 = 1500;	// set motor default status is IDLE
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800098a:	601a      	str	r2, [r3, #0]
	*TIM_CCER |= (1 << 0); 	// enable channel 1
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f043 0201 	orr.w	r2, r3, #1
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	601a      	str	r2, [r3, #0]
	*TIM3_CR1 |= (1 << 0);	// enable counter
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f043 0201 	orr.w	r2, r3, #1
 80009a0:	69fb      	ldr	r3, [r7, #28]
 80009a2:	601a      	str	r2, [r3, #0]
}
 80009a4:	bf00      	nop
 80009a6:	372c      	adds	r7, #44	@ 0x2c
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020400 	.word	0x40020400
 80009b8:	40020420 	.word	0x40020420
 80009bc:	40000400 	.word	0x40000400
 80009c0:	40000428 	.word	0x40000428
 80009c4:	4000042c 	.word	0x4000042c
 80009c8:	40000418 	.word	0x40000418
 80009cc:	40000434 	.word	0x40000434
 80009d0:	40000420 	.word	0x40000420

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b10      	ldr	r3, [pc, #64]	@ (8000a20 <HAL_MspInit+0x4c>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000a20 <HAL_MspInit+0x4c>)
 80009e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000a20 <HAL_MspInit+0x4c>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <HAL_MspInit+0x4c>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fe:	4a08      	ldr	r2, [pc, #32]	@ (8000a20 <HAL_MspInit+0x4c>)
 8000a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a06:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <HAL_MspInit+0x4c>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <NMI_Handler+0x4>

08000a2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <HardFault_Handler+0x4>

08000a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <MemManage_Handler+0x4>

08000a3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <BusFault_Handler+0x4>

08000a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <UsageFault_Handler+0x4>

08000a4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a7a:	f000 f903 	bl	8000c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a88:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <SystemInit+0x20>)
 8000a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a8e:	4a05      	ldr	r2, [pc, #20]	@ (8000aa4 <SystemInit+0x20>)
 8000a90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <USART2_Init>:
 * Data size: 8 bits
 * Parity: Odd
 * Baud rate: 14400 bps
*/
void USART2_Init()
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b087      	sub	sp, #28
 8000aac:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b31      	ldr	r3, [pc, #196]	@ (8000b78 <USART2_Init+0xd0>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	4a30      	ldr	r2, [pc, #192]	@ (8000b78 <USART2_Init+0xd0>)
 8000ab8:	f043 0308 	orr.w	r3, r3, #8
 8000abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000abe:	4b2e      	ldr	r3, [pc, #184]	@ (8000b78 <USART2_Init+0xd0>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	f003 0308 	and.w	r3, r3, #8
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
	uint32_t* GPIOD_MODER = (uint32_t*) (GPIOD_BASE_ADDR + 0x00);
 8000aca:	4b2c      	ldr	r3, [pc, #176]	@ (8000b7c <USART2_Init+0xd4>)
 8000acc:	617b      	str	r3, [r7, #20]
	uint32_t* GPIOD_AFRL = (uint32_t*) (GPIOD_BASE_ADDR + 0x20);
 8000ace:	4b2c      	ldr	r3, [pc, #176]	@ (8000b80 <USART2_Init+0xd8>)
 8000ad0:	613b      	str	r3, [r7, #16]
	*GPIOD_MODER &= ~(0xf << 10);
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	601a      	str	r2, [r3, #0]
	*GPIOD_MODER |= (0b1010 << 10); // configure PD5 and PD6 at AF mode
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f443 5220 	orr.w	r2, r3, #10240	@ 0x2800
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	601a      	str	r2, [r3, #0]
	*GPIOD_AFRL &= ~(0xff << 20);
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f023 627f 	bic.w	r2, r3, #267386880	@ 0xff00000
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	601a      	str	r2, [r3, #0]
	*GPIOD_AFRL |= (7 << 20) | (7 << 24);	// AF07 for PD5 and PD6
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f043 62ee 	orr.w	r2, r3, #124780544	@ 0x7700000
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	601a      	str	r2, [r3, #0]

	__HAL_RCC_USART2_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	603b      	str	r3, [r7, #0]
 8000b06:	4b1c      	ldr	r3, [pc, #112]	@ (8000b78 <USART2_Init+0xd0>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0a:	4a1b      	ldr	r2, [pc, #108]	@ (8000b78 <USART2_Init+0xd0>)
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b12:	4b19      	ldr	r3, [pc, #100]	@ (8000b78 <USART2_Init+0xd0>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]
	uint32_t* USART2_CR1 = (uint32_t*) (USART2_BASE_ADDR + 0x0C);
 8000b1e:	4b19      	ldr	r3, [pc, #100]	@ (8000b84 <USART2_Init+0xdc>)
 8000b20:	60fb      	str	r3, [r7, #12]
	uint32_t* USART2_BRR = (uint32_t*) (USART2_BASE_ADDR + 0x08);
 8000b22:	4b19      	ldr	r3, [pc, #100]	@ (8000b88 <USART2_Init+0xe0>)
 8000b24:	60bb      	str	r3, [r7, #8]
	*USART2_CR1 |= (1 << 12);	// set word length = 9 data bits
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	601a      	str	r2, [r3, #0]
	*USART2_CR1 |= (1 << 10); 	// enable parity control
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	601a      	str	r2, [r3, #0]
	*USART2_CR1 |= (1 << 9); 	// select odd parity
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	601a      	str	r2, [r3, #0]
	*USART2_CR1 |= (1 << 3); 	// enable transmitter
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f043 0208 	orr.w	r2, r3, #8
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	601a      	str	r2, [r3, #0]
	*USART2_BRR = (69 << 4) | (0b0111 << 0);	// set baud rate at 14400 bps
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	f240 4257 	movw	r2, #1111	@ 0x457
 8000b5c:	601a      	str	r2, [r3, #0]
	*USART2_CR1 |= (1 << 13); 	// enable USART
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	601a      	str	r2, [r3, #0]
}
 8000b6a:	bf00      	nop
 8000b6c:	371c      	adds	r7, #28
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020c00 	.word	0x40020c00
 8000b80:	40020c20 	.word	0x40020c20
 8000b84:	4000440c 	.word	0x4000440c
 8000b88:	40004408 	.word	0x40004408

08000b8c <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8000b8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bc4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b90:	f7ff ff78 	bl	8000a84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b94:	480c      	ldr	r0, [pc, #48]	@ (8000bc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b96:	490d      	ldr	r1, [pc, #52]	@ (8000bcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b98:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b9c:	e002      	b.n	8000ba4 <LoopCopyDataInit>

08000b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba2:	3304      	adds	r3, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba8:	d3f9      	bcc.n	8000b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000baa:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bac:	4c0a      	ldr	r4, [pc, #40]	@ (8000bd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb0:	e001      	b.n	8000bb6 <LoopFillZerobss>

08000bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb4:	3204      	adds	r2, #4

08000bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bba:	f000 f98d 	bl	8000ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bbe:	f7ff fb7d 	bl	80002bc <main>
  bx  lr    
 8000bc2:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8000bc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	2000040c 	.word	0x2000040c
  ldr r2, =_sidata
 8000bd0:	08000f40 	.word	0x08000f40
  ldr r2, =_sbss
 8000bd4:	2000040c 	.word	0x2000040c
  ldr r4, =_ebss
 8000bd8:	20000430 	.word	0x20000430

08000bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC_IRQHandler>
	...

08000be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <HAL_Init+0x40>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c20 <HAL_Init+0x40>)
 8000bea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c20 <HAL_Init+0x40>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <HAL_Init+0x40>)
 8000bf6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfc:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a07      	ldr	r2, [pc, #28]	@ (8000c20 <HAL_Init+0x40>)
 8000c02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c08:	2003      	movs	r0, #3
 8000c0a:	f000 f931 	bl	8000e70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0e:	200f      	movs	r0, #15
 8000c10:	f000 f808 	bl	8000c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c14:	f7ff fede 	bl	80009d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023c00 	.word	0x40023c00

08000c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c2c:	4b12      	ldr	r3, [pc, #72]	@ (8000c78 <HAL_InitTick+0x54>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <HAL_InitTick+0x58>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 f93b 	bl	8000ebe <HAL_SYSTICK_Config>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00e      	b.n	8000c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b0f      	cmp	r3, #15
 8000c56:	d80a      	bhi.n	8000c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f000 f911 	bl	8000e86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c64:	4a06      	ldr	r2, [pc, #24]	@ (8000c80 <HAL_InitTick+0x5c>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e000      	b.n	8000c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000400 	.word	0x20000400
 8000c7c:	20000408 	.word	0x20000408
 8000c80:	20000404 	.word	0x20000404

08000c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c88:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <HAL_IncTick+0x20>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <HAL_IncTick+0x24>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	4a04      	ldr	r2, [pc, #16]	@ (8000ca8 <HAL_IncTick+0x24>)
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000408 	.word	0x20000408
 8000ca8:	2000042c 	.word	0x2000042c

08000cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb0:	4b03      	ldr	r3, [pc, #12]	@ (8000cc0 <HAL_GetTick+0x14>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	2000042c 	.word	0x2000042c

08000cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ccc:	f7ff ffee 	bl	8000cac <HAL_GetTick>
 8000cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cdc:	d005      	beq.n	8000cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cde:	4b0a      	ldr	r3, [pc, #40]	@ (8000d08 <HAL_Delay+0x44>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cea:	bf00      	nop
 8000cec:	f7ff ffde 	bl	8000cac <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d8f7      	bhi.n	8000cec <HAL_Delay+0x28>
  {
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000408 	.word	0x20000408

08000d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3e:	4a04      	ldr	r2, [pc, #16]	@ (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	60d3      	str	r3, [r2, #12]
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d58:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <__NVIC_GetPriorityGrouping+0x18>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	0a1b      	lsrs	r3, r3, #8
 8000d5e:	f003 0307 	and.w	r3, r3, #7
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	6039      	str	r1, [r7, #0]
 8000d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	db0a      	blt.n	8000d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	490c      	ldr	r1, [pc, #48]	@ (8000dbc <__NVIC_SetPriority+0x4c>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	0112      	lsls	r2, r2, #4
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	440b      	add	r3, r1
 8000d94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d98:	e00a      	b.n	8000db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4908      	ldr	r1, [pc, #32]	@ (8000dc0 <__NVIC_SetPriority+0x50>)
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	f003 030f 	and.w	r3, r3, #15
 8000da6:	3b04      	subs	r3, #4
 8000da8:	0112      	lsls	r2, r2, #4
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	440b      	add	r3, r1
 8000dae:	761a      	strb	r2, [r3, #24]
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000e100 	.word	0xe000e100
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b089      	sub	sp, #36	@ 0x24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	f1c3 0307 	rsb	r3, r3, #7
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	bf28      	it	cs
 8000de2:	2304      	movcs	r3, #4
 8000de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3304      	adds	r3, #4
 8000dea:	2b06      	cmp	r3, #6
 8000dec:	d902      	bls.n	8000df4 <NVIC_EncodePriority+0x30>
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3b03      	subs	r3, #3
 8000df2:	e000      	b.n	8000df6 <NVIC_EncodePriority+0x32>
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43da      	mvns	r2, r3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	401a      	ands	r2, r3
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	fa01 f303 	lsl.w	r3, r1, r3
 8000e16:	43d9      	mvns	r1, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e1c:	4313      	orrs	r3, r2
         );
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3724      	adds	r7, #36	@ 0x24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
	...

08000e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e3c:	d301      	bcc.n	8000e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e00f      	b.n	8000e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e42:	4a0a      	ldr	r2, [pc, #40]	@ (8000e6c <SysTick_Config+0x40>)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e4a:	210f      	movs	r1, #15
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e50:	f7ff ff8e 	bl	8000d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e54:	4b05      	ldr	r3, [pc, #20]	@ (8000e6c <SysTick_Config+0x40>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e5a:	4b04      	ldr	r3, [pc, #16]	@ (8000e6c <SysTick_Config+0x40>)
 8000e5c:	2207      	movs	r2, #7
 8000e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	e000e010 	.word	0xe000e010

08000e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f7ff ff47 	bl	8000d0c <__NVIC_SetPriorityGrouping>
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b086      	sub	sp, #24
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
 8000e92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e98:	f7ff ff5c 	bl	8000d54 <__NVIC_GetPriorityGrouping>
 8000e9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	68b9      	ldr	r1, [r7, #8]
 8000ea2:	6978      	ldr	r0, [r7, #20]
 8000ea4:	f7ff ff8e 	bl	8000dc4 <NVIC_EncodePriority>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eae:	4611      	mov	r1, r2
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff5d 	bl	8000d70 <__NVIC_SetPriority>
}
 8000eb6:	bf00      	nop
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ffb0 	bl	8000e2c <SysTick_Config>
 8000ecc:	4603      	mov	r3, r0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <__libc_init_array>:
 8000ed8:	b570      	push	{r4, r5, r6, lr}
 8000eda:	4d0d      	ldr	r5, [pc, #52]	@ (8000f10 <__libc_init_array+0x38>)
 8000edc:	4c0d      	ldr	r4, [pc, #52]	@ (8000f14 <__libc_init_array+0x3c>)
 8000ede:	1b64      	subs	r4, r4, r5
 8000ee0:	10a4      	asrs	r4, r4, #2
 8000ee2:	2600      	movs	r6, #0
 8000ee4:	42a6      	cmp	r6, r4
 8000ee6:	d109      	bne.n	8000efc <__libc_init_array+0x24>
 8000ee8:	4d0b      	ldr	r5, [pc, #44]	@ (8000f18 <__libc_init_array+0x40>)
 8000eea:	4c0c      	ldr	r4, [pc, #48]	@ (8000f1c <__libc_init_array+0x44>)
 8000eec:	f000 f818 	bl	8000f20 <_init>
 8000ef0:	1b64      	subs	r4, r4, r5
 8000ef2:	10a4      	asrs	r4, r4, #2
 8000ef4:	2600      	movs	r6, #0
 8000ef6:	42a6      	cmp	r6, r4
 8000ef8:	d105      	bne.n	8000f06 <__libc_init_array+0x2e>
 8000efa:	bd70      	pop	{r4, r5, r6, pc}
 8000efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f00:	4798      	blx	r3
 8000f02:	3601      	adds	r6, #1
 8000f04:	e7ee      	b.n	8000ee4 <__libc_init_array+0xc>
 8000f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f0a:	4798      	blx	r3
 8000f0c:	3601      	adds	r6, #1
 8000f0e:	e7f2      	b.n	8000ef6 <__libc_init_array+0x1e>
 8000f10:	08000f38 	.word	0x08000f38
 8000f14:	08000f38 	.word	0x08000f38
 8000f18:	08000f38 	.word	0x08000f38
 8000f1c:	08000f3c 	.word	0x08000f3c

08000f20 <_init>:
 8000f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f22:	bf00      	nop
 8000f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f26:	bc08      	pop	{r3}
 8000f28:	469e      	mov	lr, r3
 8000f2a:	4770      	bx	lr

08000f2c <_fini>:
 8000f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f2e:	bf00      	nop
 8000f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f32:	bc08      	pop	{r3}
 8000f34:	469e      	mov	lr, r3
 8000f36:	4770      	bx	lr
