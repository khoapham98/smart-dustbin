
Smart_Dustbin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007d4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800096c  0800096c  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800096c  0800096c  0000200c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800096c  0800096c  0000200c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800096c  0800096c  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800096c  0800096c  0000196c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000970  08000970  00001970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000974  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000980  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000980  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002dad  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000dbf  00000000  00000000  00004de9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003c8  00000000  00000000  00005ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002a4  00000000  00000000  00005f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000149a0  00000000  00000000  00006214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000054ee  00000000  00000000  0001abb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082b48  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a2bea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c70  00000000  00000000  000a2c30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000a38a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000954 	.word	0x08000954

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08000954 	.word	0x08000954

080001d8 <HCSR04_Init>:
/*
 * PC6: ECHO pin
 * PC7: TRIG pin
*/
void HCSR04_Init()
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80001de:	2300      	movs	r3, #0
 80001e0:	603b      	str	r3, [r7, #0]
 80001e2:	4b10      	ldr	r3, [pc, #64]	@ (8000224 <HCSR04_Init+0x4c>)
 80001e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000224 <HCSR04_Init+0x4c>)
 80001e8:	f043 0304 	orr.w	r3, r3, #4
 80001ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80001ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000224 <HCSR04_Init+0x4c>)
 80001f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001f2:	f003 0304 	and.w	r3, r3, #4
 80001f6:	603b      	str	r3, [r7, #0]
 80001f8:	683b      	ldr	r3, [r7, #0]
	uint32_t* GPIOC_MODER = (uint32_t*) (GPIOC_BASE_ADDR + 0x00);
 80001fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000228 <HCSR04_Init+0x50>)
 80001fc:	607b      	str	r3, [r7, #4]
	*GPIOC_MODER &= ~(0b1111 << 12);	// set PC6 as INPUT ~ ECHO
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	601a      	str	r2, [r3, #0]
	*GPIOC_MODER |= (0b01 << 14);	// set PC7 as OUTPUT ~ TRIG
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	601a      	str	r2, [r3, #0]
}
 8000216:	bf00      	nop
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	40023800 	.word	0x40023800
 8000228:	40020800 	.word	0x40020800

0800022c <main>:

uint32_t distance = 0;


int main()
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
	HAL_Init();
 8000230:	f000 fa20 	bl	8000674 <HAL_Init>
	HCSR04_Init();
 8000234:	f7ff ffd0 	bl	80001d8 <HCSR04_Init>
	TIM2_Init();
 8000238:	f000 f822 	bl	8000280 <TIM2_Init>
	USART2_Init();
 800023c:	f000 f97e 	bl	800053c <USART2_Init>
	TIM3_Init();
 8000240:	f000 f890 	bl	8000364 <TIM3_Init>
	while (1)
	{
		servo_ctrl(18);
 8000244:	2012      	movs	r0, #18
 8000246:	f000 f877 	bl	8000338 <servo_ctrl>
		delay_ms(600);
 800024a:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800024e:	f000 f857 	bl	8000300 <delay_ms>
		servo_ctrl(15);
 8000252:	200f      	movs	r0, #15
 8000254:	f000 f870 	bl	8000338 <servo_ctrl>
		delay_ms(3000);
 8000258:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800025c:	f000 f850 	bl	8000300 <delay_ms>
		servo_ctrl(12);
 8000260:	200c      	movs	r0, #12
 8000262:	f000 f869 	bl	8000338 <servo_ctrl>
		delay_ms(600);
 8000266:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800026a:	f000 f849 	bl	8000300 <delay_ms>
		servo_ctrl(15);
 800026e:	200f      	movs	r0, #15
 8000270:	f000 f862 	bl	8000338 <servo_ctrl>
		delay_ms(3000);
 8000274:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000278:	f000 f842 	bl	8000300 <delay_ms>
	{
 800027c:	bf00      	nop
 800027e:	e7e1      	b.n	8000244 <main+0x18>

08000280 <TIM2_Init>:
#include "main.h"
#include "mydelay.h"

/* This function is used to initialize the TIMER2 */
void TIM2_Init()
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();
 8000286:	2300      	movs	r3, #0
 8000288:	603b      	str	r3, [r7, #0]
 800028a:	4b1a      	ldr	r3, [pc, #104]	@ (80002f4 <TIM2_Init+0x74>)
 800028c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800028e:	4a19      	ldr	r2, [pc, #100]	@ (80002f4 <TIM2_Init+0x74>)
 8000290:	f043 0301 	orr.w	r3, r3, #1
 8000294:	6413      	str	r3, [r2, #64]	@ 0x40
 8000296:	4b17      	ldr	r3, [pc, #92]	@ (80002f4 <TIM2_Init+0x74>)
 8000298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800029a:	f003 0301 	and.w	r3, r3, #1
 800029e:	603b      	str	r3, [r7, #0]
 80002a0:	683b      	ldr	r3, [r7, #0]
	uint32_t* TIM2_CR1 = (uint32_t*) (TIM2_BASE_ADDR + 0x00);
 80002a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002a6:	60fb      	str	r3, [r7, #12]
	*TIM2_CR1 &= ~(1 << 4);	// up-counter
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	f023 0210 	bic.w	r2, r3, #16
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	601a      	str	r2, [r3, #0]
	*TIM2_CR1 &= ~(1 << 0); // make sure CEN = 0 (stop timer)
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	f023 0201 	bic.w	r2, r3, #1
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	601a      	str	r2, [r3, #0]

	uint32_t* TIM2_PSC = (uint32_t*) (TIM2_BASE_ADDR + 0x28);
 80002c0:	4b0d      	ldr	r3, [pc, #52]	@ (80002f8 <TIM2_Init+0x78>)
 80002c2:	60bb      	str	r3, [r7, #8]
	*TIM2_PSC = 16 - 1;		// PSC = N - 1, set CLK_TIM2 = 1 MHz
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	220f      	movs	r2, #15
 80002c8:	601a      	str	r2, [r3, #0]

	uint32_t* TIM2_EGR = (uint32_t*) (TIM2_BASE_ADDR + 0x14);
 80002ca:	4b0c      	ldr	r3, [pc, #48]	@ (80002fc <TIM2_Init+0x7c>)
 80002cc:	607b      	str	r3, [r7, #4]
	*TIM2_EGR |= (1 << 0); 	// enable update generation
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f043 0201 	orr.w	r2, r3, #1
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	601a      	str	r2, [r3, #0]

	*TIM2_CR1 |= (1 << 0);	// enable counter
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f043 0201 	orr.w	r2, r3, #1
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	601a      	str	r2, [r3, #0]
}
 80002e6:	bf00      	nop
 80002e8:	3714      	adds	r7, #20
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	40023800 	.word	0x40023800
 80002f8:	40000028 	.word	0x40000028
 80002fc:	40000014 	.word	0x40000014

08000300 <delay_ms>:
	while (*TIM2_CNT < us);
}

/* This function is used to delay in millisecond */
void delay_ms(uint32_t ms)
{
 8000300:	b480      	push	{r7}
 8000302:	b085      	sub	sp, #20
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
	uint32_t* TIM2_CNT = (uint32_t*) (TIM2_BASE_ADDR + 0x24);
 8000308:	4b0a      	ldr	r3, [pc, #40]	@ (8000334 <delay_ms+0x34>)
 800030a:	60fb      	str	r3, [r7, #12]
	*TIM2_CNT = 0;
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
	while (*TIM2_CNT < (ms * 1000));
 8000312:	bf00      	nop
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800031e:	fb01 f303 	mul.w	r3, r1, r3
 8000322:	429a      	cmp	r2, r3
 8000324:	d3f6      	bcc.n	8000314 <delay_ms+0x14>
}
 8000326:	bf00      	nop
 8000328:	bf00      	nop
 800032a:	3714      	adds	r7, #20
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr
 8000334:	40000024 	.word	0x40000024

08000338 <servo_ctrl>:
 */
#include "main.h"
#include "servo.h"

void servo_ctrl(int ms)
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
	uint32_t* TIM3_CCR1 = (uint32_t*) (TIM3_BASE_ADDR + 0x34);
 8000340:	4b07      	ldr	r3, [pc, #28]	@ (8000360 <servo_ctrl+0x28>)
 8000342:	60fb      	str	r3, [r7, #12]
	*TIM3_CCR1 = (ms * 100);
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	2264      	movs	r2, #100	@ 0x64
 8000348:	fb02 f303 	mul.w	r3, r2, r3
 800034c:	461a      	mov	r2, r3
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	601a      	str	r2, [r3, #0]
//	uint32_t* TIM3_EGR = (uint32_t*) (TIM3_BASE_ADDR + 0x14);
//	*TIM3_EGR |= (1 << 0);	// update generation
}
 8000352:	bf00      	nop
 8000354:	3714      	adds	r7, #20
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	40000434 	.word	0x40000434

08000364 <TIM3_Init>:

/*
 * PB4: Timer3 Channel 1 (AF2)
*/
void TIM3_Init()
{
 8000364:	b480      	push	{r7}
 8000366:	b08b      	sub	sp, #44	@ 0x2c
 8000368:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800036a:	2300      	movs	r3, #0
 800036c:	607b      	str	r3, [r7, #4]
 800036e:	4b35      	ldr	r3, [pc, #212]	@ (8000444 <TIM3_Init+0xe0>)
 8000370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000372:	4a34      	ldr	r2, [pc, #208]	@ (8000444 <TIM3_Init+0xe0>)
 8000374:	f043 0302 	orr.w	r3, r3, #2
 8000378:	6313      	str	r3, [r2, #48]	@ 0x30
 800037a:	4b32      	ldr	r3, [pc, #200]	@ (8000444 <TIM3_Init+0xe0>)
 800037c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800037e:	f003 0302 	and.w	r3, r3, #2
 8000382:	607b      	str	r3, [r7, #4]
 8000384:	687b      	ldr	r3, [r7, #4]
	uint32_t* GPIOB_MODER = (uint32_t*) (GPIOB_BASE_ADDR + 0x00);
 8000386:	4b30      	ldr	r3, [pc, #192]	@ (8000448 <TIM3_Init+0xe4>)
 8000388:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t* GPIOB_AFRL = (uint32_t*) (GPIOB_BASE_ADDR + 0x20);
 800038a:	4b30      	ldr	r3, [pc, #192]	@ (800044c <TIM3_Init+0xe8>)
 800038c:	623b      	str	r3, [r7, #32]
	*GPIOB_MODER &= ~(0b11 << 8);
 800038e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8000396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000398:	601a      	str	r2, [r3, #0]
	*GPIOB_MODER |= (0b10 << 8);	// set PB4 at AF mode for TIMER3
 800039a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80003a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003a4:	601a      	str	r2, [r3, #0]
	*GPIOB_AFRL &= ~(0xf << 16);
 80003a6:	6a3b      	ldr	r3, [r7, #32]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80003ae:	6a3b      	ldr	r3, [r7, #32]
 80003b0:	601a      	str	r2, [r3, #0]
	*GPIOB_AFRL |= (2 << 16);	// select AF02
 80003b2:	6a3b      	ldr	r3, [r7, #32]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80003ba:	6a3b      	ldr	r3, [r7, #32]
 80003bc:	601a      	str	r2, [r3, #0]

	__HAL_RCC_TIM3_CLK_ENABLE();
 80003be:	2300      	movs	r3, #0
 80003c0:	603b      	str	r3, [r7, #0]
 80003c2:	4b20      	ldr	r3, [pc, #128]	@ (8000444 <TIM3_Init+0xe0>)
 80003c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003c6:	4a1f      	ldr	r2, [pc, #124]	@ (8000444 <TIM3_Init+0xe0>)
 80003c8:	f043 0302 	orr.w	r3, r3, #2
 80003cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80003ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000444 <TIM3_Init+0xe0>)
 80003d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003d2:	f003 0302 	and.w	r3, r3, #2
 80003d6:	603b      	str	r3, [r7, #0]
 80003d8:	683b      	ldr	r3, [r7, #0]
	uint32_t* TIM3_CR1 = (uint32_t*) (TIM3_BASE_ADDR + 0x00);
 80003da:	4b1d      	ldr	r3, [pc, #116]	@ (8000450 <TIM3_Init+0xec>)
 80003dc:	61fb      	str	r3, [r7, #28]
	uint32_t* TIM3_PSC = (uint32_t*) (TIM3_BASE_ADDR + 0x28);
 80003de:	4b1d      	ldr	r3, [pc, #116]	@ (8000454 <TIM3_Init+0xf0>)
 80003e0:	61bb      	str	r3, [r7, #24]
	uint32_t* TIM3_ARR = (uint32_t*) (TIM3_BASE_ADDR + 0x2C);
 80003e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000458 <TIM3_Init+0xf4>)
 80003e4:	617b      	str	r3, [r7, #20]
	uint32_t* TIM3_CCMR1 = (uint32_t*) (TIM3_BASE_ADDR + 0x18);
 80003e6:	4b1d      	ldr	r3, [pc, #116]	@ (800045c <TIM3_Init+0xf8>)
 80003e8:	613b      	str	r3, [r7, #16]
	uint32_t* TIM3_CCR1 = (uint32_t*) (TIM3_BASE_ADDR + 0x34);
 80003ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000460 <TIM3_Init+0xfc>)
 80003ec:	60fb      	str	r3, [r7, #12]
	uint32_t* TIM_CCER = (uint32_t*) (TIM3_BASE_ADDR + 0x20);
 80003ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000464 <TIM3_Init+0x100>)
 80003f0:	60bb      	str	r3, [r7, #8]
	*TIM3_CR1 &= ~(1 << 4);		// up-counter
 80003f2:	69fb      	ldr	r3, [r7, #28]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f023 0210 	bic.w	r2, r3, #16
 80003fa:	69fb      	ldr	r3, [r7, #28]
 80003fc:	601a      	str	r2, [r3, #0]
	*TIM3_PSC = 16 - 1;		// PSC = N - 1, set CLK_TIM3 = 1 MHz
 80003fe:	69bb      	ldr	r3, [r7, #24]
 8000400:	220f      	movs	r2, #15
 8000402:	601a      	str	r2, [r3, #0]
	*TIM3_ARR = 19999;		// PWM period = 20 ms (50 Hz)
 8000404:	697b      	ldr	r3, [r7, #20]
 8000406:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800040a:	601a      	str	r2, [r3, #0]
	*TIM3_CCMR1 |= (0b110 << 4);	// select PWM mode 1
 800040c:	693b      	ldr	r3, [r7, #16]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	f043 0260 	orr.w	r2, r3, #96	@ 0x60
 8000414:	693b      	ldr	r3, [r7, #16]
 8000416:	601a      	str	r2, [r3, #0]
//	*TIM3_CCMR1 |= (1 << 3);	// enable pre-load
	*TIM3_CCR1 = 1500;	// set motor default status is IDLE
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800041e:	601a      	str	r2, [r3, #0]
	*TIM_CCER |= (1 << 0); 	// enable channel 1
 8000420:	68bb      	ldr	r3, [r7, #8]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f043 0201 	orr.w	r2, r3, #1
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	601a      	str	r2, [r3, #0]
	*TIM3_CR1 |= (1 << 0);	// enable counter
 800042c:	69fb      	ldr	r3, [r7, #28]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	f043 0201 	orr.w	r2, r3, #1
 8000434:	69fb      	ldr	r3, [r7, #28]
 8000436:	601a      	str	r2, [r3, #0]
}
 8000438:	bf00      	nop
 800043a:	372c      	adds	r7, #44	@ 0x2c
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr
 8000444:	40023800 	.word	0x40023800
 8000448:	40020400 	.word	0x40020400
 800044c:	40020420 	.word	0x40020420
 8000450:	40000400 	.word	0x40000400
 8000454:	40000428 	.word	0x40000428
 8000458:	4000042c 	.word	0x4000042c
 800045c:	40000418 	.word	0x40000418
 8000460:	40000434 	.word	0x40000434
 8000464:	40000420 	.word	0x40000420

08000468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800046e:	2300      	movs	r3, #0
 8000470:	607b      	str	r3, [r7, #4]
 8000472:	4b10      	ldr	r3, [pc, #64]	@ (80004b4 <HAL_MspInit+0x4c>)
 8000474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000476:	4a0f      	ldr	r2, [pc, #60]	@ (80004b4 <HAL_MspInit+0x4c>)
 8000478:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800047c:	6453      	str	r3, [r2, #68]	@ 0x44
 800047e:	4b0d      	ldr	r3, [pc, #52]	@ (80004b4 <HAL_MspInit+0x4c>)
 8000480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000482:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048a:	2300      	movs	r3, #0
 800048c:	603b      	str	r3, [r7, #0]
 800048e:	4b09      	ldr	r3, [pc, #36]	@ (80004b4 <HAL_MspInit+0x4c>)
 8000490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000492:	4a08      	ldr	r2, [pc, #32]	@ (80004b4 <HAL_MspInit+0x4c>)
 8000494:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000498:	6413      	str	r3, [r2, #64]	@ 0x40
 800049a:	4b06      	ldr	r3, [pc, #24]	@ (80004b4 <HAL_MspInit+0x4c>)
 800049c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800049e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004a2:	603b      	str	r3, [r7, #0]
 80004a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a6:	bf00      	nop
 80004a8:	370c      	adds	r7, #12
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	40023800 	.word	0x40023800

080004b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004bc:	bf00      	nop
 80004be:	e7fd      	b.n	80004bc <NMI_Handler+0x4>

080004c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004c4:	bf00      	nop
 80004c6:	e7fd      	b.n	80004c4 <HardFault_Handler+0x4>

080004c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004cc:	bf00      	nop
 80004ce:	e7fd      	b.n	80004cc <MemManage_Handler+0x4>

080004d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004d4:	bf00      	nop
 80004d6:	e7fd      	b.n	80004d4 <BusFault_Handler+0x4>

080004d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <UsageFault_Handler+0x4>

080004e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr

080004ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004f2:	bf00      	nop
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr

080004fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr

0800050a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800050a:	b580      	push	{r7, lr}
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800050e:	f000 f903 	bl	8000718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
	...

08000518 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800051c:	4b06      	ldr	r3, [pc, #24]	@ (8000538 <SystemInit+0x20>)
 800051e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000522:	4a05      	ldr	r2, [pc, #20]	@ (8000538 <SystemInit+0x20>)
 8000524:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000528:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	e000ed00 	.word	0xe000ed00

0800053c <USART2_Init>:
 * Data size: 8 bits
 * Parity: Odd
 * Baud rate: 14400 bps
*/
void USART2_Init()
{
 800053c:	b480      	push	{r7}
 800053e:	b087      	sub	sp, #28
 8000540:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	4b31      	ldr	r3, [pc, #196]	@ (800060c <USART2_Init+0xd0>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	4a30      	ldr	r2, [pc, #192]	@ (800060c <USART2_Init+0xd0>)
 800054c:	f043 0308 	orr.w	r3, r3, #8
 8000550:	6313      	str	r3, [r2, #48]	@ 0x30
 8000552:	4b2e      	ldr	r3, [pc, #184]	@ (800060c <USART2_Init+0xd0>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	f003 0308 	and.w	r3, r3, #8
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]
	uint32_t* GPIOD_MODER = (uint32_t*) (GPIOD_BASE_ADDR + 0x00);
 800055e:	4b2c      	ldr	r3, [pc, #176]	@ (8000610 <USART2_Init+0xd4>)
 8000560:	617b      	str	r3, [r7, #20]
	uint32_t* GPIOD_AFRL = (uint32_t*) (GPIOD_BASE_ADDR + 0x20);
 8000562:	4b2c      	ldr	r3, [pc, #176]	@ (8000614 <USART2_Init+0xd8>)
 8000564:	613b      	str	r3, [r7, #16]
	*GPIOD_MODER &= ~(0xf << 10);
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	601a      	str	r2, [r3, #0]
	*GPIOD_MODER |= (0b1010 << 10); // configure PD5 and PD6 at AF mode
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f443 5220 	orr.w	r2, r3, #10240	@ 0x2800
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	601a      	str	r2, [r3, #0]
	*GPIOD_AFRL &= ~(0xff << 20);
 800057e:	693b      	ldr	r3, [r7, #16]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f023 627f 	bic.w	r2, r3, #267386880	@ 0xff00000
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	601a      	str	r2, [r3, #0]
	*GPIOD_AFRL |= (7 << 20) | (7 << 24);	// AF07 for PD5 and PD6
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f043 62ee 	orr.w	r2, r3, #124780544	@ 0x7700000
 8000592:	693b      	ldr	r3, [r7, #16]
 8000594:	601a      	str	r2, [r3, #0]

	__HAL_RCC_USART2_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	603b      	str	r3, [r7, #0]
 800059a:	4b1c      	ldr	r3, [pc, #112]	@ (800060c <USART2_Init+0xd0>)
 800059c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800059e:	4a1b      	ldr	r2, [pc, #108]	@ (800060c <USART2_Init+0xd0>)
 80005a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a6:	4b19      	ldr	r3, [pc, #100]	@ (800060c <USART2_Init+0xd0>)
 80005a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	683b      	ldr	r3, [r7, #0]
	uint32_t* USART2_CR1 = (uint32_t*) (USART2_BASE_ADDR + 0x0C);
 80005b2:	4b19      	ldr	r3, [pc, #100]	@ (8000618 <USART2_Init+0xdc>)
 80005b4:	60fb      	str	r3, [r7, #12]
	uint32_t* USART2_BRR = (uint32_t*) (USART2_BASE_ADDR + 0x08);
 80005b6:	4b19      	ldr	r3, [pc, #100]	@ (800061c <USART2_Init+0xe0>)
 80005b8:	60bb      	str	r3, [r7, #8]
	*USART2_CR1 |= (1 << 12);	// set word length = 9 data bits
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	601a      	str	r2, [r3, #0]
	*USART2_CR1 |= (1 << 10); 	// enable parity control
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	601a      	str	r2, [r3, #0]
	*USART2_CR1 |= (1 << 9); 	// select odd parity
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	601a      	str	r2, [r3, #0]
	*USART2_CR1 |= (1 << 3); 	// enable transmitter
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f043 0208 	orr.w	r2, r3, #8
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	601a      	str	r2, [r3, #0]
	*USART2_BRR = (69 << 4) | (0b0111 << 0);	// set baud rate at 14400 bps
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	f240 4257 	movw	r2, #1111	@ 0x457
 80005f0:	601a      	str	r2, [r3, #0]
	*USART2_CR1 |= (1 << 13); 	// enable USART
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	601a      	str	r2, [r3, #0]
}
 80005fe:	bf00      	nop
 8000600:	371c      	adds	r7, #28
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800
 8000610:	40020c00 	.word	0x40020c00
 8000614:	40020c20 	.word	0x40020c20
 8000618:	4000440c 	.word	0x4000440c
 800061c:	40004408 	.word	0x40004408

08000620 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000620:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000658 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000624:	f7ff ff78 	bl	8000518 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000628:	480c      	ldr	r0, [pc, #48]	@ (800065c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800062a:	490d      	ldr	r1, [pc, #52]	@ (8000660 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800062c:	4a0d      	ldr	r2, [pc, #52]	@ (8000664 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800062e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000630:	e002      	b.n	8000638 <LoopCopyDataInit>

08000632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000636:	3304      	adds	r3, #4

08000638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800063a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800063c:	d3f9      	bcc.n	8000632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800063e:	4a0a      	ldr	r2, [pc, #40]	@ (8000668 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000640:	4c0a      	ldr	r4, [pc, #40]	@ (800066c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000644:	e001      	b.n	800064a <LoopFillZerobss>

08000646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000648:	3204      	adds	r2, #4

0800064a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800064a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800064c:	d3fb      	bcc.n	8000646 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800064e:	f000 f95d 	bl	800090c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000652:	f7ff fdeb 	bl	800022c <main>
  bx  lr    
 8000656:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000658:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800065c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000660:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000664:	08000974 	.word	0x08000974
  ldr r2, =_sbss
 8000668:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800066c:	2000002c 	.word	0x2000002c

08000670 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000670:	e7fe      	b.n	8000670 <ADC_IRQHandler>
	...

08000674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000678:	4b0e      	ldr	r3, [pc, #56]	@ (80006b4 <HAL_Init+0x40>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a0d      	ldr	r2, [pc, #52]	@ (80006b4 <HAL_Init+0x40>)
 800067e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000682:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000684:	4b0b      	ldr	r3, [pc, #44]	@ (80006b4 <HAL_Init+0x40>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a0a      	ldr	r2, [pc, #40]	@ (80006b4 <HAL_Init+0x40>)
 800068a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800068e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000690:	4b08      	ldr	r3, [pc, #32]	@ (80006b4 <HAL_Init+0x40>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a07      	ldr	r2, [pc, #28]	@ (80006b4 <HAL_Init+0x40>)
 8000696:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800069a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800069c:	2003      	movs	r0, #3
 800069e:	f000 f901 	bl	80008a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006a2:	200f      	movs	r0, #15
 80006a4:	f000 f808 	bl	80006b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006a8:	f7ff fede 	bl	8000468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006ac:	2300      	movs	r3, #0
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023c00 	.word	0x40023c00

080006b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006c0:	4b12      	ldr	r3, [pc, #72]	@ (800070c <HAL_InitTick+0x54>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <HAL_InitTick+0x58>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	4619      	mov	r1, r3
 80006ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80006d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 f90b 	bl	80008f2 <HAL_SYSTICK_Config>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006e2:	2301      	movs	r3, #1
 80006e4:	e00e      	b.n	8000704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2b0f      	cmp	r3, #15
 80006ea:	d80a      	bhi.n	8000702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006ec:	2200      	movs	r2, #0
 80006ee:	6879      	ldr	r1, [r7, #4]
 80006f0:	f04f 30ff 	mov.w	r0, #4294967295
 80006f4:	f000 f8e1 	bl	80008ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006f8:	4a06      	ldr	r2, [pc, #24]	@ (8000714 <HAL_InitTick+0x5c>)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006fe:	2300      	movs	r3, #0
 8000700:	e000      	b.n	8000704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000702:	2301      	movs	r3, #1
}
 8000704:	4618      	mov	r0, r3
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000000 	.word	0x20000000
 8000710:	20000008 	.word	0x20000008
 8000714:	20000004 	.word	0x20000004

08000718 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800071c:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <HAL_IncTick+0x20>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	461a      	mov	r2, r3
 8000722:	4b06      	ldr	r3, [pc, #24]	@ (800073c <HAL_IncTick+0x24>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4413      	add	r3, r2
 8000728:	4a04      	ldr	r2, [pc, #16]	@ (800073c <HAL_IncTick+0x24>)
 800072a:	6013      	str	r3, [r2, #0]
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	20000008 	.word	0x20000008
 800073c:	20000028 	.word	0x20000028

08000740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000750:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <__NVIC_SetPriorityGrouping+0x44>)
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000756:	68ba      	ldr	r2, [r7, #8]
 8000758:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800075c:	4013      	ands	r3, r2
 800075e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000768:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800076c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000772:	4a04      	ldr	r2, [pc, #16]	@ (8000784 <__NVIC_SetPriorityGrouping+0x44>)
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	60d3      	str	r3, [r2, #12]
}
 8000778:	bf00      	nop
 800077a:	3714      	adds	r7, #20
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800078c:	4b04      	ldr	r3, [pc, #16]	@ (80007a0 <__NVIC_GetPriorityGrouping+0x18>)
 800078e:	68db      	ldr	r3, [r3, #12]
 8000790:	0a1b      	lsrs	r3, r3, #8
 8000792:	f003 0307 	and.w	r3, r3, #7
}
 8000796:	4618      	mov	r0, r3
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	6039      	str	r1, [r7, #0]
 80007ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	db0a      	blt.n	80007ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	490c      	ldr	r1, [pc, #48]	@ (80007f0 <__NVIC_SetPriority+0x4c>)
 80007be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c2:	0112      	lsls	r2, r2, #4
 80007c4:	b2d2      	uxtb	r2, r2
 80007c6:	440b      	add	r3, r1
 80007c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007cc:	e00a      	b.n	80007e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4908      	ldr	r1, [pc, #32]	@ (80007f4 <__NVIC_SetPriority+0x50>)
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	f003 030f 	and.w	r3, r3, #15
 80007da:	3b04      	subs	r3, #4
 80007dc:	0112      	lsls	r2, r2, #4
 80007de:	b2d2      	uxtb	r2, r2
 80007e0:	440b      	add	r3, r1
 80007e2:	761a      	strb	r2, [r3, #24]
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	e000e100 	.word	0xe000e100
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b089      	sub	sp, #36	@ 0x24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f003 0307 	and.w	r3, r3, #7
 800080a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	f1c3 0307 	rsb	r3, r3, #7
 8000812:	2b04      	cmp	r3, #4
 8000814:	bf28      	it	cs
 8000816:	2304      	movcs	r3, #4
 8000818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	3304      	adds	r3, #4
 800081e:	2b06      	cmp	r3, #6
 8000820:	d902      	bls.n	8000828 <NVIC_EncodePriority+0x30>
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	3b03      	subs	r3, #3
 8000826:	e000      	b.n	800082a <NVIC_EncodePriority+0x32>
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	f04f 32ff 	mov.w	r2, #4294967295
 8000830:	69bb      	ldr	r3, [r7, #24]
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	43da      	mvns	r2, r3
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	401a      	ands	r2, r3
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000840:	f04f 31ff 	mov.w	r1, #4294967295
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	fa01 f303 	lsl.w	r3, r1, r3
 800084a:	43d9      	mvns	r1, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000850:	4313      	orrs	r3, r2
         );
}
 8000852:	4618      	mov	r0, r3
 8000854:	3724      	adds	r7, #36	@ 0x24
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
	...

08000860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	3b01      	subs	r3, #1
 800086c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000870:	d301      	bcc.n	8000876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000872:	2301      	movs	r3, #1
 8000874:	e00f      	b.n	8000896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000876:	4a0a      	ldr	r2, [pc, #40]	@ (80008a0 <SysTick_Config+0x40>)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3b01      	subs	r3, #1
 800087c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800087e:	210f      	movs	r1, #15
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	f7ff ff8e 	bl	80007a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000888:	4b05      	ldr	r3, [pc, #20]	@ (80008a0 <SysTick_Config+0x40>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800088e:	4b04      	ldr	r3, [pc, #16]	@ (80008a0 <SysTick_Config+0x40>)
 8000890:	2207      	movs	r2, #7
 8000892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000894:	2300      	movs	r3, #0
}
 8000896:	4618      	mov	r0, r3
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	e000e010 	.word	0xe000e010

080008a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f7ff ff47 	bl	8000740 <__NVIC_SetPriorityGrouping>
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b086      	sub	sp, #24
 80008be:	af00      	add	r7, sp, #0
 80008c0:	4603      	mov	r3, r0
 80008c2:	60b9      	str	r1, [r7, #8]
 80008c4:	607a      	str	r2, [r7, #4]
 80008c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008cc:	f7ff ff5c 	bl	8000788 <__NVIC_GetPriorityGrouping>
 80008d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	68b9      	ldr	r1, [r7, #8]
 80008d6:	6978      	ldr	r0, [r7, #20]
 80008d8:	f7ff ff8e 	bl	80007f8 <NVIC_EncodePriority>
 80008dc:	4602      	mov	r2, r0
 80008de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008e2:	4611      	mov	r1, r2
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ff5d 	bl	80007a4 <__NVIC_SetPriority>
}
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b082      	sub	sp, #8
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f7ff ffb0 	bl	8000860 <SysTick_Config>
 8000900:	4603      	mov	r3, r0
}
 8000902:	4618      	mov	r0, r3
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <__libc_init_array>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	4d0d      	ldr	r5, [pc, #52]	@ (8000944 <__libc_init_array+0x38>)
 8000910:	4c0d      	ldr	r4, [pc, #52]	@ (8000948 <__libc_init_array+0x3c>)
 8000912:	1b64      	subs	r4, r4, r5
 8000914:	10a4      	asrs	r4, r4, #2
 8000916:	2600      	movs	r6, #0
 8000918:	42a6      	cmp	r6, r4
 800091a:	d109      	bne.n	8000930 <__libc_init_array+0x24>
 800091c:	4d0b      	ldr	r5, [pc, #44]	@ (800094c <__libc_init_array+0x40>)
 800091e:	4c0c      	ldr	r4, [pc, #48]	@ (8000950 <__libc_init_array+0x44>)
 8000920:	f000 f818 	bl	8000954 <_init>
 8000924:	1b64      	subs	r4, r4, r5
 8000926:	10a4      	asrs	r4, r4, #2
 8000928:	2600      	movs	r6, #0
 800092a:	42a6      	cmp	r6, r4
 800092c:	d105      	bne.n	800093a <__libc_init_array+0x2e>
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f855 3b04 	ldr.w	r3, [r5], #4
 8000934:	4798      	blx	r3
 8000936:	3601      	adds	r6, #1
 8000938:	e7ee      	b.n	8000918 <__libc_init_array+0xc>
 800093a:	f855 3b04 	ldr.w	r3, [r5], #4
 800093e:	4798      	blx	r3
 8000940:	3601      	adds	r6, #1
 8000942:	e7f2      	b.n	800092a <__libc_init_array+0x1e>
 8000944:	0800096c 	.word	0x0800096c
 8000948:	0800096c 	.word	0x0800096c
 800094c:	0800096c 	.word	0x0800096c
 8000950:	08000970 	.word	0x08000970

08000954 <_init>:
 8000954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000956:	bf00      	nop
 8000958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800095a:	bc08      	pop	{r3}
 800095c:	469e      	mov	lr, r3
 800095e:	4770      	bx	lr

08000960 <_fini>:
 8000960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000962:	bf00      	nop
 8000964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000966:	bc08      	pop	{r3}
 8000968:	469e      	mov	lr, r3
 800096a:	4770      	bx	lr
