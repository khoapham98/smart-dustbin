
Smart_Dustbin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052c0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005684  08005460  08005460  00006460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aae4  0800aae4  0000c05c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800aae4  0800aae4  0000bae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aaec  0800aaec  0000c05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aaec  0800aaec  0000baec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aaf0  0800aaf0  0000baf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800aaf4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  2000005c  0800ab50  0000c05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  0800ab50  0000c424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000081b9  00000000  00000000  0000c08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000197a  00000000  00000000  00014245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000870  00000000  00000000  00015bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000660  00000000  00000000  00016430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000023c3  00000000  00000000  00016a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb18  00000000  00000000  00018e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086db9  00000000  00000000  0002496b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ab724  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029b0  00000000  00000000  000ab768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000ae118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005448 	.word	0x08005448

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08005448 	.word	0x08005448

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b988 	b.w	8000d94 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	468e      	mov	lr, r1
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	4688      	mov	r8, r1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d14a      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aac:	428a      	cmp	r2, r1
 8000aae:	4617      	mov	r7, r2
 8000ab0:	d962      	bls.n	8000b78 <__udivmoddi4+0xdc>
 8000ab2:	fab2 f682 	clz	r6, r2
 8000ab6:	b14e      	cbz	r6, 8000acc <__udivmoddi4+0x30>
 8000ab8:	f1c6 0320 	rsb	r3, r6, #32
 8000abc:	fa01 f806 	lsl.w	r8, r1, r6
 8000ac0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ac4:	40b7      	lsls	r7, r6
 8000ac6:	ea43 0808 	orr.w	r8, r3, r8
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ad0:	fa1f fc87 	uxth.w	ip, r7
 8000ad4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ad8:	0c23      	lsrs	r3, r4, #16
 8000ada:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ade:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ae2:	fb01 f20c 	mul.w	r2, r1, ip
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d909      	bls.n	8000afe <__udivmoddi4+0x62>
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	f101 30ff 	add.w	r0, r1, #4294967295
 8000af0:	f080 80ea 	bcs.w	8000cc8 <__udivmoddi4+0x22c>
 8000af4:	429a      	cmp	r2, r3
 8000af6:	f240 80e7 	bls.w	8000cc8 <__udivmoddi4+0x22c>
 8000afa:	3902      	subs	r1, #2
 8000afc:	443b      	add	r3, r7
 8000afe:	1a9a      	subs	r2, r3, r2
 8000b00:	b2a3      	uxth	r3, r4
 8000b02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b0e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b12:	459c      	cmp	ip, r3
 8000b14:	d909      	bls.n	8000b2a <__udivmoddi4+0x8e>
 8000b16:	18fb      	adds	r3, r7, r3
 8000b18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b1c:	f080 80d6 	bcs.w	8000ccc <__udivmoddi4+0x230>
 8000b20:	459c      	cmp	ip, r3
 8000b22:	f240 80d3 	bls.w	8000ccc <__udivmoddi4+0x230>
 8000b26:	443b      	add	r3, r7
 8000b28:	3802      	subs	r0, #2
 8000b2a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b2e:	eba3 030c 	sub.w	r3, r3, ip
 8000b32:	2100      	movs	r1, #0
 8000b34:	b11d      	cbz	r5, 8000b3e <__udivmoddi4+0xa2>
 8000b36:	40f3      	lsrs	r3, r6
 8000b38:	2200      	movs	r2, #0
 8000b3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d905      	bls.n	8000b52 <__udivmoddi4+0xb6>
 8000b46:	b10d      	cbz	r5, 8000b4c <__udivmoddi4+0xb0>
 8000b48:	e9c5 0100 	strd	r0, r1, [r5]
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4608      	mov	r0, r1
 8000b50:	e7f5      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000b52:	fab3 f183 	clz	r1, r3
 8000b56:	2900      	cmp	r1, #0
 8000b58:	d146      	bne.n	8000be8 <__udivmoddi4+0x14c>
 8000b5a:	4573      	cmp	r3, lr
 8000b5c:	d302      	bcc.n	8000b64 <__udivmoddi4+0xc8>
 8000b5e:	4282      	cmp	r2, r0
 8000b60:	f200 8105 	bhi.w	8000d6e <__udivmoddi4+0x2d2>
 8000b64:	1a84      	subs	r4, r0, r2
 8000b66:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	4690      	mov	r8, r2
 8000b6e:	2d00      	cmp	r5, #0
 8000b70:	d0e5      	beq.n	8000b3e <__udivmoddi4+0xa2>
 8000b72:	e9c5 4800 	strd	r4, r8, [r5]
 8000b76:	e7e2      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000b78:	2a00      	cmp	r2, #0
 8000b7a:	f000 8090 	beq.w	8000c9e <__udivmoddi4+0x202>
 8000b7e:	fab2 f682 	clz	r6, r2
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	f040 80a4 	bne.w	8000cd0 <__udivmoddi4+0x234>
 8000b88:	1a8a      	subs	r2, r1, r2
 8000b8a:	0c03      	lsrs	r3, r0, #16
 8000b8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b90:	b280      	uxth	r0, r0
 8000b92:	b2bc      	uxth	r4, r7
 8000b94:	2101      	movs	r1, #1
 8000b96:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b9a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ba2:	fb04 f20c 	mul.w	r2, r4, ip
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d907      	bls.n	8000bba <__udivmoddi4+0x11e>
 8000baa:	18fb      	adds	r3, r7, r3
 8000bac:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bb0:	d202      	bcs.n	8000bb8 <__udivmoddi4+0x11c>
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	f200 80e0 	bhi.w	8000d78 <__udivmoddi4+0x2dc>
 8000bb8:	46c4      	mov	ip, r8
 8000bba:	1a9b      	subs	r3, r3, r2
 8000bbc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bc0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bc4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bc8:	fb02 f404 	mul.w	r4, r2, r4
 8000bcc:	429c      	cmp	r4, r3
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x144>
 8000bd0:	18fb      	adds	r3, r7, r3
 8000bd2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x142>
 8000bd8:	429c      	cmp	r4, r3
 8000bda:	f200 80ca 	bhi.w	8000d72 <__udivmoddi4+0x2d6>
 8000bde:	4602      	mov	r2, r0
 8000be0:	1b1b      	subs	r3, r3, r4
 8000be2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000be6:	e7a5      	b.n	8000b34 <__udivmoddi4+0x98>
 8000be8:	f1c1 0620 	rsb	r6, r1, #32
 8000bec:	408b      	lsls	r3, r1
 8000bee:	fa22 f706 	lsr.w	r7, r2, r6
 8000bf2:	431f      	orrs	r7, r3
 8000bf4:	fa0e f401 	lsl.w	r4, lr, r1
 8000bf8:	fa20 f306 	lsr.w	r3, r0, r6
 8000bfc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c00:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c04:	4323      	orrs	r3, r4
 8000c06:	fa00 f801 	lsl.w	r8, r0, r1
 8000c0a:	fa1f fc87 	uxth.w	ip, r7
 8000c0e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c12:	0c1c      	lsrs	r4, r3, #16
 8000c14:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c18:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c1c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c20:	45a6      	cmp	lr, r4
 8000c22:	fa02 f201 	lsl.w	r2, r2, r1
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x1a0>
 8000c28:	193c      	adds	r4, r7, r4
 8000c2a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c2e:	f080 809c 	bcs.w	8000d6a <__udivmoddi4+0x2ce>
 8000c32:	45a6      	cmp	lr, r4
 8000c34:	f240 8099 	bls.w	8000d6a <__udivmoddi4+0x2ce>
 8000c38:	3802      	subs	r0, #2
 8000c3a:	443c      	add	r4, r7
 8000c3c:	eba4 040e 	sub.w	r4, r4, lr
 8000c40:	fa1f fe83 	uxth.w	lr, r3
 8000c44:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c48:	fb09 4413 	mls	r4, r9, r3, r4
 8000c4c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c50:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c54:	45a4      	cmp	ip, r4
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x1ce>
 8000c58:	193c      	adds	r4, r7, r4
 8000c5a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c5e:	f080 8082 	bcs.w	8000d66 <__udivmoddi4+0x2ca>
 8000c62:	45a4      	cmp	ip, r4
 8000c64:	d97f      	bls.n	8000d66 <__udivmoddi4+0x2ca>
 8000c66:	3b02      	subs	r3, #2
 8000c68:	443c      	add	r4, r7
 8000c6a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c6e:	eba4 040c 	sub.w	r4, r4, ip
 8000c72:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c76:	4564      	cmp	r4, ip
 8000c78:	4673      	mov	r3, lr
 8000c7a:	46e1      	mov	r9, ip
 8000c7c:	d362      	bcc.n	8000d44 <__udivmoddi4+0x2a8>
 8000c7e:	d05f      	beq.n	8000d40 <__udivmoddi4+0x2a4>
 8000c80:	b15d      	cbz	r5, 8000c9a <__udivmoddi4+0x1fe>
 8000c82:	ebb8 0203 	subs.w	r2, r8, r3
 8000c86:	eb64 0409 	sbc.w	r4, r4, r9
 8000c8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c8e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c92:	431e      	orrs	r6, r3
 8000c94:	40cc      	lsrs	r4, r1
 8000c96:	e9c5 6400 	strd	r6, r4, [r5]
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	e74f      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000c9e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ca2:	0c01      	lsrs	r1, r0, #16
 8000ca4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ca8:	b280      	uxth	r0, r0
 8000caa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cae:	463b      	mov	r3, r7
 8000cb0:	4638      	mov	r0, r7
 8000cb2:	463c      	mov	r4, r7
 8000cb4:	46b8      	mov	r8, r7
 8000cb6:	46be      	mov	lr, r7
 8000cb8:	2620      	movs	r6, #32
 8000cba:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cbe:	eba2 0208 	sub.w	r2, r2, r8
 8000cc2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cc6:	e766      	b.n	8000b96 <__udivmoddi4+0xfa>
 8000cc8:	4601      	mov	r1, r0
 8000cca:	e718      	b.n	8000afe <__udivmoddi4+0x62>
 8000ccc:	4610      	mov	r0, r2
 8000cce:	e72c      	b.n	8000b2a <__udivmoddi4+0x8e>
 8000cd0:	f1c6 0220 	rsb	r2, r6, #32
 8000cd4:	fa2e f302 	lsr.w	r3, lr, r2
 8000cd8:	40b7      	lsls	r7, r6
 8000cda:	40b1      	lsls	r1, r6
 8000cdc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cea:	b2bc      	uxth	r4, r7
 8000cec:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cf0:	0c11      	lsrs	r1, r2, #16
 8000cf2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf6:	fb08 f904 	mul.w	r9, r8, r4
 8000cfa:	40b0      	lsls	r0, r6
 8000cfc:	4589      	cmp	r9, r1
 8000cfe:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d02:	b280      	uxth	r0, r0
 8000d04:	d93e      	bls.n	8000d84 <__udivmoddi4+0x2e8>
 8000d06:	1879      	adds	r1, r7, r1
 8000d08:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d0c:	d201      	bcs.n	8000d12 <__udivmoddi4+0x276>
 8000d0e:	4589      	cmp	r9, r1
 8000d10:	d81f      	bhi.n	8000d52 <__udivmoddi4+0x2b6>
 8000d12:	eba1 0109 	sub.w	r1, r1, r9
 8000d16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d1a:	fb09 f804 	mul.w	r8, r9, r4
 8000d1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d22:	b292      	uxth	r2, r2
 8000d24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d28:	4542      	cmp	r2, r8
 8000d2a:	d229      	bcs.n	8000d80 <__udivmoddi4+0x2e4>
 8000d2c:	18ba      	adds	r2, r7, r2
 8000d2e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d32:	d2c4      	bcs.n	8000cbe <__udivmoddi4+0x222>
 8000d34:	4542      	cmp	r2, r8
 8000d36:	d2c2      	bcs.n	8000cbe <__udivmoddi4+0x222>
 8000d38:	f1a9 0102 	sub.w	r1, r9, #2
 8000d3c:	443a      	add	r2, r7
 8000d3e:	e7be      	b.n	8000cbe <__udivmoddi4+0x222>
 8000d40:	45f0      	cmp	r8, lr
 8000d42:	d29d      	bcs.n	8000c80 <__udivmoddi4+0x1e4>
 8000d44:	ebbe 0302 	subs.w	r3, lr, r2
 8000d48:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d4c:	3801      	subs	r0, #1
 8000d4e:	46e1      	mov	r9, ip
 8000d50:	e796      	b.n	8000c80 <__udivmoddi4+0x1e4>
 8000d52:	eba7 0909 	sub.w	r9, r7, r9
 8000d56:	4449      	add	r1, r9
 8000d58:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d5c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d60:	fb09 f804 	mul.w	r8, r9, r4
 8000d64:	e7db      	b.n	8000d1e <__udivmoddi4+0x282>
 8000d66:	4673      	mov	r3, lr
 8000d68:	e77f      	b.n	8000c6a <__udivmoddi4+0x1ce>
 8000d6a:	4650      	mov	r0, sl
 8000d6c:	e766      	b.n	8000c3c <__udivmoddi4+0x1a0>
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e6fd      	b.n	8000b6e <__udivmoddi4+0xd2>
 8000d72:	443b      	add	r3, r7
 8000d74:	3a02      	subs	r2, #2
 8000d76:	e733      	b.n	8000be0 <__udivmoddi4+0x144>
 8000d78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d7c:	443b      	add	r3, r7
 8000d7e:	e71c      	b.n	8000bba <__udivmoddi4+0x11e>
 8000d80:	4649      	mov	r1, r9
 8000d82:	e79c      	b.n	8000cbe <__udivmoddi4+0x222>
 8000d84:	eba1 0109 	sub.w	r1, r1, r9
 8000d88:	46c4      	mov	ip, r8
 8000d8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d8e:	fb09 f804 	mul.w	r8, r9, r4
 8000d92:	e7c4      	b.n	8000d1e <__udivmoddi4+0x282>

08000d94 <__aeabi_idiv0>:
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d9c:	f001 fd3a 	bl	8002814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da0:	f000 f80a 	bl	8000db8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da4:	f000 f894 	bl	8000ed0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000da8:	f000 f864 	bl	8000e74 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000dac:	f000 f8ea 	bl	8000f84 <ssd1306_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  ssd1306_TestAll();
 8000db0:	f001 fbc0 	bl	8002534 <ssd1306_TestAll>
 8000db4:	e7fc      	b.n	8000db0 <main+0x18>
	...

08000db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b094      	sub	sp, #80	@ 0x50
 8000dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dbe:	f107 0320 	add.w	r3, r7, #32
 8000dc2:	2230      	movs	r2, #48	@ 0x30
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f003 f966 	bl	8004098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	4b22      	ldr	r3, [pc, #136]	@ (8000e6c <SystemClock_Config+0xb4>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de4:	4a21      	ldr	r2, [pc, #132]	@ (8000e6c <SystemClock_Config+0xb4>)
 8000de6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dea:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dec:	4b1f      	ldr	r3, [pc, #124]	@ (8000e6c <SystemClock_Config+0xb4>)
 8000dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000df8:	2300      	movs	r3, #0
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8000e70 <SystemClock_Config+0xb8>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a1b      	ldr	r2, [pc, #108]	@ (8000e70 <SystemClock_Config+0xb8>)
 8000e02:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e06:	6013      	str	r3, [r2, #0]
 8000e08:	4b19      	ldr	r3, [pc, #100]	@ (8000e70 <SystemClock_Config+0xb8>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e14:	2302      	movs	r3, #2
 8000e16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e1c:	2310      	movs	r3, #16
 8000e1e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e24:	f107 0320 	add.w	r3, r7, #32
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f002 fca1 	bl	8003770 <HAL_RCC_OscConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000e34:	f000 f866 	bl	8000f04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e38:	230f      	movs	r3, #15
 8000e3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e4c:	f107 030c 	add.w	r3, r7, #12
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f002 ff04 	bl	8003c60 <HAL_RCC_ClockConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000e5e:	f000 f851 	bl	8000f04 <Error_Handler>
  }
}
 8000e62:	bf00      	nop
 8000e64:	3750      	adds	r7, #80	@ 0x50
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40007000 	.word	0x40007000

08000e74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e78:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <MX_I2C1_Init+0x50>)
 8000e7a:	4a13      	ldr	r2, [pc, #76]	@ (8000ec8 <MX_I2C1_Init+0x54>)
 8000e7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <MX_I2C1_Init+0x50>)
 8000e80:	4a12      	ldr	r2, [pc, #72]	@ (8000ecc <MX_I2C1_Init+0x58>)
 8000e82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec4 <MX_I2C1_Init+0x50>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <MX_I2C1_Init+0x50>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec4 <MX_I2C1_Init+0x50>)
 8000e92:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e98:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <MX_I2C1_Init+0x50>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ec4 <MX_I2C1_Init+0x50>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ea4:	4b07      	ldr	r3, [pc, #28]	@ (8000ec4 <MX_I2C1_Init+0x50>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <MX_I2C1_Init+0x50>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eb0:	4804      	ldr	r0, [pc, #16]	@ (8000ec4 <MX_I2C1_Init+0x50>)
 8000eb2:	f001 ffaf 	bl	8002e14 <HAL_I2C_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ebc:	f000 f822 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000078 	.word	0x20000078
 8000ec8:	40005400 	.word	0x40005400
 8000ecc:	000186a0 	.word	0x000186a0

08000ed0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	4b09      	ldr	r3, [pc, #36]	@ (8000f00 <MX_GPIO_Init+0x30>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	4a08      	ldr	r2, [pc, #32]	@ (8000f00 <MX_GPIO_Init+0x30>)
 8000ee0:	f043 0302 	orr.w	r3, r3, #2
 8000ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <MX_GPIO_Init+0x30>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800

08000f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f08:	b672      	cpsid	i
}
 8000f0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <Error_Handler+0x8>

08000f10 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af04      	add	r7, sp, #16
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2e:	9302      	str	r3, [sp, #8]
 8000f30:	2301      	movs	r3, #1
 8000f32:	9301      	str	r3, [sp, #4]
 8000f34:	1dfb      	adds	r3, r7, #7
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2178      	movs	r1, #120	@ 0x78
 8000f3e:	4803      	ldr	r0, [pc, #12]	@ (8000f4c <ssd1306_WriteCommand+0x2c>)
 8000f40:	f002 f8ac 	bl	800309c <HAL_I2C_Mem_Write>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000078 	.word	0x20000078

08000f50 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af04      	add	r7, sp, #16
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f62:	9202      	str	r2, [sp, #8]
 8000f64:	9301      	str	r3, [sp, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	2240      	movs	r2, #64	@ 0x40
 8000f6e:	2178      	movs	r1, #120	@ 0x78
 8000f70:	4803      	ldr	r0, [pc, #12]	@ (8000f80 <ssd1306_WriteData+0x30>)
 8000f72:	f002 f893 	bl	800309c <HAL_I2C_Mem_Write>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000078 	.word	0x20000078

08000f84 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000f88:	f7ff ffc2 	bl	8000f10 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000f8c:	2064      	movs	r0, #100	@ 0x64
 8000f8e:	f001 fcb3 	bl	80028f8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000f92:	2000      	movs	r0, #0
 8000f94:	f000 ff7a 	bl	8001e8c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000f98:	2020      	movs	r0, #32
 8000f9a:	f7ff ffc1 	bl	8000f20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f7ff ffbe 	bl	8000f20 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000fa4:	20b0      	movs	r0, #176	@ 0xb0
 8000fa6:	f7ff ffbb 	bl	8000f20 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000faa:	20c8      	movs	r0, #200	@ 0xc8
 8000fac:	f7ff ffb8 	bl	8000f20 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f7ff ffb5 	bl	8000f20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000fb6:	2010      	movs	r0, #16
 8000fb8:	f7ff ffb2 	bl	8000f20 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000fbc:	2040      	movs	r0, #64	@ 0x40
 8000fbe:	f7ff ffaf 	bl	8000f20 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000fc2:	20ff      	movs	r0, #255	@ 0xff
 8000fc4:	f000 ff4f 	bl	8001e66 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000fc8:	20a1      	movs	r0, #161	@ 0xa1
 8000fca:	f7ff ffa9 	bl	8000f20 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000fce:	20a6      	movs	r0, #166	@ 0xa6
 8000fd0:	f7ff ffa6 	bl	8000f20 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000fd4:	20a8      	movs	r0, #168	@ 0xa8
 8000fd6:	f7ff ffa3 	bl	8000f20 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8000fda:	201f      	movs	r0, #31
 8000fdc:	f7ff ffa0 	bl	8000f20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000fe0:	20a4      	movs	r0, #164	@ 0xa4
 8000fe2:	f7ff ff9d 	bl	8000f20 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000fe6:	20d3      	movs	r0, #211	@ 0xd3
 8000fe8:	f7ff ff9a 	bl	8000f20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000fec:	2000      	movs	r0, #0
 8000fee:	f7ff ff97 	bl	8000f20 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000ff2:	20d5      	movs	r0, #213	@ 0xd5
 8000ff4:	f7ff ff94 	bl	8000f20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000ff8:	20f0      	movs	r0, #240	@ 0xf0
 8000ffa:	f7ff ff91 	bl	8000f20 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000ffe:	20d9      	movs	r0, #217	@ 0xd9
 8001000:	f7ff ff8e 	bl	8000f20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001004:	2022      	movs	r0, #34	@ 0x22
 8001006:	f7ff ff8b 	bl	8000f20 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800100a:	20da      	movs	r0, #218	@ 0xda
 800100c:	f7ff ff88 	bl	8000f20 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8001010:	2002      	movs	r0, #2
 8001012:	f7ff ff85 	bl	8000f20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001016:	20db      	movs	r0, #219	@ 0xdb
 8001018:	f7ff ff82 	bl	8000f20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800101c:	2020      	movs	r0, #32
 800101e:	f7ff ff7f 	bl	8000f20 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001022:	208d      	movs	r0, #141	@ 0x8d
 8001024:	f7ff ff7c 	bl	8000f20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001028:	2014      	movs	r0, #20
 800102a:	f7ff ff79 	bl	8000f20 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800102e:	2001      	movs	r0, #1
 8001030:	f000 ff2c 	bl	8001e8c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001034:	2000      	movs	r0, #0
 8001036:	f000 f80f 	bl	8001058 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800103a:	f000 f825 	bl	8001088 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800103e:	4b05      	ldr	r3, [pc, #20]	@ (8001054 <ssd1306_Init+0xd0>)
 8001040:	2200      	movs	r2, #0
 8001042:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001044:	4b03      	ldr	r3, [pc, #12]	@ (8001054 <ssd1306_Init+0xd0>)
 8001046:	2200      	movs	r2, #0
 8001048:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800104a:	4b02      	ldr	r3, [pc, #8]	@ (8001054 <ssd1306_Init+0xd0>)
 800104c:	2201      	movs	r2, #1
 800104e:	711a      	strb	r2, [r3, #4]
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200002cc 	.word	0x200002cc

08001058 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d101      	bne.n	800106c <ssd1306_Fill+0x14>
 8001068:	2300      	movs	r3, #0
 800106a:	e000      	b.n	800106e <ssd1306_Fill+0x16>
 800106c:	23ff      	movs	r3, #255	@ 0xff
 800106e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001072:	4619      	mov	r1, r3
 8001074:	4803      	ldr	r0, [pc, #12]	@ (8001084 <ssd1306_Fill+0x2c>)
 8001076:	f003 f80f 	bl	8004098 <memset>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200000cc 	.word	0x200000cc

08001088 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800108e:	2300      	movs	r3, #0
 8001090:	71fb      	strb	r3, [r7, #7]
 8001092:	e016      	b.n	80010c2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	3b50      	subs	r3, #80	@ 0x50
 8001098:	b2db      	uxtb	r3, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ff40 	bl	8000f20 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80010a0:	2000      	movs	r0, #0
 80010a2:	f7ff ff3d 	bl	8000f20 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80010a6:	2010      	movs	r0, #16
 80010a8:	f7ff ff3a 	bl	8000f20 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	01db      	lsls	r3, r3, #7
 80010b0:	4a08      	ldr	r2, [pc, #32]	@ (80010d4 <ssd1306_UpdateScreen+0x4c>)
 80010b2:	4413      	add	r3, r2
 80010b4:	2180      	movs	r1, #128	@ 0x80
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff ff4a 	bl	8000f50 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	3301      	adds	r3, #1
 80010c0:	71fb      	strb	r3, [r7, #7]
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	2b03      	cmp	r3, #3
 80010c6:	d9e5      	bls.n	8001094 <ssd1306_UpdateScreen+0xc>
    }
}
 80010c8:	bf00      	nop
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200000cc 	.word	0x200000cc

080010d8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
 80010e2:	460b      	mov	r3, r1
 80010e4:	71bb      	strb	r3, [r7, #6]
 80010e6:	4613      	mov	r3, r2
 80010e8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	db3d      	blt.n	800116e <ssd1306_DrawPixel+0x96>
 80010f2:	79bb      	ldrb	r3, [r7, #6]
 80010f4:	2b1f      	cmp	r3, #31
 80010f6:	d83a      	bhi.n	800116e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80010f8:	797b      	ldrb	r3, [r7, #5]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d11a      	bne.n	8001134 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80010fe:	79fa      	ldrb	r2, [r7, #7]
 8001100:	79bb      	ldrb	r3, [r7, #6]
 8001102:	08db      	lsrs	r3, r3, #3
 8001104:	b2d8      	uxtb	r0, r3
 8001106:	4603      	mov	r3, r0
 8001108:	01db      	lsls	r3, r3, #7
 800110a:	4413      	add	r3, r2
 800110c:	4a1b      	ldr	r2, [pc, #108]	@ (800117c <ssd1306_DrawPixel+0xa4>)
 800110e:	5cd3      	ldrb	r3, [r2, r3]
 8001110:	b25a      	sxtb	r2, r3
 8001112:	79bb      	ldrb	r3, [r7, #6]
 8001114:	f003 0307 	and.w	r3, r3, #7
 8001118:	2101      	movs	r1, #1
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
 800111e:	b25b      	sxtb	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	b259      	sxtb	r1, r3
 8001124:	79fa      	ldrb	r2, [r7, #7]
 8001126:	4603      	mov	r3, r0
 8001128:	01db      	lsls	r3, r3, #7
 800112a:	4413      	add	r3, r2
 800112c:	b2c9      	uxtb	r1, r1
 800112e:	4a13      	ldr	r2, [pc, #76]	@ (800117c <ssd1306_DrawPixel+0xa4>)
 8001130:	54d1      	strb	r1, [r2, r3]
 8001132:	e01d      	b.n	8001170 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001134:	79fa      	ldrb	r2, [r7, #7]
 8001136:	79bb      	ldrb	r3, [r7, #6]
 8001138:	08db      	lsrs	r3, r3, #3
 800113a:	b2d8      	uxtb	r0, r3
 800113c:	4603      	mov	r3, r0
 800113e:	01db      	lsls	r3, r3, #7
 8001140:	4413      	add	r3, r2
 8001142:	4a0e      	ldr	r2, [pc, #56]	@ (800117c <ssd1306_DrawPixel+0xa4>)
 8001144:	5cd3      	ldrb	r3, [r2, r3]
 8001146:	b25a      	sxtb	r2, r3
 8001148:	79bb      	ldrb	r3, [r7, #6]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	2101      	movs	r1, #1
 8001150:	fa01 f303 	lsl.w	r3, r1, r3
 8001154:	b25b      	sxtb	r3, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	b25b      	sxtb	r3, r3
 800115a:	4013      	ands	r3, r2
 800115c:	b259      	sxtb	r1, r3
 800115e:	79fa      	ldrb	r2, [r7, #7]
 8001160:	4603      	mov	r3, r0
 8001162:	01db      	lsls	r3, r3, #7
 8001164:	4413      	add	r3, r2
 8001166:	b2c9      	uxtb	r1, r1
 8001168:	4a04      	ldr	r2, [pc, #16]	@ (800117c <ssd1306_DrawPixel+0xa4>)
 800116a:	54d1      	strb	r1, [r2, r3]
 800116c:	e000      	b.n	8001170 <ssd1306_DrawPixel+0x98>
        return;
 800116e:	bf00      	nop
    }
}
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	200000cc 	.word	0x200000cc

08001180 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001180:	b590      	push	{r4, r7, lr}
 8001182:	b089      	sub	sp, #36	@ 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	4604      	mov	r4, r0
 8001188:	4638      	mov	r0, r7
 800118a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800118e:	4623      	mov	r3, r4
 8001190:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	2b1f      	cmp	r3, #31
 8001196:	d902      	bls.n	800119e <ssd1306_WriteChar+0x1e>
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	2b7e      	cmp	r3, #126	@ 0x7e
 800119c:	d901      	bls.n	80011a2 <ssd1306_WriteChar+0x22>
        return 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	e079      	b.n	8001296 <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d005      	beq.n	80011b4 <ssd1306_WriteChar+0x34>
 80011a8:	68ba      	ldr	r2, [r7, #8]
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	3b20      	subs	r3, #32
 80011ae:	4413      	add	r3, r2
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	e000      	b.n	80011b6 <ssd1306_WriteChar+0x36>
 80011b4:	783b      	ldrb	r3, [r7, #0]
 80011b6:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80011b8:	4b39      	ldr	r3, [pc, #228]	@ (80012a0 <ssd1306_WriteChar+0x120>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	7dfb      	ldrb	r3, [r7, #23]
 80011c0:	4413      	add	r3, r2
 80011c2:	2b80      	cmp	r3, #128	@ 0x80
 80011c4:	dc06      	bgt.n	80011d4 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80011c6:	4b36      	ldr	r3, [pc, #216]	@ (80012a0 <ssd1306_WriteChar+0x120>)
 80011c8:	885b      	ldrh	r3, [r3, #2]
 80011ca:	461a      	mov	r2, r3
 80011cc:	787b      	ldrb	r3, [r7, #1]
 80011ce:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80011d0:	2b20      	cmp	r3, #32
 80011d2:	dd01      	ble.n	80011d8 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	e05e      	b.n	8001296 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
 80011dc:	e04d      	b.n	800127a <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	3b20      	subs	r3, #32
 80011e4:	7879      	ldrb	r1, [r7, #1]
 80011e6:	fb01 f303 	mul.w	r3, r1, r3
 80011ea:	4619      	mov	r1, r3
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	440b      	add	r3, r1
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	4413      	add	r3, r2
 80011f4:	881b      	ldrh	r3, [r3, #0]
 80011f6:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 80011f8:	2300      	movs	r3, #0
 80011fa:	61bb      	str	r3, [r7, #24]
 80011fc:	e036      	b.n	800126c <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d013      	beq.n	8001236 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800120e:	4b24      	ldr	r3, [pc, #144]	@ (80012a0 <ssd1306_WriteChar+0x120>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	4413      	add	r3, r2
 800121a:	b2d8      	uxtb	r0, r3
 800121c:	4b20      	ldr	r3, [pc, #128]	@ (80012a0 <ssd1306_WriteChar+0x120>)
 800121e:	885b      	ldrh	r3, [r3, #2]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	4413      	add	r3, r2
 8001228:	b2db      	uxtb	r3, r3
 800122a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800122e:	4619      	mov	r1, r3
 8001230:	f7ff ff52 	bl	80010d8 <ssd1306_DrawPixel>
 8001234:	e017      	b.n	8001266 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001236:	4b1a      	ldr	r3, [pc, #104]	@ (80012a0 <ssd1306_WriteChar+0x120>)
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	4413      	add	r3, r2
 8001242:	b2d8      	uxtb	r0, r3
 8001244:	4b16      	ldr	r3, [pc, #88]	@ (80012a0 <ssd1306_WriteChar+0x120>)
 8001246:	885b      	ldrh	r3, [r3, #2]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	b2db      	uxtb	r3, r3
 800124e:	4413      	add	r3, r2
 8001250:	b2d9      	uxtb	r1, r3
 8001252:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001256:	2b00      	cmp	r3, #0
 8001258:	bf0c      	ite	eq
 800125a:	2301      	moveq	r3, #1
 800125c:	2300      	movne	r3, #0
 800125e:	b2db      	uxtb	r3, r3
 8001260:	461a      	mov	r2, r3
 8001262:	f7ff ff39 	bl	80010d8 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	3301      	adds	r3, #1
 800126a:	61bb      	str	r3, [r7, #24]
 800126c:	7dfb      	ldrb	r3, [r7, #23]
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	429a      	cmp	r2, r3
 8001272:	d3c4      	bcc.n	80011fe <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	3301      	adds	r3, #1
 8001278:	61fb      	str	r3, [r7, #28]
 800127a:	787b      	ldrb	r3, [r7, #1]
 800127c:	461a      	mov	r2, r3
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	4293      	cmp	r3, r2
 8001282:	d3ac      	bcc.n	80011de <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8001284:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <ssd1306_WriteChar+0x120>)
 8001286:	881a      	ldrh	r2, [r3, #0]
 8001288:	7dfb      	ldrb	r3, [r7, #23]
 800128a:	b29b      	uxth	r3, r3
 800128c:	4413      	add	r3, r2
 800128e:	b29a      	uxth	r2, r3
 8001290:	4b03      	ldr	r3, [pc, #12]	@ (80012a0 <ssd1306_WriteChar+0x120>)
 8001292:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001294:	7bfb      	ldrb	r3, [r7, #15]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3724      	adds	r7, #36	@ 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd90      	pop	{r4, r7, pc}
 800129e:	bf00      	nop
 80012a0:	200002cc 	.word	0x200002cc

080012a4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af02      	add	r7, sp, #8
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	4638      	mov	r0, r7
 80012ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80012b2:	e013      	b.n	80012dc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	7818      	ldrb	r0, [r3, #0]
 80012b8:	7e3b      	ldrb	r3, [r7, #24]
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	463b      	mov	r3, r7
 80012be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012c0:	f7ff ff5e 	bl	8001180 <ssd1306_WriteChar>
 80012c4:	4603      	mov	r3, r0
 80012c6:	461a      	mov	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d002      	beq.n	80012d6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	e008      	b.n	80012e8 <ssd1306_WriteString+0x44>
        }
        str++;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	3301      	adds	r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1e7      	bne.n	80012b4 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	781b      	ldrb	r3, [r3, #0]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	460a      	mov	r2, r1
 80012fa:	71fb      	strb	r3, [r7, #7]
 80012fc:	4613      	mov	r3, r2
 80012fe:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	b29a      	uxth	r2, r3
 8001304:	4b05      	ldr	r3, [pc, #20]	@ (800131c <ssd1306_SetCursor+0x2c>)
 8001306:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001308:	79bb      	ldrb	r3, [r7, #6]
 800130a:	b29a      	uxth	r2, r3
 800130c:	4b03      	ldr	r3, [pc, #12]	@ (800131c <ssd1306_SetCursor+0x2c>)
 800130e:	805a      	strh	r2, [r3, #2]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	200002cc 	.word	0x200002cc

08001320 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b089      	sub	sp, #36	@ 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	4604      	mov	r4, r0
 8001328:	4608      	mov	r0, r1
 800132a:	4611      	mov	r1, r2
 800132c:	461a      	mov	r2, r3
 800132e:	4623      	mov	r3, r4
 8001330:	71fb      	strb	r3, [r7, #7]
 8001332:	4603      	mov	r3, r0
 8001334:	71bb      	strb	r3, [r7, #6]
 8001336:	460b      	mov	r3, r1
 8001338:	717b      	strb	r3, [r7, #5]
 800133a:	4613      	mov	r3, r2
 800133c:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 800133e:	797a      	ldrb	r2, [r7, #5]
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b00      	cmp	r3, #0
 8001346:	bfb8      	it	lt
 8001348:	425b      	neglt	r3, r3
 800134a:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 800134c:	793a      	ldrb	r2, [r7, #4]
 800134e:	79bb      	ldrb	r3, [r7, #6]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	bfb8      	it	lt
 8001356:	425b      	neglt	r3, r3
 8001358:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 800135a:	79fa      	ldrb	r2, [r7, #7]
 800135c:	797b      	ldrb	r3, [r7, #5]
 800135e:	429a      	cmp	r2, r3
 8001360:	d201      	bcs.n	8001366 <ssd1306_Line+0x46>
 8001362:	2301      	movs	r3, #1
 8001364:	e001      	b.n	800136a <ssd1306_Line+0x4a>
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 800136c:	79ba      	ldrb	r2, [r7, #6]
 800136e:	793b      	ldrb	r3, [r7, #4]
 8001370:	429a      	cmp	r2, r3
 8001372:	d201      	bcs.n	8001378 <ssd1306_Line+0x58>
 8001374:	2301      	movs	r3, #1
 8001376:	e001      	b.n	800137c <ssd1306_Line+0x5c>
 8001378:	f04f 33ff 	mov.w	r3, #4294967295
 800137c:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8001386:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800138a:	7939      	ldrb	r1, [r7, #4]
 800138c:	797b      	ldrb	r3, [r7, #5]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fea2 	bl	80010d8 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8001394:	e024      	b.n	80013e0 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8001396:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800139a:	79b9      	ldrb	r1, [r7, #6]
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fe9a 	bl	80010d8 <ssd1306_DrawPixel>
        error2 = error * 2;
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	425b      	negs	r3, r3
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	dd08      	ble.n	80013c6 <ssd1306_Line+0xa6>
            error -= deltaY;
 80013b4:	69fa      	ldr	r2, [r7, #28]
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	4413      	add	r3, r2
 80013c4:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	da08      	bge.n	80013e0 <ssd1306_Line+0xc0>
            error += deltaX;
 80013ce:	69fa      	ldr	r2, [r7, #28]
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	4413      	add	r3, r2
 80013d4:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	79bb      	ldrb	r3, [r7, #6]
 80013dc:	4413      	add	r3, r2
 80013de:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 80013e0:	79fa      	ldrb	r2, [r7, #7]
 80013e2:	797b      	ldrb	r3, [r7, #5]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d1d6      	bne.n	8001396 <ssd1306_Line+0x76>
 80013e8:	79ba      	ldrb	r2, [r7, #6]
 80013ea:	793b      	ldrb	r3, [r7, #4]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d1d2      	bne.n	8001396 <ssd1306_Line+0x76>
        }
    }
    return;
 80013f0:	bf00      	nop
}
 80013f2:	3724      	adds	r7, #36	@ 0x24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd90      	pop	{r4, r7, pc}

080013f8 <ssd1306_Polyline>:

/* Draw polyline */
void ssd1306_Polyline(const SSD1306_VERTEX *par_vertex, uint16_t par_size, SSD1306_COLOR color) {
 80013f8:	b590      	push	{r4, r7, lr}
 80013fa:	b087      	sub	sp, #28
 80013fc:	af02      	add	r7, sp, #8
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	807b      	strh	r3, [r7, #2]
 8001404:	4613      	mov	r3, r2
 8001406:	707b      	strb	r3, [r7, #1]
    uint16_t i;
    if(par_vertex == NULL) {
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d02a      	beq.n	8001464 <ssd1306_Polyline+0x6c>
        return;
    }

    for(i = 1; i < par_size; i++) {
 800140e:	2301      	movs	r3, #1
 8001410:	81fb      	strh	r3, [r7, #14]
 8001412:	e022      	b.n	800145a <ssd1306_Polyline+0x62>
        ssd1306_Line(par_vertex[i - 1].x, par_vertex[i - 1].y, par_vertex[i].x, par_vertex[i].y, color);
 8001414:	89fb      	ldrh	r3, [r7, #14]
 8001416:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800141a:	3b01      	subs	r3, #1
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	4413      	add	r3, r2
 8001422:	7818      	ldrb	r0, [r3, #0]
 8001424:	89fb      	ldrh	r3, [r7, #14]
 8001426:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800142a:	3b01      	subs	r3, #1
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	7859      	ldrb	r1, [r3, #1]
 8001434:	89fb      	ldrh	r3, [r7, #14]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	4413      	add	r3, r2
 800143c:	781c      	ldrb	r4, [r3, #0]
 800143e:	89fb      	ldrh	r3, [r7, #14]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	785a      	ldrb	r2, [r3, #1]
 8001448:	787b      	ldrb	r3, [r7, #1]
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	4613      	mov	r3, r2
 800144e:	4622      	mov	r2, r4
 8001450:	f7ff ff66 	bl	8001320 <ssd1306_Line>
    for(i = 1; i < par_size; i++) {
 8001454:	89fb      	ldrh	r3, [r7, #14]
 8001456:	3301      	adds	r3, #1
 8001458:	81fb      	strh	r3, [r7, #14]
 800145a:	89fa      	ldrh	r2, [r7, #14]
 800145c:	887b      	ldrh	r3, [r7, #2]
 800145e:	429a      	cmp	r2, r3
 8001460:	d3d8      	bcc.n	8001414 <ssd1306_Polyline+0x1c>
    }

    return;
 8001462:	e000      	b.n	8001466 <ssd1306_Polyline+0x6e>
        return;
 8001464:	bf00      	nop
}
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	bd90      	pop	{r4, r7, pc}

0800146c <ssd1306_DegToRad>:

/* Convert Degrees to Radians */
static float ssd1306_DegToRad(float par_deg) {
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	ed87 0a01 	vstr	s0, [r7, #4]
    return par_deg * (3.14f / 180.0f);
 8001476:	edd7 7a01 	vldr	s15, [r7, #4]
 800147a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001490 <ssd1306_DegToRad+0x24>
 800147e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001482:	eeb0 0a67 	vmov.f32	s0, s15
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	3c8ee7a7 	.word	0x3c8ee7a7

08001494 <ssd1306_NormalizeTo0_360>:

/* Normalize degree to [0;360] */
static uint16_t ssd1306_NormalizeTo0_360(uint16_t par_deg) {
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	80fb      	strh	r3, [r7, #6]
    uint16_t loc_angle;
    if(par_deg <= 360) {
 800149e:	88fb      	ldrh	r3, [r7, #6]
 80014a0:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 80014a4:	d802      	bhi.n	80014ac <ssd1306_NormalizeTo0_360+0x18>
        loc_angle = par_deg;
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	81fb      	strh	r3, [r7, #14]
 80014aa:	e013      	b.n	80014d4 <ssd1306_NormalizeTo0_360+0x40>
    } else {
        loc_angle = par_deg % 360;
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	08da      	lsrs	r2, r3, #3
 80014b0:	490c      	ldr	r1, [pc, #48]	@ (80014e4 <ssd1306_NormalizeTo0_360+0x50>)
 80014b2:	fba1 1202 	umull	r1, r2, r1, r2
 80014b6:	0892      	lsrs	r2, r2, #2
 80014b8:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 80014bc:	fb01 f202 	mul.w	r2, r1, r2
 80014c0:	1a9b      	subs	r3, r3, r2
 80014c2:	81fb      	strh	r3, [r7, #14]
        loc_angle = (loc_angle ? loc_angle : 360);
 80014c4:	89fb      	ldrh	r3, [r7, #14]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <ssd1306_NormalizeTo0_360+0x3a>
 80014ca:	89fb      	ldrh	r3, [r7, #14]
 80014cc:	e001      	b.n	80014d2 <ssd1306_NormalizeTo0_360+0x3e>
 80014ce:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80014d2:	81fb      	strh	r3, [r7, #14]
    }
    return loc_angle;
 80014d4:	89fb      	ldrh	r3, [r7, #14]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	16c16c17 	.word	0x16c16c17

080014e8 <ssd1306_DrawArc>:
/*
 * DrawArc. Draw angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle in degree
 * sweep in degree
 */
void ssd1306_DrawArc(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b08d      	sub	sp, #52	@ 0x34
 80014ec:	af02      	add	r7, sp, #8
 80014ee:	4604      	mov	r4, r0
 80014f0:	4608      	mov	r0, r1
 80014f2:	4611      	mov	r1, r2
 80014f4:	461a      	mov	r2, r3
 80014f6:	4623      	mov	r3, r4
 80014f8:	73fb      	strb	r3, [r7, #15]
 80014fa:	4603      	mov	r3, r0
 80014fc:	73bb      	strb	r3, [r7, #14]
 80014fe:	460b      	mov	r3, r1
 8001500:	737b      	strb	r3, [r7, #13]
 8001502:	4613      	mov	r3, r2
 8001504:	817b      	strh	r3, [r7, #10]
    uint8_t yp1,yp2;
    uint32_t count;
    uint32_t loc_sweep;
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 8001506:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ffc3 	bl	8001494 <ssd1306_NormalizeTo0_360>
 800150e:	4603      	mov	r3, r0
 8001510:	61fb      	str	r3, [r7, #28]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8001512:	897b      	ldrh	r3, [r7, #10]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ffbd 	bl	8001494 <ssd1306_NormalizeTo0_360>
 800151a:	4603      	mov	r3, r0
 800151c:	461a      	mov	r2, r3
 800151e:	4b63      	ldr	r3, [pc, #396]	@ (80016ac <ssd1306_DrawArc+0x1c4>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	fb02 f303 	mul.w	r3, r2, r3
 8001526:	4a62      	ldr	r2, [pc, #392]	@ (80016b0 <ssd1306_DrawArc+0x1c8>)
 8001528:	fb82 1203 	smull	r1, r2, r2, r3
 800152c:	441a      	add	r2, r3
 800152e:	1212      	asrs	r2, r2, #8
 8001530:	17db      	asrs	r3, r3, #31
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	627b      	str	r3, [r7, #36]	@ 0x24
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8001536:	4b5d      	ldr	r3, [pc, #372]	@ (80016ac <ssd1306_DrawArc+0x1c4>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	fb02 f303 	mul.w	r3, r2, r3
 8001542:	08db      	lsrs	r3, r3, #3
 8001544:	4a5b      	ldr	r2, [pc, #364]	@ (80016b4 <ssd1306_DrawArc+0x1cc>)
 8001546:	fba2 2303 	umull	r2, r3, r2, r3
 800154a:	089b      	lsrs	r3, r3, #2
 800154c:	61bb      	str	r3, [r7, #24]
    approx_degree = loc_sweep / (float)approx_segments;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	ee07 3a90 	vmov	s15, r3
 8001554:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	ee07 3a90 	vmov	s15, r3
 800155e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001562:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001566:	edc7 7a05 	vstr	s15, [r7, #20]
    while(count < approx_segments)
 800156a:	e096      	b.n	800169a <ssd1306_DrawArc+0x1b2>
    {
        rad = ssd1306_DegToRad(count*approx_degree);
 800156c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156e:	ee07 3a90 	vmov	s15, r3
 8001572:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001576:	edd7 7a05 	vldr	s15, [r7, #20]
 800157a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800157e:	eeb0 0a67 	vmov.f32	s0, s15
 8001582:	f7ff ff73 	bl	800146c <ssd1306_DegToRad>
 8001586:	ed87 0a08 	vstr	s0, [r7, #32]
        xp1 = x + (int8_t)(sinf(rad)*radius);
 800158a:	ed97 0a08 	vldr	s0, [r7, #32]
 800158e:	f003 fa2b 	bl	80049e8 <sinf>
 8001592:	eeb0 7a40 	vmov.f32	s14, s0
 8001596:	7b7b      	ldrb	r3, [r7, #13]
 8001598:	ee07 3a90 	vmov	s15, r3
 800159c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015a8:	edc7 7a01 	vstr	s15, [r7, #4]
 80015ac:	793b      	ldrb	r3, [r7, #4]
 80015ae:	b25b      	sxtb	r3, r3
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	4413      	add	r3, r2
 80015b6:	74fb      	strb	r3, [r7, #19]
        yp1 = y + (int8_t)(cosf(rad)*radius);    
 80015b8:	ed97 0a08 	vldr	s0, [r7, #32]
 80015bc:	f003 f9d0 	bl	8004960 <cosf>
 80015c0:	eeb0 7a40 	vmov.f32	s14, s0
 80015c4:	7b7b      	ldrb	r3, [r7, #13]
 80015c6:	ee07 3a90 	vmov	s15, r3
 80015ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015d6:	edc7 7a01 	vstr	s15, [r7, #4]
 80015da:	793b      	ldrb	r3, [r7, #4]
 80015dc:	b25b      	sxtb	r3, r3
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	7bbb      	ldrb	r3, [r7, #14]
 80015e2:	4413      	add	r3, r2
 80015e4:	74bb      	strb	r3, [r7, #18]
        count++;
 80015e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e8:	3301      	adds	r3, #1
 80015ea:	627b      	str	r3, [r7, #36]	@ 0x24
        if(count != approx_segments) {
 80015ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d00f      	beq.n	8001614 <ssd1306_DrawArc+0x12c>
            rad = ssd1306_DegToRad(count*approx_degree);
 80015f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f6:	ee07 3a90 	vmov	s15, r3
 80015fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001606:	eeb0 0a67 	vmov.f32	s0, s15
 800160a:	f7ff ff2f 	bl	800146c <ssd1306_DegToRad>
 800160e:	ed87 0a08 	vstr	s0, [r7, #32]
 8001612:	e00a      	b.n	800162a <ssd1306_DrawArc+0x142>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	ee07 3a90 	vmov	s15, r3
 800161a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800161e:	eeb0 0a67 	vmov.f32	s0, s15
 8001622:	f7ff ff23 	bl	800146c <ssd1306_DegToRad>
 8001626:	ed87 0a08 	vstr	s0, [r7, #32]
        }
        xp2 = x + (int8_t)(sinf(rad)*radius);
 800162a:	ed97 0a08 	vldr	s0, [r7, #32]
 800162e:	f003 f9db 	bl	80049e8 <sinf>
 8001632:	eeb0 7a40 	vmov.f32	s14, s0
 8001636:	7b7b      	ldrb	r3, [r7, #13]
 8001638:	ee07 3a90 	vmov	s15, r3
 800163c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001644:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001648:	edc7 7a01 	vstr	s15, [r7, #4]
 800164c:	793b      	ldrb	r3, [r7, #4]
 800164e:	b25b      	sxtb	r3, r3
 8001650:	b2da      	uxtb	r2, r3
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	4413      	add	r3, r2
 8001656:	747b      	strb	r3, [r7, #17]
        yp2 = y + (int8_t)(cosf(rad)*radius);    
 8001658:	ed97 0a08 	vldr	s0, [r7, #32]
 800165c:	f003 f980 	bl	8004960 <cosf>
 8001660:	eeb0 7a40 	vmov.f32	s14, s0
 8001664:	7b7b      	ldrb	r3, [r7, #13]
 8001666:	ee07 3a90 	vmov	s15, r3
 800166a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800166e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001672:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001676:	edc7 7a01 	vstr	s15, [r7, #4]
 800167a:	793b      	ldrb	r3, [r7, #4]
 800167c:	b25b      	sxtb	r3, r3
 800167e:	b2da      	uxtb	r2, r3
 8001680:	7bbb      	ldrb	r3, [r7, #14]
 8001682:	4413      	add	r3, r2
 8001684:	743b      	strb	r3, [r7, #16]
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 8001686:	7c3c      	ldrb	r4, [r7, #16]
 8001688:	7c7a      	ldrb	r2, [r7, #17]
 800168a:	7cb9      	ldrb	r1, [r7, #18]
 800168c:	7cf8      	ldrb	r0, [r7, #19]
 800168e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	4623      	mov	r3, r4
 8001696:	f7ff fe43 	bl	8001320 <ssd1306_Line>
    while(count < approx_segments)
 800169a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	429a      	cmp	r2, r3
 80016a0:	f4ff af64 	bcc.w	800156c <ssd1306_DrawArc+0x84>
    }
    
    return;
 80016a4:	bf00      	nop
}
 80016a6:	372c      	adds	r7, #44	@ 0x2c
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd90      	pop	{r4, r7, pc}
 80016ac:	08005526 	.word	0x08005526
 80016b0:	b60b60b7 	.word	0xb60b60b7
 80016b4:	16c16c17 	.word	0x16c16c17

080016b8 <ssd1306_DrawArcWithRadiusLine>:
 * Draw arc with radius line
 * Angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle: start angle in degree
 * sweep: finish angle in degree
 */
void ssd1306_DrawArcWithRadiusLine(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b08f      	sub	sp, #60	@ 0x3c
 80016bc:	af02      	add	r7, sp, #8
 80016be:	4604      	mov	r4, r0
 80016c0:	4608      	mov	r0, r1
 80016c2:	4611      	mov	r1, r2
 80016c4:	461a      	mov	r2, r3
 80016c6:	4623      	mov	r3, r4
 80016c8:	73fb      	strb	r3, [r7, #15]
 80016ca:	4603      	mov	r3, r0
 80016cc:	73bb      	strb	r3, [r7, #14]
 80016ce:	460b      	mov	r3, r1
 80016d0:	737b      	strb	r3, [r7, #13]
 80016d2:	4613      	mov	r3, r2
 80016d4:	817b      	strh	r3, [r7, #10]
    const uint32_t CIRCLE_APPROXIMATION_SEGMENTS = 36;
 80016d6:	2324      	movs	r3, #36	@ 0x24
 80016d8:	623b      	str	r3, [r7, #32]
    float approx_degree;
    uint32_t approx_segments;
    uint8_t xp1;
    uint8_t xp2 = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t yp1;
    uint8_t yp2 = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint32_t count;
    uint32_t loc_sweep;
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 80016e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fed2 	bl	8001494 <ssd1306_NormalizeTo0_360>
 80016f0:	4603      	mov	r3, r0
 80016f2:	61fb      	str	r3, [r7, #28]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80016f4:	897b      	ldrh	r3, [r7, #10]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fecc 	bl	8001494 <ssd1306_NormalizeTo0_360>
 80016fc:	4603      	mov	r3, r0
 80016fe:	461a      	mov	r2, r3
 8001700:	6a3b      	ldr	r3, [r7, #32]
 8001702:	fb02 f303 	mul.w	r3, r2, r3
 8001706:	08db      	lsrs	r3, r3, #3
 8001708:	4a8a      	ldr	r2, [pc, #552]	@ (8001934 <ssd1306_DrawArcWithRadiusLine+0x27c>)
 800170a:	fba2 2303 	umull	r2, r3, r2, r3
 800170e:	089b      	lsrs	r3, r3, #2
 8001710:	62bb      	str	r3, [r7, #40]	@ 0x28
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	6a3a      	ldr	r2, [r7, #32]
 8001716:	fb02 f303 	mul.w	r3, r2, r3
 800171a:	08db      	lsrs	r3, r3, #3
 800171c:	4a85      	ldr	r2, [pc, #532]	@ (8001934 <ssd1306_DrawArcWithRadiusLine+0x27c>)
 800171e:	fba2 2303 	umull	r2, r3, r2, r3
 8001722:	089b      	lsrs	r3, r3, #2
 8001724:	61bb      	str	r3, [r7, #24]
    approx_degree = loc_sweep / (float)approx_segments;
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	ee07 3a90 	vmov	s15, r3
 800172c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	ee07 3a90 	vmov	s15, r3
 8001736:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800173a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800173e:	edc7 7a05 	vstr	s15, [r7, #20]

    rad = ssd1306_DegToRad(count*approx_degree);
 8001742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001744:	ee07 3a90 	vmov	s15, r3
 8001748:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800174c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001754:	eeb0 0a67 	vmov.f32	s0, s15
 8001758:	f7ff fe88 	bl	800146c <ssd1306_DegToRad>
 800175c:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    uint8_t first_point_x = x + (int8_t)(sinf(rad)*radius);
 8001760:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001764:	f003 f940 	bl	80049e8 <sinf>
 8001768:	eeb0 7a40 	vmov.f32	s14, s0
 800176c:	7b7b      	ldrb	r3, [r7, #13]
 800176e:	ee07 3a90 	vmov	s15, r3
 8001772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800177a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800177e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001782:	793b      	ldrb	r3, [r7, #4]
 8001784:	b25b      	sxtb	r3, r3
 8001786:	b2da      	uxtb	r2, r3
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	4413      	add	r3, r2
 800178c:	74fb      	strb	r3, [r7, #19]
    uint8_t first_point_y = y + (int8_t)(cosf(rad)*radius);   
 800178e:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001792:	f003 f8e5 	bl	8004960 <cosf>
 8001796:	eeb0 7a40 	vmov.f32	s14, s0
 800179a:	7b7b      	ldrb	r3, [r7, #13]
 800179c:	ee07 3a90 	vmov	s15, r3
 80017a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017ac:	edc7 7a01 	vstr	s15, [r7, #4]
 80017b0:	793b      	ldrb	r3, [r7, #4]
 80017b2:	b25b      	sxtb	r3, r3
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	7bbb      	ldrb	r3, [r7, #14]
 80017b8:	4413      	add	r3, r2
 80017ba:	74bb      	strb	r3, [r7, #18]
    while (count < approx_segments) {
 80017bc:	e09a      	b.n	80018f4 <ssd1306_DrawArcWithRadiusLine+0x23c>
        rad = ssd1306_DegToRad(count*approx_degree);
 80017be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017c0:	ee07 3a90 	vmov	s15, r3
 80017c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80017cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017d0:	eeb0 0a67 	vmov.f32	s0, s15
 80017d4:	f7ff fe4a 	bl	800146c <ssd1306_DegToRad>
 80017d8:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
        xp1 = x + (int8_t)(sinf(rad)*radius);
 80017dc:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80017e0:	f003 f902 	bl	80049e8 <sinf>
 80017e4:	eeb0 7a40 	vmov.f32	s14, s0
 80017e8:	7b7b      	ldrb	r3, [r7, #13]
 80017ea:	ee07 3a90 	vmov	s15, r3
 80017ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017fa:	edc7 7a01 	vstr	s15, [r7, #4]
 80017fe:	793b      	ldrb	r3, [r7, #4]
 8001800:	b25b      	sxtb	r3, r3
 8001802:	b2da      	uxtb	r2, r3
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	4413      	add	r3, r2
 8001808:	747b      	strb	r3, [r7, #17]
        yp1 = y + (int8_t)(cosf(rad)*radius);    
 800180a:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 800180e:	f003 f8a7 	bl	8004960 <cosf>
 8001812:	eeb0 7a40 	vmov.f32	s14, s0
 8001816:	7b7b      	ldrb	r3, [r7, #13]
 8001818:	ee07 3a90 	vmov	s15, r3
 800181c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001824:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001828:	edc7 7a01 	vstr	s15, [r7, #4]
 800182c:	793b      	ldrb	r3, [r7, #4]
 800182e:	b25b      	sxtb	r3, r3
 8001830:	b2da      	uxtb	r2, r3
 8001832:	7bbb      	ldrb	r3, [r7, #14]
 8001834:	4413      	add	r3, r2
 8001836:	743b      	strb	r3, [r7, #16]
        count++;
 8001838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800183a:	3301      	adds	r3, #1
 800183c:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (count != approx_segments) {
 800183e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	429a      	cmp	r2, r3
 8001844:	d00f      	beq.n	8001866 <ssd1306_DrawArcWithRadiusLine+0x1ae>
            rad = ssd1306_DegToRad(count*approx_degree);
 8001846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001848:	ee07 3a90 	vmov	s15, r3
 800184c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001850:	edd7 7a05 	vldr	s15, [r7, #20]
 8001854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001858:	eeb0 0a67 	vmov.f32	s0, s15
 800185c:	f7ff fe06 	bl	800146c <ssd1306_DegToRad>
 8001860:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8001864:	e00a      	b.n	800187c <ssd1306_DrawArcWithRadiusLine+0x1c4>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	ee07 3a90 	vmov	s15, r3
 800186c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001870:	eeb0 0a67 	vmov.f32	s0, s15
 8001874:	f7ff fdfa 	bl	800146c <ssd1306_DegToRad>
 8001878:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
        }
        xp2 = x + (int8_t)(sinf(rad)*radius);
 800187c:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001880:	f003 f8b2 	bl	80049e8 <sinf>
 8001884:	eeb0 7a40 	vmov.f32	s14, s0
 8001888:	7b7b      	ldrb	r3, [r7, #13]
 800188a:	ee07 3a90 	vmov	s15, r3
 800188e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001896:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800189a:	edc7 7a01 	vstr	s15, [r7, #4]
 800189e:	793b      	ldrb	r3, [r7, #4]
 80018a0:	b25b      	sxtb	r3, r3
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	4413      	add	r3, r2
 80018a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        yp2 = y + (int8_t)(cosf(rad)*radius);    
 80018ac:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80018b0:	f003 f856 	bl	8004960 <cosf>
 80018b4:	eeb0 7a40 	vmov.f32	s14, s0
 80018b8:	7b7b      	ldrb	r3, [r7, #13]
 80018ba:	ee07 3a90 	vmov	s15, r3
 80018be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ca:	edc7 7a01 	vstr	s15, [r7, #4]
 80018ce:	793b      	ldrb	r3, [r7, #4]
 80018d0:	b25b      	sxtb	r3, r3
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	7bbb      	ldrb	r3, [r7, #14]
 80018d6:	4413      	add	r3, r2
 80018d8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 80018dc:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 80018e0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80018e4:	7c39      	ldrb	r1, [r7, #16]
 80018e6:	7c78      	ldrb	r0, [r7, #17]
 80018e8:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	4623      	mov	r3, r4
 80018f0:	f7ff fd16 	bl	8001320 <ssd1306_Line>
    while (count < approx_segments) {
 80018f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	f4ff af60 	bcc.w	80017be <ssd1306_DrawArcWithRadiusLine+0x106>
    }
    
    // Radius line
    ssd1306_Line(x,y,first_point_x,first_point_y,color);
 80018fe:	7cbc      	ldrb	r4, [r7, #18]
 8001900:	7cfa      	ldrb	r2, [r7, #19]
 8001902:	7bb9      	ldrb	r1, [r7, #14]
 8001904:	7bf8      	ldrb	r0, [r7, #15]
 8001906:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	4623      	mov	r3, r4
 800190e:	f7ff fd07 	bl	8001320 <ssd1306_Line>
    ssd1306_Line(x,y,xp2,yp2,color);
 8001912:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 8001916:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800191a:	7bb9      	ldrb	r1, [r7, #14]
 800191c:	7bf8      	ldrb	r0, [r7, #15]
 800191e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	4623      	mov	r3, r4
 8001926:	f7ff fcfb 	bl	8001320 <ssd1306_Line>
    return;
 800192a:	bf00      	nop
}
 800192c:	3734      	adds	r7, #52	@ 0x34
 800192e:	46bd      	mov	sp, r7
 8001930:	bd90      	pop	{r4, r7, pc}
 8001932:	bf00      	nop
 8001934:	16c16c17 	.word	0x16c16c17

08001938 <ssd1306_DrawCircle>:

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b087      	sub	sp, #28
 800193c:	af00      	add	r7, sp, #0
 800193e:	4604      	mov	r4, r0
 8001940:	4608      	mov	r0, r1
 8001942:	4611      	mov	r1, r2
 8001944:	461a      	mov	r2, r3
 8001946:	4623      	mov	r3, r4
 8001948:	71fb      	strb	r3, [r7, #7]
 800194a:	4603      	mov	r3, r0
 800194c:	71bb      	strb	r3, [r7, #6]
 800194e:	460b      	mov	r3, r1
 8001950:	717b      	strb	r3, [r7, #5]
 8001952:	4613      	mov	r3, r2
 8001954:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8001956:	797b      	ldrb	r3, [r7, #5]
 8001958:	425b      	negs	r3, r3
 800195a:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8001960:	797b      	ldrb	r3, [r7, #5]
 8001962:	f1c3 0301 	rsb	r3, r3, #1
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	2b00      	cmp	r3, #0
 8001970:	db65      	blt.n	8001a3e <ssd1306_DrawCircle+0x106>
 8001972:	79bb      	ldrb	r3, [r7, #6]
 8001974:	2b1f      	cmp	r3, #31
 8001976:	d862      	bhi.n	8001a3e <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	b2db      	uxtb	r3, r3
 800197c:	79fa      	ldrb	r2, [r7, #7]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	b2d8      	uxtb	r0, r3
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	b2da      	uxtb	r2, r3
 8001986:	79bb      	ldrb	r3, [r7, #6]
 8001988:	4413      	add	r3, r2
 800198a:	b2db      	uxtb	r3, r3
 800198c:	793a      	ldrb	r2, [r7, #4]
 800198e:	4619      	mov	r1, r3
 8001990:	f7ff fba2 	bl	80010d8 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	b2da      	uxtb	r2, r3
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	4413      	add	r3, r2
 800199c:	b2d8      	uxtb	r0, r3
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	79bb      	ldrb	r3, [r7, #6]
 80019a4:	4413      	add	r3, r2
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	793a      	ldrb	r2, [r7, #4]
 80019aa:	4619      	mov	r1, r3
 80019ac:	f7ff fb94 	bl	80010d8 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	4413      	add	r3, r2
 80019b8:	b2d8      	uxtb	r0, r3
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	79ba      	ldrb	r2, [r7, #6]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	793a      	ldrb	r2, [r7, #4]
 80019c6:	4619      	mov	r1, r3
 80019c8:	f7ff fb86 	bl	80010d8 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	79fa      	ldrb	r2, [r7, #7]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	b2d8      	uxtb	r0, r3
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	79ba      	ldrb	r2, [r7, #6]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	793a      	ldrb	r2, [r7, #4]
 80019e2:	4619      	mov	r1, r3
 80019e4:	f7ff fb78 	bl	80010d8 <ssd1306_DrawPixel>
        e2 = err;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 80019ec:	68ba      	ldr	r2, [r7, #8]
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	dc13      	bgt.n	8001a1c <ssd1306_DrawCircle+0xe4>
            y++;
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	3301      	adds	r3, #1
 80019f8:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	3301      	adds	r3, #1
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	4413      	add	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	425b      	negs	r3, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d105      	bne.n	8001a1c <ssd1306_DrawCircle+0xe4>
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	dc01      	bgt.n	8001a1c <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 8001a1c:	68ba      	ldr	r2, [r7, #8]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	dd08      	ble.n	8001a36 <ssd1306_DrawCircle+0xfe>
            x++;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	3301      	adds	r3, #1
 8001a28:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	3301      	adds	r3, #1
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	4413      	add	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	dd9d      	ble.n	8001978 <ssd1306_DrawCircle+0x40>

    return;
 8001a3c:	e000      	b.n	8001a40 <ssd1306_DrawCircle+0x108>
        return;
 8001a3e:	bf00      	nop
}
 8001a40:	371c      	adds	r7, #28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd90      	pop	{r4, r7, pc}

08001a46 <ssd1306_FillCircle>:

/* Draw filled circle. Pixel positions calculated using Bresenham's algorithm */
void ssd1306_FillCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8001a46:	b590      	push	{r4, r7, lr}
 8001a48:	b089      	sub	sp, #36	@ 0x24
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	4604      	mov	r4, r0
 8001a4e:	4608      	mov	r0, r1
 8001a50:	4611      	mov	r1, r2
 8001a52:	461a      	mov	r2, r3
 8001a54:	4623      	mov	r3, r4
 8001a56:	71fb      	strb	r3, [r7, #7]
 8001a58:	4603      	mov	r3, r0
 8001a5a:	71bb      	strb	r3, [r7, #6]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	717b      	strb	r3, [r7, #5]
 8001a60:	4613      	mov	r3, r2
 8001a62:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8001a64:	797b      	ldrb	r3, [r7, #5]
 8001a66:	425b      	negs	r3, r3
 8001a68:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
    int32_t err = 2 - 2 * par_r;
 8001a6e:	797b      	ldrb	r3, [r7, #5]
 8001a70:	f1c3 0301 	rsb	r3, r3, #1
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	617b      	str	r3, [r7, #20]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8001a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	db51      	blt.n	8001b24 <ssd1306_FillCircle+0xde>
 8001a80:	79bb      	ldrb	r3, [r7, #6]
 8001a82:	2b1f      	cmp	r3, #31
 8001a84:	d84e      	bhi.n	8001b24 <ssd1306_FillCircle+0xde>
        return;
    }

    do {
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	79bb      	ldrb	r3, [r7, #6]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	73fb      	strb	r3, [r7, #15]
 8001a90:	e017      	b.n	8001ac2 <ssd1306_FillCircle+0x7c>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	79fa      	ldrb	r2, [r7, #7]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	73bb      	strb	r3, [r7, #14]
 8001a9c:	e008      	b.n	8001ab0 <ssd1306_FillCircle+0x6a>
                ssd1306_DrawPixel(_x, _y, par_color);
 8001a9e:	793a      	ldrb	r2, [r7, #4]
 8001aa0:	7bf9      	ldrb	r1, [r7, #15]
 8001aa2:	7bbb      	ldrb	r3, [r7, #14]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fb17 	bl	80010d8 <ssd1306_DrawPixel>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 8001aaa:	7bbb      	ldrb	r3, [r7, #14]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	73bb      	strb	r3, [r7, #14]
 8001ab0:	7bba      	ldrb	r2, [r7, #14]
 8001ab2:	79f9      	ldrb	r1, [r7, #7]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	440b      	add	r3, r1
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	daf0      	bge.n	8001a9e <ssd1306_FillCircle+0x58>
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	73fb      	strb	r3, [r7, #15]
 8001ac2:	7bfa      	ldrb	r2, [r7, #15]
 8001ac4:	79b9      	ldrb	r1, [r7, #6]
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	1acb      	subs	r3, r1, r3
 8001aca:	429a      	cmp	r2, r3
 8001acc:	dae1      	bge.n	8001a92 <ssd1306_FillCircle+0x4c>
            }
        }

        e2 = err;
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	613b      	str	r3, [r7, #16]
        if (e2 <= y) {
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	dc13      	bgt.n	8001b02 <ssd1306_FillCircle+0xbc>
            y++;
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	3301      	adds	r3, #1
 8001ade:	61bb      	str	r3, [r7, #24]
            err = err + (y * 2 + 1);
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	4413      	add	r3, r2
 8001aea:	617b      	str	r3, [r7, #20]
            if (-x == y && e2 <= x) {
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	425b      	negs	r3, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d105      	bne.n	8001b02 <ssd1306_FillCircle+0xbc>
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	dc01      	bgt.n	8001b02 <ssd1306_FillCircle+0xbc>
                e2 = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
            }
        }

        if (e2 > x) {
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	dd08      	ble.n	8001b1c <ssd1306_FillCircle+0xd6>
            x++;
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	61fb      	str	r3, [r7, #28]
            err = err + (x * 2 + 1);
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	3301      	adds	r3, #1
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	4413      	add	r3, r2
 8001b1a:	617b      	str	r3, [r7, #20]
        }
    } while (x <= 0);
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	ddb1      	ble.n	8001a86 <ssd1306_FillCircle+0x40>

    return;
 8001b22:	e000      	b.n	8001b26 <ssd1306_FillCircle+0xe0>
        return;
 8001b24:	bf00      	nop
}
 8001b26:	3724      	adds	r7, #36	@ 0x24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd90      	pop	{r4, r7, pc}

08001b2c <ssd1306_DrawRectangle>:

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001b2c:	b590      	push	{r4, r7, lr}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af02      	add	r7, sp, #8
 8001b32:	4604      	mov	r4, r0
 8001b34:	4608      	mov	r0, r1
 8001b36:	4611      	mov	r1, r2
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4623      	mov	r3, r4
 8001b3c:	71fb      	strb	r3, [r7, #7]
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71bb      	strb	r3, [r7, #6]
 8001b42:	460b      	mov	r3, r1
 8001b44:	717b      	strb	r3, [r7, #5]
 8001b46:	4613      	mov	r3, r2
 8001b48:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8001b4a:	79bc      	ldrb	r4, [r7, #6]
 8001b4c:	797a      	ldrb	r2, [r7, #5]
 8001b4e:	79b9      	ldrb	r1, [r7, #6]
 8001b50:	79f8      	ldrb	r0, [r7, #7]
 8001b52:	7e3b      	ldrb	r3, [r7, #24]
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	4623      	mov	r3, r4
 8001b58:	f7ff fbe2 	bl	8001320 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8001b5c:	793c      	ldrb	r4, [r7, #4]
 8001b5e:	797a      	ldrb	r2, [r7, #5]
 8001b60:	79b9      	ldrb	r1, [r7, #6]
 8001b62:	7978      	ldrb	r0, [r7, #5]
 8001b64:	7e3b      	ldrb	r3, [r7, #24]
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	4623      	mov	r3, r4
 8001b6a:	f7ff fbd9 	bl	8001320 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8001b6e:	793c      	ldrb	r4, [r7, #4]
 8001b70:	79fa      	ldrb	r2, [r7, #7]
 8001b72:	7939      	ldrb	r1, [r7, #4]
 8001b74:	7978      	ldrb	r0, [r7, #5]
 8001b76:	7e3b      	ldrb	r3, [r7, #24]
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	4623      	mov	r3, r4
 8001b7c:	f7ff fbd0 	bl	8001320 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8001b80:	79bc      	ldrb	r4, [r7, #6]
 8001b82:	79fa      	ldrb	r2, [r7, #7]
 8001b84:	7939      	ldrb	r1, [r7, #4]
 8001b86:	79f8      	ldrb	r0, [r7, #7]
 8001b88:	7e3b      	ldrb	r3, [r7, #24]
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	4623      	mov	r3, r4
 8001b8e:	f7ff fbc7 	bl	8001320 <ssd1306_Line>

    return;
 8001b92:	bf00      	nop
}
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd90      	pop	{r4, r7, pc}

08001b9a <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001b9a:	b590      	push	{r4, r7, lr}
 8001b9c:	b085      	sub	sp, #20
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	4604      	mov	r4, r0
 8001ba2:	4608      	mov	r0, r1
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4623      	mov	r3, r4
 8001baa:	71fb      	strb	r3, [r7, #7]
 8001bac:	4603      	mov	r3, r0
 8001bae:	71bb      	strb	r3, [r7, #6]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	717b      	strb	r3, [r7, #5]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8001bb8:	79fa      	ldrb	r2, [r7, #7]
 8001bba:	797b      	ldrb	r3, [r7, #5]
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	bf28      	it	cs
 8001bc0:	4613      	movcs	r3, r2
 8001bc2:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8001bc4:	797a      	ldrb	r2, [r7, #5]
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	bf38      	it	cc
 8001bcc:	4613      	movcc	r3, r2
 8001bce:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8001bd0:	79ba      	ldrb	r2, [r7, #6]
 8001bd2:	793b      	ldrb	r3, [r7, #4]
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	bf28      	it	cs
 8001bd8:	4613      	movcs	r3, r2
 8001bda:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8001bdc:	793a      	ldrb	r2, [r7, #4]
 8001bde:	79bb      	ldrb	r3, [r7, #6]
 8001be0:	4293      	cmp	r3, r2
 8001be2:	bf38      	it	cc
 8001be4:	4613      	movcc	r3, r2
 8001be6:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001be8:	7afb      	ldrb	r3, [r7, #11]
 8001bea:	73fb      	strb	r3, [r7, #15]
 8001bec:	e017      	b.n	8001c1e <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001bee:	7b7b      	ldrb	r3, [r7, #13]
 8001bf0:	73bb      	strb	r3, [r7, #14]
 8001bf2:	e009      	b.n	8001c08 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8001bf4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001bf8:	7bf9      	ldrb	r1, [r7, #15]
 8001bfa:	7bbb      	ldrb	r3, [r7, #14]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff fa6b 	bl	80010d8 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001c02:	7bbb      	ldrb	r3, [r7, #14]
 8001c04:	3301      	adds	r3, #1
 8001c06:	73bb      	strb	r3, [r7, #14]
 8001c08:	7bba      	ldrb	r2, [r7, #14]
 8001c0a:	7b3b      	ldrb	r3, [r7, #12]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d803      	bhi.n	8001c18 <ssd1306_FillRectangle+0x7e>
 8001c10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	daed      	bge.n	8001bf4 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	73fb      	strb	r3, [r7, #15]
 8001c1e:	7bfa      	ldrb	r2, [r7, #15]
 8001c20:	7abb      	ldrb	r3, [r7, #10]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d803      	bhi.n	8001c2e <ssd1306_FillRectangle+0x94>
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
 8001c28:	2b1f      	cmp	r3, #31
 8001c2a:	d9e0      	bls.n	8001bee <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
}
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd90      	pop	{r4, r7, pc}
	...

08001c38 <ssd1306_InvertRectangle>:

SSD1306_Error_t ssd1306_InvertRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 8001c38:	b490      	push	{r4, r7}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4604      	mov	r4, r0
 8001c40:	4608      	mov	r0, r1
 8001c42:	4611      	mov	r1, r2
 8001c44:	461a      	mov	r2, r3
 8001c46:	4623      	mov	r3, r4
 8001c48:	71fb      	strb	r3, [r7, #7]
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	71bb      	strb	r3, [r7, #6]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	717b      	strb	r3, [r7, #5]
 8001c52:	4613      	mov	r3, r2
 8001c54:	713b      	strb	r3, [r7, #4]
  if ((x2 >= SSD1306_WIDTH) || (y2 >= SSD1306_HEIGHT)) {
 8001c56:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	db02      	blt.n	8001c64 <ssd1306_InvertRectangle+0x2c>
 8001c5e:	793b      	ldrb	r3, [r7, #4]
 8001c60:	2b1f      	cmp	r3, #31
 8001c62:	d901      	bls.n	8001c68 <ssd1306_InvertRectangle+0x30>
    return SSD1306_ERR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e09c      	b.n	8001da2 <ssd1306_InvertRectangle+0x16a>
  }
  if ((x1 > x2) || (y1 > y2)) {
 8001c68:	79fa      	ldrb	r2, [r7, #7]
 8001c6a:	797b      	ldrb	r3, [r7, #5]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d803      	bhi.n	8001c78 <ssd1306_InvertRectangle+0x40>
 8001c70:	79ba      	ldrb	r2, [r7, #6]
 8001c72:	793b      	ldrb	r3, [r7, #4]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d901      	bls.n	8001c7c <ssd1306_InvertRectangle+0x44>
    return SSD1306_ERR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e092      	b.n	8001da2 <ssd1306_InvertRectangle+0x16a>
  }
  uint32_t i;
  if ((y1 / 8) != (y2 / 8)) {
 8001c7c:	79bb      	ldrb	r3, [r7, #6]
 8001c7e:	08db      	lsrs	r3, r3, #3
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	793b      	ldrb	r3, [r7, #4]
 8001c84:	08db      	lsrs	r3, r3, #3
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d057      	beq.n	8001d3c <ssd1306_InvertRectangle+0x104>
    /* if rectangle doesn't lie on one 8px row */
    for (uint32_t x = x1; x <= x2; x++) {
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	e04f      	b.n	8001d32 <ssd1306_InvertRectangle+0xfa>
      i = x + (y1 / 8) * SSD1306_WIDTH;
 8001c92:	79bb      	ldrb	r3, [r7, #6]
 8001c94:	08db      	lsrs	r3, r3, #3
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	01db      	lsls	r3, r3, #7
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	617b      	str	r3, [r7, #20]
      SSD1306_Buffer[i] ^= 0xFF << (y1 % 8);
 8001ca2:	4a42      	ldr	r2, [pc, #264]	@ (8001dac <ssd1306_InvertRectangle+0x174>)
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	b25a      	sxtb	r2, r3
 8001cac:	79bb      	ldrb	r3, [r7, #6]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	21ff      	movs	r1, #255	@ 0xff
 8001cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb8:	b25b      	sxtb	r3, r3
 8001cba:	4053      	eors	r3, r2
 8001cbc:	b25b      	sxtb	r3, r3
 8001cbe:	b2d9      	uxtb	r1, r3
 8001cc0:	4a3a      	ldr	r2, [pc, #232]	@ (8001dac <ssd1306_InvertRectangle+0x174>)
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	460a      	mov	r2, r1
 8001cc8:	701a      	strb	r2, [r3, #0]
      i += SSD1306_WIDTH;
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	3380      	adds	r3, #128	@ 0x80
 8001cce:	617b      	str	r3, [r7, #20]
      for (; i < x + (y2 / 8) * SSD1306_WIDTH; i += SSD1306_WIDTH) {
 8001cd0:	e00d      	b.n	8001cee <ssd1306_InvertRectangle+0xb6>
        SSD1306_Buffer[i] ^= 0xFF;
 8001cd2:	4a36      	ldr	r2, [pc, #216]	@ (8001dac <ssd1306_InvertRectangle+0x174>)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	b2d9      	uxtb	r1, r3
 8001cde:	4a33      	ldr	r2, [pc, #204]	@ (8001dac <ssd1306_InvertRectangle+0x174>)
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	460a      	mov	r2, r1
 8001ce6:	701a      	strb	r2, [r3, #0]
      for (; i < x + (y2 / 8) * SSD1306_WIDTH; i += SSD1306_WIDTH) {
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	3380      	adds	r3, #128	@ 0x80
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	793b      	ldrb	r3, [r7, #4]
 8001cf0:	08db      	lsrs	r3, r3, #3
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	01db      	lsls	r3, r3, #7
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d3e7      	bcc.n	8001cd2 <ssd1306_InvertRectangle+0x9a>
      }
      SSD1306_Buffer[i] ^= 0xFF >> (7 - (y2 % 8));
 8001d02:	4a2a      	ldr	r2, [pc, #168]	@ (8001dac <ssd1306_InvertRectangle+0x174>)
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	4413      	add	r3, r2
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	b25a      	sxtb	r2, r3
 8001d0c:	793b      	ldrb	r3, [r7, #4]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	21ff      	movs	r1, #255	@ 0xff
 8001d16:	fa41 f303 	asr.w	r3, r1, r3
 8001d1a:	b25b      	sxtb	r3, r3
 8001d1c:	4053      	eors	r3, r2
 8001d1e:	b25b      	sxtb	r3, r3
 8001d20:	b2d9      	uxtb	r1, r3
 8001d22:	4a22      	ldr	r2, [pc, #136]	@ (8001dac <ssd1306_InvertRectangle+0x174>)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	4413      	add	r3, r2
 8001d28:	460a      	mov	r2, r1
 8001d2a:	701a      	strb	r2, [r3, #0]
    for (uint32_t x = x1; x <= x2; x++) {
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	797b      	ldrb	r3, [r7, #5]
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d9ab      	bls.n	8001c92 <ssd1306_InvertRectangle+0x5a>
 8001d3a:	e031      	b.n	8001da0 <ssd1306_InvertRectangle+0x168>
    }
  } else {
    /* if rectangle lies on one 8px row */
    const uint8_t mask = (0xFF << (y1 % 8)) & (0xFF >> (7 - (y2 % 8)));
 8001d3c:	79bb      	ldrb	r3, [r7, #6]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	22ff      	movs	r2, #255	@ 0xff
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	b25a      	sxtb	r2, r3
 8001d4a:	793b      	ldrb	r3, [r7, #4]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	21ff      	movs	r1, #255	@ 0xff
 8001d54:	fa41 f303 	asr.w	r3, r1, r3
 8001d58:	b25b      	sxtb	r3, r3
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	b25b      	sxtb	r3, r3
 8001d5e:	73fb      	strb	r3, [r7, #15]
    for (i = x1 + (y1 / 8) * SSD1306_WIDTH;
 8001d60:	79fa      	ldrb	r2, [r7, #7]
 8001d62:	79bb      	ldrb	r3, [r7, #6]
 8001d64:	08db      	lsrs	r3, r3, #3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	01db      	lsls	r3, r3, #7
 8001d6a:	4413      	add	r3, r2
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	e00e      	b.n	8001d8e <ssd1306_InvertRectangle+0x156>
         i <= (uint32_t)x2 + (y2 / 8) * SSD1306_WIDTH; i++) {
      SSD1306_Buffer[i] ^= mask;
 8001d70:	4a0e      	ldr	r2, [pc, #56]	@ (8001dac <ssd1306_InvertRectangle+0x174>)
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	4413      	add	r3, r2
 8001d76:	781a      	ldrb	r2, [r3, #0]
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	4053      	eors	r3, r2
 8001d7c:	b2d9      	uxtb	r1, r3
 8001d7e:	4a0b      	ldr	r2, [pc, #44]	@ (8001dac <ssd1306_InvertRectangle+0x174>)
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	4413      	add	r3, r2
 8001d84:	460a      	mov	r2, r1
 8001d86:	701a      	strb	r2, [r3, #0]
         i <= (uint32_t)x2 + (y2 / 8) * SSD1306_WIDTH; i++) {
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	797b      	ldrb	r3, [r7, #5]
 8001d90:	793a      	ldrb	r2, [r7, #4]
 8001d92:	08d2      	lsrs	r2, r2, #3
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	01d2      	lsls	r2, r2, #7
 8001d98:	4413      	add	r3, r2
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d9e7      	bls.n	8001d70 <ssd1306_InvertRectangle+0x138>
    }
  }
  return SSD1306_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc90      	pop	{r4, r7}
 8001daa:	4770      	bx	lr
 8001dac:	200000cc 	.word	0x200000cc

08001db0 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	603a      	str	r2, [r7, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	71bb      	strb	r3, [r7, #6]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001dc6:	797b      	ldrb	r3, [r7, #5]
 8001dc8:	3307      	adds	r3, #7
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	da00      	bge.n	8001dd0 <ssd1306_DrawBitmap+0x20>
 8001dce:	3307      	adds	r3, #7
 8001dd0:	10db      	asrs	r3, r3, #3
 8001dd2:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	db3e      	blt.n	8001e5e <ssd1306_DrawBitmap+0xae>
 8001de0:	79bb      	ldrb	r3, [r7, #6]
 8001de2:	2b1f      	cmp	r3, #31
 8001de4:	d83b      	bhi.n	8001e5e <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8001de6:	2300      	movs	r3, #0
 8001de8:	73bb      	strb	r3, [r7, #14]
 8001dea:	e033      	b.n	8001e54 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8001dec:	2300      	movs	r3, #0
 8001dee:	737b      	strb	r3, [r7, #13]
 8001df0:	e026      	b.n	8001e40 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8001df2:	7b7b      	ldrb	r3, [r7, #13]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	73fb      	strb	r3, [r7, #15]
 8001e02:	e00d      	b.n	8001e20 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001e04:	7bbb      	ldrb	r3, [r7, #14]
 8001e06:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001e0a:	fb02 f303 	mul.w	r3, r2, r3
 8001e0e:	7b7a      	ldrb	r2, [r7, #13]
 8001e10:	08d2      	lsrs	r2, r2, #3
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	4413      	add	r3, r2
 8001e16:	461a      	mov	r2, r3
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8001e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	da08      	bge.n	8001e3a <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8001e28:	79fa      	ldrb	r2, [r7, #7]
 8001e2a:	7b7b      	ldrb	r3, [r7, #13]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	7f3a      	ldrb	r2, [r7, #28]
 8001e32:	79b9      	ldrb	r1, [r7, #6]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff f94f 	bl	80010d8 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8001e3a:	7b7b      	ldrb	r3, [r7, #13]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	737b      	strb	r3, [r7, #13]
 8001e40:	7b7a      	ldrb	r2, [r7, #13]
 8001e42:	797b      	ldrb	r3, [r7, #5]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d3d4      	bcc.n	8001df2 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8001e48:	7bbb      	ldrb	r3, [r7, #14]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	73bb      	strb	r3, [r7, #14]
 8001e4e:	79bb      	ldrb	r3, [r7, #6]
 8001e50:	3301      	adds	r3, #1
 8001e52:	71bb      	strb	r3, [r7, #6]
 8001e54:	7bba      	ldrb	r2, [r7, #14]
 8001e56:	7e3b      	ldrb	r3, [r7, #24]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d3c7      	bcc.n	8001dec <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8001e5c:	e000      	b.n	8001e60 <ssd1306_DrawBitmap+0xb0>
        return;
 8001e5e:	bf00      	nop
}
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b084      	sub	sp, #16
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001e70:	2381      	movs	r3, #129	@ 0x81
 8001e72:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff f852 	bl	8000f20 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff f84e 	bl	8000f20 <ssd1306_WriteCommand>
}
 8001e84:	bf00      	nop
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d005      	beq.n	8001ea8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001e9c:	23af      	movs	r3, #175	@ 0xaf
 8001e9e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001ea0:	4b08      	ldr	r3, [pc, #32]	@ (8001ec4 <ssd1306_SetDisplayOn+0x38>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	715a      	strb	r2, [r3, #5]
 8001ea6:	e004      	b.n	8001eb2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001ea8:	23ae      	movs	r3, #174	@ 0xae
 8001eaa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001eac:	4b05      	ldr	r3, [pc, #20]	@ (8001ec4 <ssd1306_SetDisplayOn+0x38>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff f833 	bl	8000f20 <ssd1306_WriteCommand>
}
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200002cc 	.word	0x200002cc

08001ec8 <ssd1306_TestBorder>:
0x00, 0x03, 0xFF, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00,
0x00, 0x00, 0x3F, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0xF0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void ssd1306_TestBorder() {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f7ff f8c2 	bl	8001058 <ssd1306_Fill>
   
    uint8_t x = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	71fb      	strb	r3, [r7, #7]
    uint8_t y = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	71bb      	strb	r3, [r7, #6]
    do {
        ssd1306_DrawPixel(x, y, Black);
 8001edc:	79b9      	ldrb	r1, [r7, #6]
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff f8f8 	bl	80010d8 <ssd1306_DrawPixel>

        if((y == 0) && (x < (SSD1306_WIDTH-1)))
 8001ee8:	79bb      	ldrb	r3, [r7, #6]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d106      	bne.n	8001efc <ssd1306_TestBorder+0x34>
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	2b7e      	cmp	r3, #126	@ 0x7e
 8001ef2:	d803      	bhi.n	8001efc <ssd1306_TestBorder+0x34>
            x++;
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	71fb      	strb	r3, [r7, #7]
 8001efa:	e016      	b.n	8001f2a <ssd1306_TestBorder+0x62>
        else if((x == (SSD1306_WIDTH-1)) && (y < (SSD1306_HEIGHT-1)))
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f00:	d106      	bne.n	8001f10 <ssd1306_TestBorder+0x48>
 8001f02:	79bb      	ldrb	r3, [r7, #6]
 8001f04:	2b1e      	cmp	r3, #30
 8001f06:	d803      	bhi.n	8001f10 <ssd1306_TestBorder+0x48>
            y++;
 8001f08:	79bb      	ldrb	r3, [r7, #6]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	71bb      	strb	r3, [r7, #6]
 8001f0e:	e00c      	b.n	8001f2a <ssd1306_TestBorder+0x62>
        else if((y == (SSD1306_HEIGHT-1)) && (x > 0)) 
 8001f10:	79bb      	ldrb	r3, [r7, #6]
 8001f12:	2b1f      	cmp	r3, #31
 8001f14:	d106      	bne.n	8001f24 <ssd1306_TestBorder+0x5c>
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <ssd1306_TestBorder+0x5c>
            x--;
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	71fb      	strb	r3, [r7, #7]
 8001f22:	e002      	b.n	8001f2a <ssd1306_TestBorder+0x62>
        else
            y--;
 8001f24:	79bb      	ldrb	r3, [r7, #6]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	71bb      	strb	r3, [r7, #6]

        ssd1306_DrawPixel(x, y, White);
 8001f2a:	79b9      	ldrb	r1, [r7, #6]
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff f8d1 	bl	80010d8 <ssd1306_DrawPixel>
        ssd1306_UpdateScreen();
 8001f36:	f7ff f8a7 	bl	8001088 <ssd1306_UpdateScreen>
    
        HAL_Delay(5);
 8001f3a:	2005      	movs	r0, #5
 8001f3c:	f000 fcdc 	bl	80028f8 <HAL_Delay>
    } while(x > 0 || y > 0);
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1ca      	bne.n	8001edc <ssd1306_TestBorder+0x14>
 8001f46:	79bb      	ldrb	r3, [r7, #6]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1c7      	bne.n	8001edc <ssd1306_TestBorder+0x14>
   
    HAL_Delay(1000);
 8001f4c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f50:	f000 fcd2 	bl	80028f8 <HAL_Delay>
}
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <ssd1306_TestFonts1>:

void ssd1306_TestFonts1() {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af02      	add	r7, sp, #8
    uint8_t y = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	71fb      	strb	r3, [r7, #7]
    ssd1306_Fill(Black);
 8001f66:	2000      	movs	r0, #0
 8001f68:	f7ff f876 	bl	8001058 <ssd1306_Fill>

    #ifdef SSD1306_INCLUDE_FONT_16x26
    ssd1306_SetCursor(2, y);
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	4619      	mov	r1, r3
 8001f70:	2002      	movs	r0, #2
 8001f72:	f7ff f9bd 	bl	80012f0 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White);
 8001f76:	4b1d      	ldr	r3, [pc, #116]	@ (8001fec <ssd1306_TestFonts1+0x90>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	9200      	str	r2, [sp, #0]
 8001f7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f7e:	481c      	ldr	r0, [pc, #112]	@ (8001ff0 <ssd1306_TestFonts1+0x94>)
 8001f80:	f7ff f990 	bl	80012a4 <ssd1306_WriteString>
    y += 26;
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	331a      	adds	r3, #26
 8001f88:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	2002      	movs	r0, #2
 8001f90:	f7ff f9ae 	bl	80012f0 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White);
 8001f94:	4b17      	ldr	r3, [pc, #92]	@ (8001ff4 <ssd1306_TestFonts1+0x98>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	9200      	str	r2, [sp, #0]
 8001f9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f9c:	4816      	ldr	r0, [pc, #88]	@ (8001ff8 <ssd1306_TestFonts1+0x9c>)
 8001f9e:	f7ff f981 	bl	80012a4 <ssd1306_WriteString>
    y += 18;
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	3312      	adds	r3, #18
 8001fa6:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	4619      	mov	r1, r3
 8001fac:	2002      	movs	r0, #2
 8001fae:	f7ff f99f 	bl	80012f0 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White);
 8001fb2:	4b12      	ldr	r3, [pc, #72]	@ (8001ffc <ssd1306_TestFonts1+0xa0>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	9200      	str	r2, [sp, #0]
 8001fb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fba:	4811      	ldr	r0, [pc, #68]	@ (8002000 <ssd1306_TestFonts1+0xa4>)
 8001fbc:	f7ff f972 	bl	80012a4 <ssd1306_WriteString>
    y += 10;
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	330a      	adds	r3, #10
 8001fc4:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_6x8
    ssd1306_SetCursor(2, y);
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	4619      	mov	r1, r3
 8001fca:	2002      	movs	r0, #2
 8001fcc:	f7ff f990 	bl	80012f0 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 6x8", Font_6x8, White);
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002004 <ssd1306_TestFonts1+0xa8>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	9200      	str	r2, [sp, #0]
 8001fd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fd8:	480b      	ldr	r0, [pc, #44]	@ (8002008 <ssd1306_TestFonts1+0xac>)
 8001fda:	f7ff f963 	bl	80012a4 <ssd1306_WriteString>
    #endif

    ssd1306_UpdateScreen();
 8001fde:	f7ff f853 	bl	8001088 <ssd1306_UpdateScreen>
}
 8001fe2:	bf00      	nop
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	0800a0a4 	.word	0x0800a0a4
 8001ff0:	08005460 	.word	0x08005460
 8001ff4:	0800a098 	.word	0x0800a098
 8001ff8:	0800546c 	.word	0x0800546c
 8001ffc:	0800a08c 	.word	0x0800a08c
 8002000:	08005478 	.word	0x08005478
 8002004:	0800a080 	.word	0x0800a080
 8002008:	08005484 	.word	0x08005484

0800200c <ssd1306_TestFonts2>:

/*
 * This test shows how an 128x64 px OLED can replace a 0802 LCD.
 */
void ssd1306_TestFonts2() {
 800200c:	b590      	push	{r4, r7, lr}
 800200e:	b085      	sub	sp, #20
 8002010:	af02      	add	r7, sp, #8
#ifdef SSD1306_INCLUDE_FONT_16x24
    uint8_t x1, y1, x2, y2;

    ssd1306_Fill(Black);
 8002012:	2000      	movs	r0, #0
 8002014:	f7ff f820 	bl	8001058 <ssd1306_Fill>

    ssd1306_SetCursor(0, 4);
 8002018:	2104      	movs	r1, #4
 800201a:	2000      	movs	r0, #0
 800201c:	f7ff f968 	bl	80012f0 <ssd1306_SetCursor>
    ssd1306_WriteString("18.092.5", Font_16x24, White);
 8002020:	4b14      	ldr	r3, [pc, #80]	@ (8002074 <ssd1306_TestFonts2+0x68>)
 8002022:	2201      	movs	r2, #1
 8002024:	9200      	str	r2, [sp, #0]
 8002026:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002028:	4813      	ldr	r0, [pc, #76]	@ (8002078 <ssd1306_TestFonts2+0x6c>)
 800202a:	f7ff f93b 	bl	80012a4 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 4+24+8);
 800202e:	2124      	movs	r1, #36	@ 0x24
 8002030:	2000      	movs	r0, #0
 8002032:	f7ff f95d 	bl	80012f0 <ssd1306_SetCursor>
    ssd1306_WriteString("RIT+1000", Font_16x24, White);
 8002036:	4b0f      	ldr	r3, [pc, #60]	@ (8002074 <ssd1306_TestFonts2+0x68>)
 8002038:	2201      	movs	r2, #1
 800203a:	9200      	str	r2, [sp, #0]
 800203c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800203e:	480f      	ldr	r0, [pc, #60]	@ (800207c <ssd1306_TestFonts2+0x70>)
 8002040:	f7ff f930 	bl	80012a4 <ssd1306_WriteString>

    // underline
    x1 = 6*16;
 8002044:	2360      	movs	r3, #96	@ 0x60
 8002046:	71fb      	strb	r3, [r7, #7]
    y1 = 4+24+8+24;
 8002048:	233c      	movs	r3, #60	@ 0x3c
 800204a:	71bb      	strb	r3, [r7, #6]
    x2 = x1+16;
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	3310      	adds	r3, #16
 8002050:	717b      	strb	r3, [r7, #5]
    y2 = y1+2;
 8002052:	79bb      	ldrb	r3, [r7, #6]
 8002054:	3302      	adds	r3, #2
 8002056:	713b      	strb	r3, [r7, #4]
    ssd1306_FillRectangle(x1, y1, x2, y2, White);
 8002058:	793b      	ldrb	r3, [r7, #4]
 800205a:	797a      	ldrb	r2, [r7, #5]
 800205c:	79b9      	ldrb	r1, [r7, #6]
 800205e:	79f8      	ldrb	r0, [r7, #7]
 8002060:	2401      	movs	r4, #1
 8002062:	9400      	str	r4, [sp, #0]
 8002064:	f7ff fd99 	bl	8001b9a <ssd1306_FillRectangle>

    ssd1306_UpdateScreen();
 8002068:	f7ff f80e 	bl	8001088 <ssd1306_UpdateScreen>
#endif
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	bd90      	pop	{r4, r7, pc}
 8002074:	0800a0b0 	.word	0x0800a0b0
 8002078:	08005490 	.word	0x08005490
 800207c:	0800549c 	.word	0x0800549c

08002080 <ssd1306_TestFonts3>:

/*
 * Test of proportional (non-monospaced) font.
 */
void ssd1306_TestFonts3() {
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 8002086:	2000      	movs	r0, #0
 8002088:	f7fe ffe6 	bl	8001058 <ssd1306_Fill>
#ifdef SSD1306_INCLUDE_FONT_16x15
    ssd1306_SetCursor(4, 4);
 800208c:	2104      	movs	r1, #4
 800208e:	2004      	movs	r0, #4
 8002090:	f7ff f92e 	bl	80012f0 <ssd1306_SetCursor>
    ssd1306_WriteString("Proportional", Font_16x15, White);
 8002094:	4b10      	ldr	r3, [pc, #64]	@ (80020d8 <ssd1306_TestFonts3+0x58>)
 8002096:	2201      	movs	r2, #1
 8002098:	9200      	str	r2, [sp, #0]
 800209a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800209c:	480f      	ldr	r0, [pc, #60]	@ (80020dc <ssd1306_TestFonts3+0x5c>)
 800209e:	f7ff f901 	bl	80012a4 <ssd1306_WriteString>
    ssd1306_SetCursor(4, 24);
 80020a2:	2118      	movs	r1, #24
 80020a4:	2004      	movs	r0, #4
 80020a6:	f7ff f923 	bl	80012f0 <ssd1306_SetCursor>
    ssd1306_WriteString("text... Sweet!", Font_16x15, White);
 80020aa:	4b0b      	ldr	r3, [pc, #44]	@ (80020d8 <ssd1306_TestFonts3+0x58>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	9200      	str	r2, [sp, #0]
 80020b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020b2:	480b      	ldr	r0, [pc, #44]	@ (80020e0 <ssd1306_TestFonts3+0x60>)
 80020b4:	f7ff f8f6 	bl	80012a4 <ssd1306_WriteString>
    ssd1306_SetCursor(4, 44);
 80020b8:	212c      	movs	r1, #44	@ 0x2c
 80020ba:	2004      	movs	r0, #4
 80020bc:	f7ff f918 	bl	80012f0 <ssd1306_SetCursor>
    ssd1306_WriteString("3.1415  04:20", Font_16x15, White);
 80020c0:	4b05      	ldr	r3, [pc, #20]	@ (80020d8 <ssd1306_TestFonts3+0x58>)
 80020c2:	2201      	movs	r2, #1
 80020c4:	9200      	str	r2, [sp, #0]
 80020c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020c8:	4806      	ldr	r0, [pc, #24]	@ (80020e4 <ssd1306_TestFonts3+0x64>)
 80020ca:	f7ff f8eb 	bl	80012a4 <ssd1306_WriteString>
    ssd1306_SetCursor(4, 24);
    ssd1306_WriteString("Font not", Font_11x18, White);
    ssd1306_SetCursor(4, 44);
    ssd1306_WriteString("included!", Font_11x18, White);
#endif
    ssd1306_UpdateScreen();
 80020ce:	f7fe ffdb 	bl	8001088 <ssd1306_UpdateScreen>
}
 80020d2:	bf00      	nop
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	0800a0bc 	.word	0x0800a0bc
 80020dc:	080054a8 	.word	0x080054a8
 80020e0:	080054b8 	.word	0x080054b8
 80020e4:	080054c8 	.word	0x080054c8

080020e8 <ssd1306_TestFPS>:

void ssd1306_TestFPS() {
 80020e8:	b5b0      	push	{r4, r5, r7, lr}
 80020ea:	b09a      	sub	sp, #104	@ 0x68
 80020ec:	af02      	add	r7, sp, #8
    ssd1306_Fill(White);
 80020ee:	2001      	movs	r0, #1
 80020f0:	f7fe ffb2 	bl	8001058 <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 80020f4:	f000 fbf4 	bl	80028e0 <HAL_GetTick>
 80020f8:	65b8      	str	r0, [r7, #88]	@ 0x58
    uint32_t end = start;
 80020fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80020fc:	657b      	str	r3, [r7, #84]	@ 0x54
    int fps = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	65fb      	str	r3, [r7, #92]	@ 0x5c
    char message[] = "ABCDEFGHIJK";
 8002102:	4a45      	ldr	r2, [pc, #276]	@ (8002218 <ssd1306_TestFPS+0x130>)
 8002104:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002108:	ca07      	ldmia	r2, {r0, r1, r2}
 800210a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   
    ssd1306_SetCursor(2,0);
 800210e:	2100      	movs	r1, #0
 8002110:	2002      	movs	r0, #2
 8002112:	f7ff f8ed 	bl	80012f0 <ssd1306_SetCursor>
    ssd1306_WriteString("Testing...", Font_11x18, Black);
 8002116:	4b41      	ldr	r3, [pc, #260]	@ (800221c <ssd1306_TestFPS+0x134>)
 8002118:	2200      	movs	r2, #0
 800211a:	9200      	str	r2, [sp, #0]
 800211c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800211e:	4840      	ldr	r0, [pc, #256]	@ (8002220 <ssd1306_TestFPS+0x138>)
 8002120:	f7ff f8c0 	bl	80012a4 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 18*2);
 8002124:	2124      	movs	r1, #36	@ 0x24
 8002126:	2002      	movs	r0, #2
 8002128:	f7ff f8e2 	bl	80012f0 <ssd1306_SetCursor>
    ssd1306_WriteString("0123456789A", Font_11x18, Black);
 800212c:	4b3b      	ldr	r3, [pc, #236]	@ (800221c <ssd1306_TestFPS+0x134>)
 800212e:	2200      	movs	r2, #0
 8002130:	9200      	str	r2, [sp, #0]
 8002132:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002134:	483b      	ldr	r0, [pc, #236]	@ (8002224 <ssd1306_TestFPS+0x13c>)
 8002136:	f7ff f8b5 	bl	80012a4 <ssd1306_WriteString>
   
    do {
        ssd1306_SetCursor(2, 18);
 800213a:	2112      	movs	r1, #18
 800213c:	2002      	movs	r0, #2
 800213e:	f7ff f8d7 	bl	80012f0 <ssd1306_SetCursor>
        ssd1306_WriteString(message, Font_11x18, Black);
 8002142:	4b36      	ldr	r3, [pc, #216]	@ (800221c <ssd1306_TestFPS+0x134>)
 8002144:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8002148:	2200      	movs	r2, #0
 800214a:	9200      	str	r2, [sp, #0]
 800214c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800214e:	f7ff f8a9 	bl	80012a4 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 8002152:	f7fe ff99 	bl	8001088 <ssd1306_UpdateScreen>
       
        char ch = message[0];
 8002156:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800215a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        memmove(message, message+1, sizeof(message)-2);
 800215e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002162:	3301      	adds	r3, #1
 8002164:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8002168:	220a      	movs	r2, #10
 800216a:	4619      	mov	r1, r3
 800216c:	f001 ff7a 	bl	8004064 <memmove>
        message[sizeof(message)-2] = ch;
 8002170:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002174:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

        fps++;
 8002178:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800217a:	3301      	adds	r3, #1
 800217c:	65fb      	str	r3, [r7, #92]	@ 0x5c
        end = HAL_GetTick();
 800217e:	f000 fbaf 	bl	80028e0 <HAL_GetTick>
 8002182:	6578      	str	r0, [r7, #84]	@ 0x54
    } while((end - start) < 5000);
 8002184:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002186:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800218e:	4293      	cmp	r3, r2
 8002190:	d9d3      	bls.n	800213a <ssd1306_TestFPS+0x52>
   
    HAL_Delay(5000);
 8002192:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002196:	f000 fbaf 	bl	80028f8 <HAL_Delay>

    char buff[64];
    fps = (float)fps / ((end - start) / 1000.0);
 800219a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800219c:	ee07 3a90 	vmov	s15, r3
 80021a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021a4:	ee17 0a90 	vmov	r0, s15
 80021a8:	f7fe f9ce 	bl	8000548 <__aeabi_f2d>
 80021ac:	4604      	mov	r4, r0
 80021ae:	460d      	mov	r5, r1
 80021b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80021b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe f9a4 	bl	8000504 <__aeabi_ui2d>
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	4b19      	ldr	r3, [pc, #100]	@ (8002228 <ssd1306_TestFPS+0x140>)
 80021c2:	f7fe fb43 	bl	800084c <__aeabi_ddiv>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	4620      	mov	r0, r4
 80021cc:	4629      	mov	r1, r5
 80021ce:	f7fe fb3d 	bl	800084c <__aeabi_ddiv>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	4610      	mov	r0, r2
 80021d8:	4619      	mov	r1, r3
 80021da:	f7fe fc1f 	bl	8000a1c <__aeabi_d2iz>
 80021de:	4603      	mov	r3, r0
 80021e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    snprintf(buff, sizeof(buff), "~%d FPS", fps);
 80021e2:	1d38      	adds	r0, r7, #4
 80021e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021e6:	4a11      	ldr	r2, [pc, #68]	@ (800222c <ssd1306_TestFPS+0x144>)
 80021e8:	2140      	movs	r1, #64	@ 0x40
 80021ea:	f001 ff05 	bl	8003ff8 <sniprintf>
   
    ssd1306_Fill(White);
 80021ee:	2001      	movs	r0, #1
 80021f0:	f7fe ff32 	bl	8001058 <ssd1306_Fill>
    ssd1306_SetCursor(2, 2);
 80021f4:	2102      	movs	r1, #2
 80021f6:	2002      	movs	r0, #2
 80021f8:	f7ff f87a 	bl	80012f0 <ssd1306_SetCursor>
    ssd1306_WriteString(buff, Font_11x18, Black);
 80021fc:	4b07      	ldr	r3, [pc, #28]	@ (800221c <ssd1306_TestFPS+0x134>)
 80021fe:	1d38      	adds	r0, r7, #4
 8002200:	2200      	movs	r2, #0
 8002202:	9200      	str	r2, [sp, #0]
 8002204:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002206:	f7ff f84d 	bl	80012a4 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 800220a:	f7fe ff3d 	bl	8001088 <ssd1306_UpdateScreen>
}
 800220e:	bf00      	nop
 8002210:	3760      	adds	r7, #96	@ 0x60
 8002212:	46bd      	mov	sp, r7
 8002214:	bdb0      	pop	{r4, r5, r7, pc}
 8002216:	bf00      	nop
 8002218:	080054f8 	.word	0x080054f8
 800221c:	0800a098 	.word	0x0800a098
 8002220:	080054d8 	.word	0x080054d8
 8002224:	080054e4 	.word	0x080054e4
 8002228:	408f4000 	.word	0x408f4000
 800222c:	080054f0 	.word	0x080054f0

08002230 <ssd1306_TestLine>:

void ssd1306_TestLine() {
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af02      	add	r7, sp, #8

  ssd1306_Line(1,1,SSD1306_WIDTH - 1,SSD1306_HEIGHT - 1,White);
 8002236:	2301      	movs	r3, #1
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	231f      	movs	r3, #31
 800223c:	227f      	movs	r2, #127	@ 0x7f
 800223e:	2101      	movs	r1, #1
 8002240:	2001      	movs	r0, #1
 8002242:	f7ff f86d 	bl	8001320 <ssd1306_Line>
  ssd1306_Line(SSD1306_WIDTH - 1,1,1,SSD1306_HEIGHT - 1,White);
 8002246:	2301      	movs	r3, #1
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	231f      	movs	r3, #31
 800224c:	2201      	movs	r2, #1
 800224e:	2101      	movs	r1, #1
 8002250:	207f      	movs	r0, #127	@ 0x7f
 8002252:	f7ff f865 	bl	8001320 <ssd1306_Line>
  ssd1306_UpdateScreen();
 8002256:	f7fe ff17 	bl	8001088 <ssd1306_UpdateScreen>
  return;
 800225a:	bf00      	nop
}
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <ssd1306_TestRectangle>:

void ssd1306_TestRectangle() {
 8002260:	b590      	push	{r4, r7, lr}
 8002262:	b085      	sub	sp, #20
 8002264:	af02      	add	r7, sp, #8
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 8002266:	2300      	movs	r3, #0
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	e028      	b.n	80022be <ssd1306_TestRectangle+0x5e>
    ssd1306_DrawRectangle(1 + (5*delta),1 + (5*delta) ,SSD1306_WIDTH-1 - (5*delta),SSD1306_HEIGHT-1 - (5*delta),White);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	b2db      	uxtb	r3, r3
 8002270:	461a      	mov	r2, r3
 8002272:	0092      	lsls	r2, r2, #2
 8002274:	4413      	add	r3, r2
 8002276:	b2db      	uxtb	r3, r3
 8002278:	3301      	adds	r3, #1
 800227a:	b2d8      	uxtb	r0, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	b2db      	uxtb	r3, r3
 8002280:	461a      	mov	r2, r3
 8002282:	0092      	lsls	r2, r2, #2
 8002284:	4413      	add	r3, r2
 8002286:	b2db      	uxtb	r3, r3
 8002288:	3301      	adds	r3, #1
 800228a:	b2d9      	uxtb	r1, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	461a      	mov	r2, r3
 8002292:	0092      	lsls	r2, r2, #2
 8002294:	4413      	add	r3, r2
 8002296:	b2db      	uxtb	r3, r3
 8002298:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800229c:	b2da      	uxtb	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	461c      	mov	r4, r3
 80022a4:	00a4      	lsls	r4, r4, #2
 80022a6:	4423      	add	r3, r4
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	f1c3 031f 	rsb	r3, r3, #31
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2401      	movs	r4, #1
 80022b2:	9400      	str	r4, [sp, #0]
 80022b4:	f7ff fc3a 	bl	8001b2c <ssd1306_DrawRectangle>
  for(delta = 0; delta < 5; delta ++) {
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3301      	adds	r3, #1
 80022bc:	607b      	str	r3, [r7, #4]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d9d3      	bls.n	800226c <ssd1306_TestRectangle+0xc>
  }
  ssd1306_UpdateScreen();
 80022c4:	f7fe fee0 	bl	8001088 <ssd1306_UpdateScreen>
  return;
 80022c8:	bf00      	nop
}
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd90      	pop	{r4, r7, pc}

080022d0 <ssd1306_TestRectangleFill>:

void ssd1306_TestRectangleFill() {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af02      	add	r7, sp, #8
  ssd1306_FillRectangle(31, 1, 65, 35, White);
 80022d6:	2301      	movs	r3, #1
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	2323      	movs	r3, #35	@ 0x23
 80022dc:	2241      	movs	r2, #65	@ 0x41
 80022de:	2101      	movs	r1, #1
 80022e0:	201f      	movs	r0, #31
 80022e2:	f7ff fc5a 	bl	8001b9a <ssd1306_FillRectangle>
  ssd1306_FillRectangle(10, 45, 70, 60, White);
 80022e6:	2301      	movs	r3, #1
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	233c      	movs	r3, #60	@ 0x3c
 80022ec:	2246      	movs	r2, #70	@ 0x46
 80022ee:	212d      	movs	r1, #45	@ 0x2d
 80022f0:	200a      	movs	r0, #10
 80022f2:	f7ff fc52 	bl	8001b9a <ssd1306_FillRectangle>
  ssd1306_FillRectangle(75, 10, 100, 45, White);
 80022f6:	2301      	movs	r3, #1
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	232d      	movs	r3, #45	@ 0x2d
 80022fc:	2264      	movs	r2, #100	@ 0x64
 80022fe:	210a      	movs	r1, #10
 8002300:	204b      	movs	r0, #75	@ 0x4b
 8002302:	f7ff fc4a 	bl	8001b9a <ssd1306_FillRectangle>
  ssd1306_FillRectangle(55, 30, 80, 55, Black);
 8002306:	2300      	movs	r3, #0
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	2337      	movs	r3, #55	@ 0x37
 800230c:	2250      	movs	r2, #80	@ 0x50
 800230e:	211e      	movs	r1, #30
 8002310:	2037      	movs	r0, #55	@ 0x37
 8002312:	f7ff fc42 	bl	8001b9a <ssd1306_FillRectangle>
  ssd1306_UpdateScreen();
 8002316:	f7fe feb7 	bl	8001088 <ssd1306_UpdateScreen>
}
 800231a:	bf00      	nop
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <ssd1306_TestRectangleInvert>:

void ssd1306_TestRectangleInvert() {
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af02      	add	r7, sp, #8
#ifdef SSD1306_INCLUDE_FONT_11x18
  ssd1306_SetCursor(2, 0);
 8002326:	2100      	movs	r1, #0
 8002328:	2002      	movs	r0, #2
 800232a:	f7fe ffe1 	bl	80012f0 <ssd1306_SetCursor>
  ssd1306_WriteString("Black", Font_11x18, White);
 800232e:	4b27      	ldr	r3, [pc, #156]	@ (80023cc <ssd1306_TestRectangleInvert+0xac>)
 8002330:	2201      	movs	r2, #1
 8002332:	9200      	str	r2, [sp, #0]
 8002334:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002336:	4826      	ldr	r0, [pc, #152]	@ (80023d0 <ssd1306_TestRectangleInvert+0xb0>)
 8002338:	f7fe ffb4 	bl	80012a4 <ssd1306_WriteString>
  ssd1306_SetCursor(2, 20);
 800233c:	2114      	movs	r1, #20
 800233e:	2002      	movs	r0, #2
 8002340:	f7fe ffd6 	bl	80012f0 <ssd1306_SetCursor>
  ssd1306_WriteString("on", Font_11x18, White);
 8002344:	4b21      	ldr	r3, [pc, #132]	@ (80023cc <ssd1306_TestRectangleInvert+0xac>)
 8002346:	2201      	movs	r2, #1
 8002348:	9200      	str	r2, [sp, #0]
 800234a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800234c:	4821      	ldr	r0, [pc, #132]	@ (80023d4 <ssd1306_TestRectangleInvert+0xb4>)
 800234e:	f7fe ffa9 	bl	80012a4 <ssd1306_WriteString>
  ssd1306_SetCursor(2, 40);
 8002352:	2128      	movs	r1, #40	@ 0x28
 8002354:	2002      	movs	r0, #2
 8002356:	f7fe ffcb 	bl	80012f0 <ssd1306_SetCursor>
  ssd1306_WriteString("White", Font_11x18, White);
 800235a:	4b1c      	ldr	r3, [pc, #112]	@ (80023cc <ssd1306_TestRectangleInvert+0xac>)
 800235c:	2201      	movs	r2, #1
 800235e:	9200      	str	r2, [sp, #0]
 8002360:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002362:	481d      	ldr	r0, [pc, #116]	@ (80023d8 <ssd1306_TestRectangleInvert+0xb8>)
 8002364:	f7fe ff9e 	bl	80012a4 <ssd1306_WriteString>
  ssd1306_SetCursor(66, 0);
 8002368:	2100      	movs	r1, #0
 800236a:	2042      	movs	r0, #66	@ 0x42
 800236c:	f7fe ffc0 	bl	80012f0 <ssd1306_SetCursor>
  ssd1306_WriteString("White", Font_11x18, White);
 8002370:	4b16      	ldr	r3, [pc, #88]	@ (80023cc <ssd1306_TestRectangleInvert+0xac>)
 8002372:	2201      	movs	r2, #1
 8002374:	9200      	str	r2, [sp, #0]
 8002376:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002378:	4817      	ldr	r0, [pc, #92]	@ (80023d8 <ssd1306_TestRectangleInvert+0xb8>)
 800237a:	f7fe ff93 	bl	80012a4 <ssd1306_WriteString>
  ssd1306_SetCursor(66, 20);
 800237e:	2114      	movs	r1, #20
 8002380:	2042      	movs	r0, #66	@ 0x42
 8002382:	f7fe ffb5 	bl	80012f0 <ssd1306_SetCursor>
  ssd1306_WriteString("on", Font_11x18, White);
 8002386:	4b11      	ldr	r3, [pc, #68]	@ (80023cc <ssd1306_TestRectangleInvert+0xac>)
 8002388:	2201      	movs	r2, #1
 800238a:	9200      	str	r2, [sp, #0]
 800238c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800238e:	4811      	ldr	r0, [pc, #68]	@ (80023d4 <ssd1306_TestRectangleInvert+0xb4>)
 8002390:	f7fe ff88 	bl	80012a4 <ssd1306_WriteString>
  ssd1306_SetCursor(66, 40);
 8002394:	2128      	movs	r1, #40	@ 0x28
 8002396:	2042      	movs	r0, #66	@ 0x42
 8002398:	f7fe ffaa 	bl	80012f0 <ssd1306_SetCursor>
  ssd1306_WriteString("Black", Font_11x18, White);
 800239c:	4b0b      	ldr	r3, [pc, #44]	@ (80023cc <ssd1306_TestRectangleInvert+0xac>)
 800239e:	2201      	movs	r2, #1
 80023a0:	9200      	str	r2, [sp, #0]
 80023a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023a4:	480a      	ldr	r0, [pc, #40]	@ (80023d0 <ssd1306_TestRectangleInvert+0xb0>)
 80023a6:	f7fe ff7d 	bl	80012a4 <ssd1306_WriteString>
#else
  ssd1306_FillCircle(32, 32, 20, White);
  ssd1306_FillCircle(96, 32, 20, White);
#endif
  ssd1306_InvertRectangle(0,0,63,63);
 80023aa:	233f      	movs	r3, #63	@ 0x3f
 80023ac:	223f      	movs	r2, #63	@ 0x3f
 80023ae:	2100      	movs	r1, #0
 80023b0:	2000      	movs	r0, #0
 80023b2:	f7ff fc41 	bl	8001c38 <ssd1306_InvertRectangle>
  /* Test rectangle lies on one 8px page */
  ssd1306_InvertRectangle(2,58,125,60);
 80023b6:	233c      	movs	r3, #60	@ 0x3c
 80023b8:	227d      	movs	r2, #125	@ 0x7d
 80023ba:	213a      	movs	r1, #58	@ 0x3a
 80023bc:	2002      	movs	r0, #2
 80023be:	f7ff fc3b 	bl	8001c38 <ssd1306_InvertRectangle>
  ssd1306_UpdateScreen();
 80023c2:	f7fe fe61 	bl	8001088 <ssd1306_UpdateScreen>
}
 80023c6:	bf00      	nop
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	0800a098 	.word	0x0800a098
 80023d0:	08005504 	.word	0x08005504
 80023d4:	0800550c 	.word	0x0800550c
 80023d8:	08005510 	.word	0x08005510

080023dc <ssd1306_TestCircle>:

void ssd1306_TestCircle() {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 80023e2:	2300      	movs	r3, #0
 80023e4:	607b      	str	r3, [r7, #4]
 80023e6:	e010      	b.n	800240a <ssd1306_TestCircle+0x2e>
    ssd1306_DrawCircle(20*delta+30, 15, 10, White);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	461a      	mov	r2, r3
 80023ee:	0092      	lsls	r2, r2, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	331e      	adds	r3, #30
 80023f8:	b2d8      	uxtb	r0, r3
 80023fa:	2301      	movs	r3, #1
 80023fc:	220a      	movs	r2, #10
 80023fe:	210f      	movs	r1, #15
 8002400:	f7ff fa9a 	bl	8001938 <ssd1306_DrawCircle>
  for(delta = 0; delta < 5; delta ++) {
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3301      	adds	r3, #1
 8002408:	607b      	str	r3, [r7, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b04      	cmp	r3, #4
 800240e:	d9eb      	bls.n	80023e8 <ssd1306_TestCircle+0xc>
  }

  for(delta = 0; delta < 5; delta ++) {
 8002410:	2300      	movs	r3, #0
 8002412:	607b      	str	r3, [r7, #4]
 8002414:	e011      	b.n	800243a <ssd1306_TestCircle+0x5e>
    ssd1306_FillCircle(23*delta+15, 40, 10, White);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	461a      	mov	r2, r3
 800241c:	0052      	lsls	r2, r2, #1
 800241e:	441a      	add	r2, r3
 8002420:	00d2      	lsls	r2, r2, #3
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	b2db      	uxtb	r3, r3
 8002426:	330f      	adds	r3, #15
 8002428:	b2d8      	uxtb	r0, r3
 800242a:	2301      	movs	r3, #1
 800242c:	220a      	movs	r2, #10
 800242e:	2128      	movs	r1, #40	@ 0x28
 8002430:	f7ff fb09 	bl	8001a46 <ssd1306_FillCircle>
  for(delta = 0; delta < 5; delta ++) {
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3301      	adds	r3, #1
 8002438:	607b      	str	r3, [r7, #4]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b04      	cmp	r3, #4
 800243e:	d9ea      	bls.n	8002416 <ssd1306_TestCircle+0x3a>
  }

  ssd1306_UpdateScreen();
 8002440:	f7fe fe22 	bl	8001088 <ssd1306_UpdateScreen>
  return;
 8002444:	bf00      	nop
}
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <ssd1306_TestArc>:

void ssd1306_TestArc() {
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af02      	add	r7, sp, #8
  ssd1306_DrawArc(30, 30, 30, 20, 270, White);
 8002452:	2301      	movs	r3, #1
 8002454:	9301      	str	r3, [sp, #4]
 8002456:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	2314      	movs	r3, #20
 800245e:	221e      	movs	r2, #30
 8002460:	211e      	movs	r1, #30
 8002462:	201e      	movs	r0, #30
 8002464:	f7ff f840 	bl	80014e8 <ssd1306_DrawArc>
  ssd1306_DrawArcWithRadiusLine(80, 55, 10, 30, 270, White);
 8002468:	2301      	movs	r3, #1
 800246a:	9301      	str	r3, [sp, #4]
 800246c:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	231e      	movs	r3, #30
 8002474:	220a      	movs	r2, #10
 8002476:	2137      	movs	r1, #55	@ 0x37
 8002478:	2050      	movs	r0, #80	@ 0x50
 800247a:	f7ff f91d 	bl	80016b8 <ssd1306_DrawArcWithRadiusLine>
  ssd1306_UpdateScreen();
 800247e:	f7fe fe03 	bl	8001088 <ssd1306_UpdateScreen>
  return;
 8002482:	bf00      	nop
}
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <ssd1306_TestPolyline>:

void ssd1306_TestPolyline() {
 8002488:	b590      	push	{r4, r7, lr}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
  SSD1306_VERTEX loc_vertex[] =
 800248e:	4b08      	ldr	r3, [pc, #32]	@ (80024b0 <ssd1306_TestPolyline+0x28>)
 8002490:	463c      	mov	r4, r7
 8002492:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002494:	c407      	stmia	r4!, {r0, r1, r2}
 8002496:	8023      	strh	r3, [r4, #0]
      {45,16},
      {50,10},
      {53,16}
  };

  ssd1306_Polyline(loc_vertex,sizeof(loc_vertex)/sizeof(loc_vertex[0]),White);
 8002498:	463b      	mov	r3, r7
 800249a:	2201      	movs	r2, #1
 800249c:	2107      	movs	r1, #7
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe ffaa 	bl	80013f8 <ssd1306_Polyline>
  ssd1306_UpdateScreen();
 80024a4:	f7fe fdf0 	bl	8001088 <ssd1306_UpdateScreen>
  return;
 80024a8:	bf00      	nop
}
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd90      	pop	{r4, r7, pc}
 80024b0:	08005518 	.word	0x08005518

080024b4 <ssd1306_TestDrawBitmap>:

void ssd1306_TestDrawBitmap()
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af02      	add	r7, sp, #8
    ssd1306_Fill(White);
 80024ba:	2001      	movs	r0, #1
 80024bc:	f7fe fdcc 	bl	8001058 <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,garfield_128x64,128,64,Black);
 80024c0:	2300      	movs	r3, #0
 80024c2:	9301      	str	r3, [sp, #4]
 80024c4:	2340      	movs	r3, #64	@ 0x40
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	2380      	movs	r3, #128	@ 0x80
 80024ca:	4a18      	ldr	r2, [pc, #96]	@ (800252c <ssd1306_TestDrawBitmap+0x78>)
 80024cc:	2100      	movs	r1, #0
 80024ce:	2000      	movs	r0, #0
 80024d0:	f7ff fc6e 	bl	8001db0 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 80024d4:	f7fe fdd8 	bl	8001088 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 80024d8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80024dc:	f000 fa0c 	bl	80028f8 <HAL_Delay>
    ssd1306_Fill(Black);
 80024e0:	2000      	movs	r0, #0
 80024e2:	f7fe fdb9 	bl	8001058 <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,White);
 80024e6:	2301      	movs	r3, #1
 80024e8:	9301      	str	r3, [sp, #4]
 80024ea:	2340      	movs	r3, #64	@ 0x40
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	2340      	movs	r3, #64	@ 0x40
 80024f0:	4a0f      	ldr	r2, [pc, #60]	@ (8002530 <ssd1306_TestDrawBitmap+0x7c>)
 80024f2:	2100      	movs	r1, #0
 80024f4:	2020      	movs	r0, #32
 80024f6:	f7ff fc5b 	bl	8001db0 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 80024fa:	f7fe fdc5 	bl	8001088 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 80024fe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002502:	f000 f9f9 	bl	80028f8 <HAL_Delay>
    ssd1306_Fill(White);
 8002506:	2001      	movs	r0, #1
 8002508:	f7fe fda6 	bl	8001058 <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,Black);
 800250c:	2300      	movs	r3, #0
 800250e:	9301      	str	r3, [sp, #4]
 8002510:	2340      	movs	r3, #64	@ 0x40
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	2340      	movs	r3, #64	@ 0x40
 8002516:	4a06      	ldr	r2, [pc, #24]	@ (8002530 <ssd1306_TestDrawBitmap+0x7c>)
 8002518:	2100      	movs	r1, #0
 800251a:	2020      	movs	r0, #32
 800251c:	f7ff fc48 	bl	8001db0 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 8002520:	f7fe fdb2 	bl	8001088 <ssd1306_UpdateScreen>
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	0800a0c8 	.word	0x0800a0c8
 8002530:	0800a4c8 	.word	0x0800a4c8

08002534 <ssd1306_TestAll>:

void ssd1306_TestAll() {
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8002538:	f7fe fd24 	bl	8000f84 <ssd1306_Init>

    ssd1306_TestFPS();
 800253c:	f7ff fdd4 	bl	80020e8 <ssd1306_TestFPS>
    HAL_Delay(3000);
 8002540:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002544:	f000 f9d8 	bl	80028f8 <HAL_Delay>
    ssd1306_TestBorder();
 8002548:	f7ff fcbe 	bl	8001ec8 <ssd1306_TestBorder>
    ssd1306_TestFonts1();
 800254c:	f7ff fd06 	bl	8001f5c <ssd1306_TestFonts1>
    HAL_Delay(3000);
 8002550:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002554:	f000 f9d0 	bl	80028f8 <HAL_Delay>
    ssd1306_TestFonts2();
 8002558:	f7ff fd58 	bl	800200c <ssd1306_TestFonts2>
    HAL_Delay(3000);
 800255c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002560:	f000 f9ca 	bl	80028f8 <HAL_Delay>
    ssd1306_TestFonts3();
 8002564:	f7ff fd8c 	bl	8002080 <ssd1306_TestFonts3>
    HAL_Delay(3000);
 8002568:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800256c:	f000 f9c4 	bl	80028f8 <HAL_Delay>
    ssd1306_Fill(Black);
 8002570:	2000      	movs	r0, #0
 8002572:	f7fe fd71 	bl	8001058 <ssd1306_Fill>
    ssd1306_TestRectangle();
 8002576:	f7ff fe73 	bl	8002260 <ssd1306_TestRectangle>
    ssd1306_TestLine();
 800257a:	f7ff fe59 	bl	8002230 <ssd1306_TestLine>
    HAL_Delay(3000);
 800257e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002582:	f000 f9b9 	bl	80028f8 <HAL_Delay>
    ssd1306_Fill(Black);
 8002586:	2000      	movs	r0, #0
 8002588:	f7fe fd66 	bl	8001058 <ssd1306_Fill>
    ssd1306_TestRectangleFill();
 800258c:	f7ff fea0 	bl	80022d0 <ssd1306_TestRectangleFill>
    HAL_Delay(3000);
 8002590:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002594:	f000 f9b0 	bl	80028f8 <HAL_Delay>
    ssd1306_Fill(Black);
 8002598:	2000      	movs	r0, #0
 800259a:	f7fe fd5d 	bl	8001058 <ssd1306_Fill>
    ssd1306_TestRectangleInvert();
 800259e:	f7ff febf 	bl	8002320 <ssd1306_TestRectangleInvert>
    HAL_Delay(3000);
 80025a2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80025a6:	f000 f9a7 	bl	80028f8 <HAL_Delay>
    ssd1306_Fill(Black);
 80025aa:	2000      	movs	r0, #0
 80025ac:	f7fe fd54 	bl	8001058 <ssd1306_Fill>
    ssd1306_TestPolyline();
 80025b0:	f7ff ff6a 	bl	8002488 <ssd1306_TestPolyline>
    HAL_Delay(3000);
 80025b4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80025b8:	f000 f99e 	bl	80028f8 <HAL_Delay>
    ssd1306_Fill(Black);
 80025bc:	2000      	movs	r0, #0
 80025be:	f7fe fd4b 	bl	8001058 <ssd1306_Fill>
    ssd1306_TestArc();
 80025c2:	f7ff ff43 	bl	800244c <ssd1306_TestArc>
    HAL_Delay(3000);
 80025c6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80025ca:	f000 f995 	bl	80028f8 <HAL_Delay>
    ssd1306_Fill(Black);
 80025ce:	2000      	movs	r0, #0
 80025d0:	f7fe fd42 	bl	8001058 <ssd1306_Fill>
    ssd1306_TestCircle();
 80025d4:	f7ff ff02 	bl	80023dc <ssd1306_TestCircle>
    HAL_Delay(3000);
 80025d8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80025dc:	f000 f98c 	bl	80028f8 <HAL_Delay>
    ssd1306_TestDrawBitmap();
 80025e0:	f7ff ff68 	bl	80024b4 <ssd1306_TestDrawBitmap>
    HAL_Delay(3000);
 80025e4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80025e8:	f000 f986 	bl	80028f8 <HAL_Delay>
}
 80025ec:	bf00      	nop
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	607b      	str	r3, [r7, #4]
 80025fa:	4b10      	ldr	r3, [pc, #64]	@ (800263c <HAL_MspInit+0x4c>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fe:	4a0f      	ldr	r2, [pc, #60]	@ (800263c <HAL_MspInit+0x4c>)
 8002600:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002604:	6453      	str	r3, [r2, #68]	@ 0x44
 8002606:	4b0d      	ldr	r3, [pc, #52]	@ (800263c <HAL_MspInit+0x4c>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800260e:	607b      	str	r3, [r7, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	603b      	str	r3, [r7, #0]
 8002616:	4b09      	ldr	r3, [pc, #36]	@ (800263c <HAL_MspInit+0x4c>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	4a08      	ldr	r2, [pc, #32]	@ (800263c <HAL_MspInit+0x4c>)
 800261c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002620:	6413      	str	r3, [r2, #64]	@ 0x40
 8002622:	4b06      	ldr	r3, [pc, #24]	@ (800263c <HAL_MspInit+0x4c>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262a:	603b      	str	r3, [r7, #0]
 800262c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	40023800 	.word	0x40023800

08002640 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08a      	sub	sp, #40	@ 0x28
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a19      	ldr	r2, [pc, #100]	@ (80026c4 <HAL_I2C_MspInit+0x84>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d12b      	bne.n	80026ba <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	4b18      	ldr	r3, [pc, #96]	@ (80026c8 <HAL_I2C_MspInit+0x88>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	4a17      	ldr	r2, [pc, #92]	@ (80026c8 <HAL_I2C_MspInit+0x88>)
 800266c:	f043 0302 	orr.w	r3, r3, #2
 8002670:	6313      	str	r3, [r2, #48]	@ 0x30
 8002672:	4b15      	ldr	r3, [pc, #84]	@ (80026c8 <HAL_I2C_MspInit+0x88>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800267e:	23c0      	movs	r3, #192	@ 0xc0
 8002680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002682:	2312      	movs	r3, #18
 8002684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268a:	2303      	movs	r3, #3
 800268c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800268e:	2304      	movs	r3, #4
 8002690:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002692:	f107 0314 	add.w	r3, r7, #20
 8002696:	4619      	mov	r1, r3
 8002698:	480c      	ldr	r0, [pc, #48]	@ (80026cc <HAL_I2C_MspInit+0x8c>)
 800269a:	f000 fa37 	bl	8002b0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	4b09      	ldr	r3, [pc, #36]	@ (80026c8 <HAL_I2C_MspInit+0x88>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a6:	4a08      	ldr	r2, [pc, #32]	@ (80026c8 <HAL_I2C_MspInit+0x88>)
 80026a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80026ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ae:	4b06      	ldr	r3, [pc, #24]	@ (80026c8 <HAL_I2C_MspInit+0x88>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80026ba:	bf00      	nop
 80026bc:	3728      	adds	r7, #40	@ 0x28
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40005400 	.word	0x40005400
 80026c8:	40023800 	.word	0x40023800
 80026cc:	40020400 	.word	0x40020400

080026d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026d4:	bf00      	nop
 80026d6:	e7fd      	b.n	80026d4 <NMI_Handler+0x4>

080026d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026dc:	bf00      	nop
 80026de:	e7fd      	b.n	80026dc <HardFault_Handler+0x4>

080026e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026e4:	bf00      	nop
 80026e6:	e7fd      	b.n	80026e4 <MemManage_Handler+0x4>

080026e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ec:	bf00      	nop
 80026ee:	e7fd      	b.n	80026ec <BusFault_Handler+0x4>

080026f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026f4:	bf00      	nop
 80026f6:	e7fd      	b.n	80026f4 <UsageFault_Handler+0x4>

080026f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026fc:	bf00      	nop
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002706:	b480      	push	{r7}
 8002708:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800270a:	bf00      	nop
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002718:	bf00      	nop
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002726:	f000 f8c7 	bl	80028b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002738:	4a14      	ldr	r2, [pc, #80]	@ (800278c <_sbrk+0x5c>)
 800273a:	4b15      	ldr	r3, [pc, #84]	@ (8002790 <_sbrk+0x60>)
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002744:	4b13      	ldr	r3, [pc, #76]	@ (8002794 <_sbrk+0x64>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d102      	bne.n	8002752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800274c:	4b11      	ldr	r3, [pc, #68]	@ (8002794 <_sbrk+0x64>)
 800274e:	4a12      	ldr	r2, [pc, #72]	@ (8002798 <_sbrk+0x68>)
 8002750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002752:	4b10      	ldr	r3, [pc, #64]	@ (8002794 <_sbrk+0x64>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4413      	add	r3, r2
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	429a      	cmp	r2, r3
 800275e:	d207      	bcs.n	8002770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002760:	f001 fca2 	bl	80040a8 <__errno>
 8002764:	4603      	mov	r3, r0
 8002766:	220c      	movs	r2, #12
 8002768:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800276a:	f04f 33ff 	mov.w	r3, #4294967295
 800276e:	e009      	b.n	8002784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002770:	4b08      	ldr	r3, [pc, #32]	@ (8002794 <_sbrk+0x64>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002776:	4b07      	ldr	r3, [pc, #28]	@ (8002794 <_sbrk+0x64>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4413      	add	r3, r2
 800277e:	4a05      	ldr	r2, [pc, #20]	@ (8002794 <_sbrk+0x64>)
 8002780:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002782:	68fb      	ldr	r3, [r7, #12]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20020000 	.word	0x20020000
 8002790:	00000400 	.word	0x00000400
 8002794:	200002d4 	.word	0x200002d4
 8002798:	20000428 	.word	0x20000428

0800279c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027a0:	4b06      	ldr	r3, [pc, #24]	@ (80027bc <SystemInit+0x20>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a6:	4a05      	ldr	r2, [pc, #20]	@ (80027bc <SystemInit+0x20>)
 80027a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	e000ed00 	.word	0xe000ed00

080027c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80027c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027c4:	f7ff ffea 	bl	800279c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027c8:	480c      	ldr	r0, [pc, #48]	@ (80027fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027ca:	490d      	ldr	r1, [pc, #52]	@ (8002800 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002804 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027d0:	e002      	b.n	80027d8 <LoopCopyDataInit>

080027d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027d6:	3304      	adds	r3, #4

080027d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027dc:	d3f9      	bcc.n	80027d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027de:	4a0a      	ldr	r2, [pc, #40]	@ (8002808 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027e0:	4c0a      	ldr	r4, [pc, #40]	@ (800280c <LoopFillZerobss+0x22>)
  movs r3, #0
 80027e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027e4:	e001      	b.n	80027ea <LoopFillZerobss>

080027e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027e8:	3204      	adds	r2, #4

080027ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027ec:	d3fb      	bcc.n	80027e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027ee:	f001 fc61 	bl	80040b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027f2:	f7fe fad1 	bl	8000d98 <main>
  bx  lr    
 80027f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80027f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002800:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002804:	0800aaf4 	.word	0x0800aaf4
  ldr r2, =_sbss
 8002808:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800280c:	20000424 	.word	0x20000424

08002810 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002810:	e7fe      	b.n	8002810 <ADC_IRQHandler>
	...

08002814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002818:	4b0e      	ldr	r3, [pc, #56]	@ (8002854 <HAL_Init+0x40>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a0d      	ldr	r2, [pc, #52]	@ (8002854 <HAL_Init+0x40>)
 800281e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002822:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002824:	4b0b      	ldr	r3, [pc, #44]	@ (8002854 <HAL_Init+0x40>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a0a      	ldr	r2, [pc, #40]	@ (8002854 <HAL_Init+0x40>)
 800282a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800282e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002830:	4b08      	ldr	r3, [pc, #32]	@ (8002854 <HAL_Init+0x40>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a07      	ldr	r2, [pc, #28]	@ (8002854 <HAL_Init+0x40>)
 8002836:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800283a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800283c:	2003      	movs	r0, #3
 800283e:	f000 f931 	bl	8002aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002842:	200f      	movs	r0, #15
 8002844:	f000 f808 	bl	8002858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002848:	f7ff fed2 	bl	80025f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40023c00 	.word	0x40023c00

08002858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002860:	4b12      	ldr	r3, [pc, #72]	@ (80028ac <HAL_InitTick+0x54>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	4b12      	ldr	r3, [pc, #72]	@ (80028b0 <HAL_InitTick+0x58>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	4619      	mov	r1, r3
 800286a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800286e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002872:	fbb2 f3f3 	udiv	r3, r2, r3
 8002876:	4618      	mov	r0, r3
 8002878:	f000 f93b 	bl	8002af2 <HAL_SYSTICK_Config>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e00e      	b.n	80028a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b0f      	cmp	r3, #15
 800288a:	d80a      	bhi.n	80028a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800288c:	2200      	movs	r2, #0
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	f04f 30ff 	mov.w	r0, #4294967295
 8002894:	f000 f911 	bl	8002aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002898:	4a06      	ldr	r2, [pc, #24]	@ (80028b4 <HAL_InitTick+0x5c>)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	e000      	b.n	80028a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	20000000 	.word	0x20000000
 80028b0:	20000008 	.word	0x20000008
 80028b4:	20000004 	.word	0x20000004

080028b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028bc:	4b06      	ldr	r3, [pc, #24]	@ (80028d8 <HAL_IncTick+0x20>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	461a      	mov	r2, r3
 80028c2:	4b06      	ldr	r3, [pc, #24]	@ (80028dc <HAL_IncTick+0x24>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4413      	add	r3, r2
 80028c8:	4a04      	ldr	r2, [pc, #16]	@ (80028dc <HAL_IncTick+0x24>)
 80028ca:	6013      	str	r3, [r2, #0]
}
 80028cc:	bf00      	nop
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	20000008 	.word	0x20000008
 80028dc:	200002d8 	.word	0x200002d8

080028e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  return uwTick;
 80028e4:	4b03      	ldr	r3, [pc, #12]	@ (80028f4 <HAL_GetTick+0x14>)
 80028e6:	681b      	ldr	r3, [r3, #0]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	200002d8 	.word	0x200002d8

080028f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002900:	f7ff ffee 	bl	80028e0 <HAL_GetTick>
 8002904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002910:	d005      	beq.n	800291e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002912:	4b0a      	ldr	r3, [pc, #40]	@ (800293c <HAL_Delay+0x44>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4413      	add	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800291e:	bf00      	nop
 8002920:	f7ff ffde 	bl	80028e0 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	429a      	cmp	r2, r3
 800292e:	d8f7      	bhi.n	8002920 <HAL_Delay+0x28>
  {
  }
}
 8002930:	bf00      	nop
 8002932:	bf00      	nop
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20000008 	.word	0x20000008

08002940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002950:	4b0c      	ldr	r3, [pc, #48]	@ (8002984 <__NVIC_SetPriorityGrouping+0x44>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800295c:	4013      	ands	r3, r2
 800295e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002968:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800296c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002972:	4a04      	ldr	r2, [pc, #16]	@ (8002984 <__NVIC_SetPriorityGrouping+0x44>)
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	60d3      	str	r3, [r2, #12]
}
 8002978:	bf00      	nop
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800298c:	4b04      	ldr	r3, [pc, #16]	@ (80029a0 <__NVIC_GetPriorityGrouping+0x18>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	0a1b      	lsrs	r3, r3, #8
 8002992:	f003 0307 	and.w	r3, r3, #7
}
 8002996:	4618      	mov	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	6039      	str	r1, [r7, #0]
 80029ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	db0a      	blt.n	80029ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	490c      	ldr	r1, [pc, #48]	@ (80029f0 <__NVIC_SetPriority+0x4c>)
 80029be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c2:	0112      	lsls	r2, r2, #4
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	440b      	add	r3, r1
 80029c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029cc:	e00a      	b.n	80029e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	4908      	ldr	r1, [pc, #32]	@ (80029f4 <__NVIC_SetPriority+0x50>)
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	3b04      	subs	r3, #4
 80029dc:	0112      	lsls	r2, r2, #4
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	440b      	add	r3, r1
 80029e2:	761a      	strb	r2, [r3, #24]
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	e000e100 	.word	0xe000e100
 80029f4:	e000ed00 	.word	0xe000ed00

080029f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b089      	sub	sp, #36	@ 0x24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f1c3 0307 	rsb	r3, r3, #7
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	bf28      	it	cs
 8002a16:	2304      	movcs	r3, #4
 8002a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	2b06      	cmp	r3, #6
 8002a20:	d902      	bls.n	8002a28 <NVIC_EncodePriority+0x30>
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3b03      	subs	r3, #3
 8002a26:	e000      	b.n	8002a2a <NVIC_EncodePriority+0x32>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43da      	mvns	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	401a      	ands	r2, r3
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a40:	f04f 31ff 	mov.w	r1, #4294967295
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4a:	43d9      	mvns	r1, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a50:	4313      	orrs	r3, r2
         );
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3724      	adds	r7, #36	@ 0x24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
	...

08002a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a70:	d301      	bcc.n	8002a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a72:	2301      	movs	r3, #1
 8002a74:	e00f      	b.n	8002a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a76:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa0 <SysTick_Config+0x40>)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a7e:	210f      	movs	r1, #15
 8002a80:	f04f 30ff 	mov.w	r0, #4294967295
 8002a84:	f7ff ff8e 	bl	80029a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a88:	4b05      	ldr	r3, [pc, #20]	@ (8002aa0 <SysTick_Config+0x40>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a8e:	4b04      	ldr	r3, [pc, #16]	@ (8002aa0 <SysTick_Config+0x40>)
 8002a90:	2207      	movs	r2, #7
 8002a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	e000e010 	.word	0xe000e010

08002aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff ff47 	bl	8002940 <__NVIC_SetPriorityGrouping>
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b086      	sub	sp, #24
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	607a      	str	r2, [r7, #4]
 8002ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002acc:	f7ff ff5c 	bl	8002988 <__NVIC_GetPriorityGrouping>
 8002ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68b9      	ldr	r1, [r7, #8]
 8002ad6:	6978      	ldr	r0, [r7, #20]
 8002ad8:	f7ff ff8e 	bl	80029f8 <NVIC_EncodePriority>
 8002adc:	4602      	mov	r2, r0
 8002ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff ff5d 	bl	80029a4 <__NVIC_SetPriority>
}
 8002aea:	bf00      	nop
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b082      	sub	sp, #8
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7ff ffb0 	bl	8002a60 <SysTick_Config>
 8002b00:	4603      	mov	r3, r0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b089      	sub	sp, #36	@ 0x24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b22:	2300      	movs	r3, #0
 8002b24:	61fb      	str	r3, [r7, #28]
 8002b26:	e159      	b.n	8002ddc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b28:	2201      	movs	r2, #1
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	f040 8148 	bne.w	8002dd6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d005      	beq.n	8002b5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d130      	bne.n	8002bc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	2203      	movs	r2, #3
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b94:	2201      	movs	r2, #1
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	091b      	lsrs	r3, r3, #4
 8002baa:	f003 0201 	and.w	r2, r3, #1
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d017      	beq.n	8002bfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4013      	ands	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d123      	bne.n	8002c50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	08da      	lsrs	r2, r3, #3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3208      	adds	r2, #8
 8002c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	220f      	movs	r2, #15
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	08da      	lsrs	r2, r3, #3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3208      	adds	r2, #8
 8002c4a:	69b9      	ldr	r1, [r7, #24]
 8002c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 0203 	and.w	r2, r3, #3
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 80a2 	beq.w	8002dd6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	4b57      	ldr	r3, [pc, #348]	@ (8002df4 <HAL_GPIO_Init+0x2e8>)
 8002c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9a:	4a56      	ldr	r2, [pc, #344]	@ (8002df4 <HAL_GPIO_Init+0x2e8>)
 8002c9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ca0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ca2:	4b54      	ldr	r3, [pc, #336]	@ (8002df4 <HAL_GPIO_Init+0x2e8>)
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cae:	4a52      	ldr	r2, [pc, #328]	@ (8002df8 <HAL_GPIO_Init+0x2ec>)
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	089b      	lsrs	r3, r3, #2
 8002cb4:	3302      	adds	r3, #2
 8002cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	220f      	movs	r2, #15
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a49      	ldr	r2, [pc, #292]	@ (8002dfc <HAL_GPIO_Init+0x2f0>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d019      	beq.n	8002d0e <HAL_GPIO_Init+0x202>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a48      	ldr	r2, [pc, #288]	@ (8002e00 <HAL_GPIO_Init+0x2f4>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d013      	beq.n	8002d0a <HAL_GPIO_Init+0x1fe>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a47      	ldr	r2, [pc, #284]	@ (8002e04 <HAL_GPIO_Init+0x2f8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00d      	beq.n	8002d06 <HAL_GPIO_Init+0x1fa>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a46      	ldr	r2, [pc, #280]	@ (8002e08 <HAL_GPIO_Init+0x2fc>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d007      	beq.n	8002d02 <HAL_GPIO_Init+0x1f6>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a45      	ldr	r2, [pc, #276]	@ (8002e0c <HAL_GPIO_Init+0x300>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d101      	bne.n	8002cfe <HAL_GPIO_Init+0x1f2>
 8002cfa:	2304      	movs	r3, #4
 8002cfc:	e008      	b.n	8002d10 <HAL_GPIO_Init+0x204>
 8002cfe:	2307      	movs	r3, #7
 8002d00:	e006      	b.n	8002d10 <HAL_GPIO_Init+0x204>
 8002d02:	2303      	movs	r3, #3
 8002d04:	e004      	b.n	8002d10 <HAL_GPIO_Init+0x204>
 8002d06:	2302      	movs	r3, #2
 8002d08:	e002      	b.n	8002d10 <HAL_GPIO_Init+0x204>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <HAL_GPIO_Init+0x204>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	69fa      	ldr	r2, [r7, #28]
 8002d12:	f002 0203 	and.w	r2, r2, #3
 8002d16:	0092      	lsls	r2, r2, #2
 8002d18:	4093      	lsls	r3, r2
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d20:	4935      	ldr	r1, [pc, #212]	@ (8002df8 <HAL_GPIO_Init+0x2ec>)
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	089b      	lsrs	r3, r3, #2
 8002d26:	3302      	adds	r3, #2
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d2e:	4b38      	ldr	r3, [pc, #224]	@ (8002e10 <HAL_GPIO_Init+0x304>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	43db      	mvns	r3, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d52:	4a2f      	ldr	r2, [pc, #188]	@ (8002e10 <HAL_GPIO_Init+0x304>)
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d58:	4b2d      	ldr	r3, [pc, #180]	@ (8002e10 <HAL_GPIO_Init+0x304>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d7c:	4a24      	ldr	r2, [pc, #144]	@ (8002e10 <HAL_GPIO_Init+0x304>)
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d82:	4b23      	ldr	r3, [pc, #140]	@ (8002e10 <HAL_GPIO_Init+0x304>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002da6:	4a1a      	ldr	r2, [pc, #104]	@ (8002e10 <HAL_GPIO_Init+0x304>)
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dac:	4b18      	ldr	r3, [pc, #96]	@ (8002e10 <HAL_GPIO_Init+0x304>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	43db      	mvns	r3, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dd0:	4a0f      	ldr	r2, [pc, #60]	@ (8002e10 <HAL_GPIO_Init+0x304>)
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	61fb      	str	r3, [r7, #28]
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	2b0f      	cmp	r3, #15
 8002de0:	f67f aea2 	bls.w	8002b28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002de4:	bf00      	nop
 8002de6:	bf00      	nop
 8002de8:	3724      	adds	r7, #36	@ 0x24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40013800 	.word	0x40013800
 8002dfc:	40020000 	.word	0x40020000
 8002e00:	40020400 	.word	0x40020400
 8002e04:	40020800 	.word	0x40020800
 8002e08:	40020c00 	.word	0x40020c00
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	40013c00 	.word	0x40013c00

08002e14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e12b      	b.n	800307e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d106      	bne.n	8002e40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7ff fc00 	bl	8002640 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2224      	movs	r2, #36	@ 0x24
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0201 	bic.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e78:	f001 f8aa 	bl	8003fd0 <HAL_RCC_GetPCLK1Freq>
 8002e7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	4a81      	ldr	r2, [pc, #516]	@ (8003088 <HAL_I2C_Init+0x274>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d807      	bhi.n	8002e98 <HAL_I2C_Init+0x84>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4a80      	ldr	r2, [pc, #512]	@ (800308c <HAL_I2C_Init+0x278>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	bf94      	ite	ls
 8002e90:	2301      	movls	r3, #1
 8002e92:	2300      	movhi	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	e006      	b.n	8002ea6 <HAL_I2C_Init+0x92>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4a7d      	ldr	r2, [pc, #500]	@ (8003090 <HAL_I2C_Init+0x27c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	bf94      	ite	ls
 8002ea0:	2301      	movls	r3, #1
 8002ea2:	2300      	movhi	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e0e7      	b.n	800307e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	4a78      	ldr	r2, [pc, #480]	@ (8003094 <HAL_I2C_Init+0x280>)
 8002eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb6:	0c9b      	lsrs	r3, r3, #18
 8002eb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	4a6a      	ldr	r2, [pc, #424]	@ (8003088 <HAL_I2C_Init+0x274>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d802      	bhi.n	8002ee8 <HAL_I2C_Init+0xd4>
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	e009      	b.n	8002efc <HAL_I2C_Init+0xe8>
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002eee:	fb02 f303 	mul.w	r3, r2, r3
 8002ef2:	4a69      	ldr	r2, [pc, #420]	@ (8003098 <HAL_I2C_Init+0x284>)
 8002ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef8:	099b      	lsrs	r3, r3, #6
 8002efa:	3301      	adds	r3, #1
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6812      	ldr	r2, [r2, #0]
 8002f00:	430b      	orrs	r3, r1
 8002f02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f0e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	495c      	ldr	r1, [pc, #368]	@ (8003088 <HAL_I2C_Init+0x274>)
 8002f18:	428b      	cmp	r3, r1
 8002f1a:	d819      	bhi.n	8002f50 <HAL_I2C_Init+0x13c>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	1e59      	subs	r1, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f2a:	1c59      	adds	r1, r3, #1
 8002f2c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f30:	400b      	ands	r3, r1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00a      	beq.n	8002f4c <HAL_I2C_Init+0x138>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	1e59      	subs	r1, r3, #1
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f44:	3301      	adds	r3, #1
 8002f46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f4a:	e051      	b.n	8002ff0 <HAL_I2C_Init+0x1dc>
 8002f4c:	2304      	movs	r3, #4
 8002f4e:	e04f      	b.n	8002ff0 <HAL_I2C_Init+0x1dc>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d111      	bne.n	8002f7c <HAL_I2C_Init+0x168>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	1e58      	subs	r0, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6859      	ldr	r1, [r3, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	440b      	add	r3, r1
 8002f66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	bf0c      	ite	eq
 8002f74:	2301      	moveq	r3, #1
 8002f76:	2300      	movne	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	e012      	b.n	8002fa2 <HAL_I2C_Init+0x18e>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	1e58      	subs	r0, r3, #1
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6859      	ldr	r1, [r3, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	0099      	lsls	r1, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f92:	3301      	adds	r3, #1
 8002f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	bf0c      	ite	eq
 8002f9c:	2301      	moveq	r3, #1
 8002f9e:	2300      	movne	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_I2C_Init+0x196>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e022      	b.n	8002ff0 <HAL_I2C_Init+0x1dc>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10e      	bne.n	8002fd0 <HAL_I2C_Init+0x1bc>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	1e58      	subs	r0, r3, #1
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6859      	ldr	r1, [r3, #4]
 8002fba:	460b      	mov	r3, r1
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	440b      	add	r3, r1
 8002fc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fce:	e00f      	b.n	8002ff0 <HAL_I2C_Init+0x1dc>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	1e58      	subs	r0, r3, #1
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6859      	ldr	r1, [r3, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	0099      	lsls	r1, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	6809      	ldr	r1, [r1, #0]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69da      	ldr	r2, [r3, #28]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800301e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6911      	ldr	r1, [r2, #16]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	68d2      	ldr	r2, [r2, #12]
 800302a:	4311      	orrs	r1, r2
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6812      	ldr	r2, [r2, #0]
 8003030:	430b      	orrs	r3, r1
 8003032:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695a      	ldr	r2, [r3, #20]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0201 	orr.w	r2, r2, #1
 800305e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	000186a0 	.word	0x000186a0
 800308c:	001e847f 	.word	0x001e847f
 8003090:	003d08ff 	.word	0x003d08ff
 8003094:	431bde83 	.word	0x431bde83
 8003098:	10624dd3 	.word	0x10624dd3

0800309c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b088      	sub	sp, #32
 80030a0:	af02      	add	r7, sp, #8
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	4608      	mov	r0, r1
 80030a6:	4611      	mov	r1, r2
 80030a8:	461a      	mov	r2, r3
 80030aa:	4603      	mov	r3, r0
 80030ac:	817b      	strh	r3, [r7, #10]
 80030ae:	460b      	mov	r3, r1
 80030b0:	813b      	strh	r3, [r7, #8]
 80030b2:	4613      	mov	r3, r2
 80030b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030b6:	f7ff fc13 	bl	80028e0 <HAL_GetTick>
 80030ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b20      	cmp	r3, #32
 80030c6:	f040 80d9 	bne.w	800327c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	2319      	movs	r3, #25
 80030d0:	2201      	movs	r2, #1
 80030d2:	496d      	ldr	r1, [pc, #436]	@ (8003288 <HAL_I2C_Mem_Write+0x1ec>)
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 f971 	bl	80033bc <I2C_WaitOnFlagUntilTimeout>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80030e0:	2302      	movs	r3, #2
 80030e2:	e0cc      	b.n	800327e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_I2C_Mem_Write+0x56>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e0c5      	b.n	800327e <HAL_I2C_Mem_Write+0x1e2>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b01      	cmp	r3, #1
 8003106:	d007      	beq.n	8003118 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0201 	orr.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003126:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2221      	movs	r2, #33	@ 0x21
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2240      	movs	r2, #64	@ 0x40
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a3a      	ldr	r2, [r7, #32]
 8003142:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003148:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4a4d      	ldr	r2, [pc, #308]	@ (800328c <HAL_I2C_Mem_Write+0x1f0>)
 8003158:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800315a:	88f8      	ldrh	r0, [r7, #6]
 800315c:	893a      	ldrh	r2, [r7, #8]
 800315e:	8979      	ldrh	r1, [r7, #10]
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	9301      	str	r3, [sp, #4]
 8003164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	4603      	mov	r3, r0
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 f890 	bl	8003290 <I2C_RequestMemoryWrite>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d052      	beq.n	800321c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e081      	b.n	800327e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 fa36 	bl	80035f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00d      	beq.n	80031a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318e:	2b04      	cmp	r3, #4
 8003190:	d107      	bne.n	80031a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e06b      	b.n	800327e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031aa:	781a      	ldrb	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d11b      	bne.n	800321c <HAL_I2C_Mem_Write+0x180>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d017      	beq.n	800321c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f0:	781a      	ldrb	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fc:	1c5a      	adds	r2, r3, #1
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003206:	3b01      	subs	r3, #1
 8003208:	b29a      	uxth	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003212:	b29b      	uxth	r3, r3
 8003214:	3b01      	subs	r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1aa      	bne.n	800317a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 fa29 	bl	8003680 <I2C_WaitOnBTFFlagUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00d      	beq.n	8003250 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003238:	2b04      	cmp	r3, #4
 800323a:	d107      	bne.n	800324c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800324a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e016      	b.n	800327e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800325e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2220      	movs	r2, #32
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003278:	2300      	movs	r3, #0
 800327a:	e000      	b.n	800327e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800327c:	2302      	movs	r3, #2
  }
}
 800327e:	4618      	mov	r0, r3
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	00100002 	.word	0x00100002
 800328c:	ffff0000 	.word	0xffff0000

08003290 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b088      	sub	sp, #32
 8003294:	af02      	add	r7, sp, #8
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	4608      	mov	r0, r1
 800329a:	4611      	mov	r1, r2
 800329c:	461a      	mov	r2, r3
 800329e:	4603      	mov	r3, r0
 80032a0:	817b      	strh	r3, [r7, #10]
 80032a2:	460b      	mov	r3, r1
 80032a4:	813b      	strh	r3, [r7, #8]
 80032a6:	4613      	mov	r3, r2
 80032a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	6a3b      	ldr	r3, [r7, #32]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 f878 	bl	80033bc <I2C_WaitOnFlagUntilTimeout>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00d      	beq.n	80032ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032e0:	d103      	bne.n	80032ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e05f      	b.n	80033ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032ee:	897b      	ldrh	r3, [r7, #10]
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	461a      	mov	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003300:	6a3a      	ldr	r2, [r7, #32]
 8003302:	492d      	ldr	r1, [pc, #180]	@ (80033b8 <I2C_RequestMemoryWrite+0x128>)
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 f8d3 	bl	80034b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e04c      	b.n	80033ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800332a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800332c:	6a39      	ldr	r1, [r7, #32]
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 f95e 	bl	80035f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00d      	beq.n	8003356 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333e:	2b04      	cmp	r3, #4
 8003340:	d107      	bne.n	8003352 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003350:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e02b      	b.n	80033ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003356:	88fb      	ldrh	r3, [r7, #6]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d105      	bne.n	8003368 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800335c:	893b      	ldrh	r3, [r7, #8]
 800335e:	b2da      	uxtb	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	611a      	str	r2, [r3, #16]
 8003366:	e021      	b.n	80033ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003368:	893b      	ldrh	r3, [r7, #8]
 800336a:	0a1b      	lsrs	r3, r3, #8
 800336c:	b29b      	uxth	r3, r3
 800336e:	b2da      	uxtb	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003376:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003378:	6a39      	ldr	r1, [r7, #32]
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f938 	bl	80035f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00d      	beq.n	80033a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338a:	2b04      	cmp	r3, #4
 800338c:	d107      	bne.n	800339e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800339c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e005      	b.n	80033ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033a2:	893b      	ldrh	r3, [r7, #8]
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	00010002 	.word	0x00010002

080033bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	603b      	str	r3, [r7, #0]
 80033c8:	4613      	mov	r3, r2
 80033ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033cc:	e048      	b.n	8003460 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d4:	d044      	beq.n	8003460 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d6:	f7ff fa83 	bl	80028e0 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d302      	bcc.n	80033ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d139      	bne.n	8003460 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	0c1b      	lsrs	r3, r3, #16
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d10d      	bne.n	8003412 <I2C_WaitOnFlagUntilTimeout+0x56>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	43da      	mvns	r2, r3
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	4013      	ands	r3, r2
 8003402:	b29b      	uxth	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	bf0c      	ite	eq
 8003408:	2301      	moveq	r3, #1
 800340a:	2300      	movne	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	461a      	mov	r2, r3
 8003410:	e00c      	b.n	800342c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	43da      	mvns	r2, r3
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	4013      	ands	r3, r2
 800341e:	b29b      	uxth	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	bf0c      	ite	eq
 8003424:	2301      	moveq	r3, #1
 8003426:	2300      	movne	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	461a      	mov	r2, r3
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	429a      	cmp	r2, r3
 8003430:	d116      	bne.n	8003460 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2220      	movs	r2, #32
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344c:	f043 0220 	orr.w	r2, r3, #32
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e023      	b.n	80034a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	0c1b      	lsrs	r3, r3, #16
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b01      	cmp	r3, #1
 8003468:	d10d      	bne.n	8003486 <I2C_WaitOnFlagUntilTimeout+0xca>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	43da      	mvns	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	4013      	ands	r3, r2
 8003476:	b29b      	uxth	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	bf0c      	ite	eq
 800347c:	2301      	moveq	r3, #1
 800347e:	2300      	movne	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	461a      	mov	r2, r3
 8003484:	e00c      	b.n	80034a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	43da      	mvns	r2, r3
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	4013      	ands	r3, r2
 8003492:	b29b      	uxth	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	bf0c      	ite	eq
 8003498:	2301      	moveq	r3, #1
 800349a:	2300      	movne	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	461a      	mov	r2, r3
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d093      	beq.n	80033ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
 80034bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034be:	e071      	b.n	80035a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ce:	d123      	bne.n	8003518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2220      	movs	r2, #32
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003504:	f043 0204 	orr.w	r2, r3, #4
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e067      	b.n	80035e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351e:	d041      	beq.n	80035a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003520:	f7ff f9de 	bl	80028e0 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	429a      	cmp	r2, r3
 800352e:	d302      	bcc.n	8003536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d136      	bne.n	80035a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	0c1b      	lsrs	r3, r3, #16
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b01      	cmp	r3, #1
 800353e:	d10c      	bne.n	800355a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	43da      	mvns	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	4013      	ands	r3, r2
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	bf14      	ite	ne
 8003552:	2301      	movne	r3, #1
 8003554:	2300      	moveq	r3, #0
 8003556:	b2db      	uxtb	r3, r3
 8003558:	e00b      	b.n	8003572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	43da      	mvns	r2, r3
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	4013      	ands	r3, r2
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf14      	ite	ne
 800356c:	2301      	movne	r3, #1
 800356e:	2300      	moveq	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d016      	beq.n	80035a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2220      	movs	r2, #32
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003590:	f043 0220 	orr.w	r2, r3, #32
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e021      	b.n	80035e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	0c1b      	lsrs	r3, r3, #16
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d10c      	bne.n	80035c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	43da      	mvns	r2, r3
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	4013      	ands	r3, r2
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	bf14      	ite	ne
 80035c0:	2301      	movne	r3, #1
 80035c2:	2300      	moveq	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	e00b      	b.n	80035e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	43da      	mvns	r2, r3
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	4013      	ands	r3, r2
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	bf14      	ite	ne
 80035da:	2301      	movne	r3, #1
 80035dc:	2300      	moveq	r3, #0
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f47f af6d 	bne.w	80034c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035fc:	e034      	b.n	8003668 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 f886 	bl	8003710 <I2C_IsAcknowledgeFailed>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e034      	b.n	8003678 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003614:	d028      	beq.n	8003668 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003616:	f7ff f963 	bl	80028e0 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	429a      	cmp	r2, r3
 8003624:	d302      	bcc.n	800362c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d11d      	bne.n	8003668 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003636:	2b80      	cmp	r3, #128	@ 0x80
 8003638:	d016      	beq.n	8003668 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003654:	f043 0220 	orr.w	r2, r3, #32
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e007      	b.n	8003678 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003672:	2b80      	cmp	r3, #128	@ 0x80
 8003674:	d1c3      	bne.n	80035fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800368c:	e034      	b.n	80036f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 f83e 	bl	8003710 <I2C_IsAcknowledgeFailed>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e034      	b.n	8003708 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a4:	d028      	beq.n	80036f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a6:	f7ff f91b 	bl	80028e0 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d302      	bcc.n	80036bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d11d      	bne.n	80036f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	f003 0304 	and.w	r3, r3, #4
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d016      	beq.n	80036f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e4:	f043 0220 	orr.w	r2, r3, #32
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e007      	b.n	8003708 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	2b04      	cmp	r3, #4
 8003704:	d1c3      	bne.n	800368e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003722:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003726:	d11b      	bne.n	8003760 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003730:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374c:	f043 0204 	orr.w	r2, r3, #4
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e000      	b.n	8003762 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
	...

08003770 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e267      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d075      	beq.n	800387a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800378e:	4b88      	ldr	r3, [pc, #544]	@ (80039b0 <HAL_RCC_OscConfig+0x240>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 030c 	and.w	r3, r3, #12
 8003796:	2b04      	cmp	r3, #4
 8003798:	d00c      	beq.n	80037b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800379a:	4b85      	ldr	r3, [pc, #532]	@ (80039b0 <HAL_RCC_OscConfig+0x240>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d112      	bne.n	80037cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037a6:	4b82      	ldr	r3, [pc, #520]	@ (80039b0 <HAL_RCC_OscConfig+0x240>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037b2:	d10b      	bne.n	80037cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b4:	4b7e      	ldr	r3, [pc, #504]	@ (80039b0 <HAL_RCC_OscConfig+0x240>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d05b      	beq.n	8003878 <HAL_RCC_OscConfig+0x108>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d157      	bne.n	8003878 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e242      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037d4:	d106      	bne.n	80037e4 <HAL_RCC_OscConfig+0x74>
 80037d6:	4b76      	ldr	r3, [pc, #472]	@ (80039b0 <HAL_RCC_OscConfig+0x240>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a75      	ldr	r2, [pc, #468]	@ (80039b0 <HAL_RCC_OscConfig+0x240>)
 80037dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	e01d      	b.n	8003820 <HAL_RCC_OscConfig+0xb0>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037ec:	d10c      	bne.n	8003808 <HAL_RCC_OscConfig+0x98>
 80037ee:	4b70      	ldr	r3, [pc, #448]	@ (80039b0 <HAL_RCC_OscConfig+0x240>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a6f      	ldr	r2, [pc, #444]	@ (80039b0 <HAL_RCC_OscConfig+0x240>)
 80037f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	4b6d      	ldr	r3, [pc, #436]	@ (80039b0 <HAL_RCC_OscConfig+0x240>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a6c      	ldr	r2, [pc, #432]	@ (80039b0 <HAL_RCC_OscConfig+0x240>)
 8003800:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	e00b      	b.n	8003820 <HAL_RCC_OscConfig+0xb0>
 8003808:	4b69      	ldr	r3, [pc, #420]	@ (80039b0 <HAL_RCC_OscConfig+0x240>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a68      	ldr	r2, [pc, #416]	@ (80039b0 <HAL_RCC_OscConfig+0x240>)
 800380e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003812:	6013      	str	r3, [r2, #0]
 8003814:	4b66      	ldr	r3, [pc, #408]	@ (80039b0 <HAL_RCC_OscConfig+0x240>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a65      	ldr	r2, [pc, #404]	@ (80039b0 <HAL_RCC_OscConfig+0x240>)
 800381a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800381e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d013      	beq.n	8003850 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003828:	f7ff f85a 	bl	80028e0 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003830:	f7ff f856 	bl	80028e0 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b64      	cmp	r3, #100	@ 0x64
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e207      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003842:	4b5b      	ldr	r3, [pc, #364]	@ (80039b0 <HAL_RCC_OscConfig+0x240>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0f0      	beq.n	8003830 <HAL_RCC_OscConfig+0xc0>
 800384e:	e014      	b.n	800387a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003850:	f7ff f846 	bl	80028e0 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003858:	f7ff f842 	bl	80028e0 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b64      	cmp	r3, #100	@ 0x64
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e1f3      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800386a:	4b51      	ldr	r3, [pc, #324]	@ (80039b0 <HAL_RCC_OscConfig+0x240>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f0      	bne.n	8003858 <HAL_RCC_OscConfig+0xe8>
 8003876:	e000      	b.n	800387a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d063      	beq.n	800394e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003886:	4b4a      	ldr	r3, [pc, #296]	@ (80039b0 <HAL_RCC_OscConfig+0x240>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 030c 	and.w	r3, r3, #12
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00b      	beq.n	80038aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003892:	4b47      	ldr	r3, [pc, #284]	@ (80039b0 <HAL_RCC_OscConfig+0x240>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800389a:	2b08      	cmp	r3, #8
 800389c:	d11c      	bne.n	80038d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800389e:	4b44      	ldr	r3, [pc, #272]	@ (80039b0 <HAL_RCC_OscConfig+0x240>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d116      	bne.n	80038d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038aa:	4b41      	ldr	r3, [pc, #260]	@ (80039b0 <HAL_RCC_OscConfig+0x240>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d005      	beq.n	80038c2 <HAL_RCC_OscConfig+0x152>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d001      	beq.n	80038c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e1c7      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c2:	4b3b      	ldr	r3, [pc, #236]	@ (80039b0 <HAL_RCC_OscConfig+0x240>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	4937      	ldr	r1, [pc, #220]	@ (80039b0 <HAL_RCC_OscConfig+0x240>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038d6:	e03a      	b.n	800394e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d020      	beq.n	8003922 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038e0:	4b34      	ldr	r3, [pc, #208]	@ (80039b4 <HAL_RCC_OscConfig+0x244>)
 80038e2:	2201      	movs	r2, #1
 80038e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e6:	f7fe fffb 	bl	80028e0 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ee:	f7fe fff7 	bl	80028e0 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e1a8      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003900:	4b2b      	ldr	r3, [pc, #172]	@ (80039b0 <HAL_RCC_OscConfig+0x240>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0f0      	beq.n	80038ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800390c:	4b28      	ldr	r3, [pc, #160]	@ (80039b0 <HAL_RCC_OscConfig+0x240>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	4925      	ldr	r1, [pc, #148]	@ (80039b0 <HAL_RCC_OscConfig+0x240>)
 800391c:	4313      	orrs	r3, r2
 800391e:	600b      	str	r3, [r1, #0]
 8003920:	e015      	b.n	800394e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003922:	4b24      	ldr	r3, [pc, #144]	@ (80039b4 <HAL_RCC_OscConfig+0x244>)
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003928:	f7fe ffda 	bl	80028e0 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003930:	f7fe ffd6 	bl	80028e0 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e187      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003942:	4b1b      	ldr	r3, [pc, #108]	@ (80039b0 <HAL_RCC_OscConfig+0x240>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f0      	bne.n	8003930 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	2b00      	cmp	r3, #0
 8003958:	d036      	beq.n	80039c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d016      	beq.n	8003990 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003962:	4b15      	ldr	r3, [pc, #84]	@ (80039b8 <HAL_RCC_OscConfig+0x248>)
 8003964:	2201      	movs	r2, #1
 8003966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003968:	f7fe ffba 	bl	80028e0 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003970:	f7fe ffb6 	bl	80028e0 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e167      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003982:	4b0b      	ldr	r3, [pc, #44]	@ (80039b0 <HAL_RCC_OscConfig+0x240>)
 8003984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0f0      	beq.n	8003970 <HAL_RCC_OscConfig+0x200>
 800398e:	e01b      	b.n	80039c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003990:	4b09      	ldr	r3, [pc, #36]	@ (80039b8 <HAL_RCC_OscConfig+0x248>)
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003996:	f7fe ffa3 	bl	80028e0 <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800399c:	e00e      	b.n	80039bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800399e:	f7fe ff9f 	bl	80028e0 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d907      	bls.n	80039bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e150      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
 80039b0:	40023800 	.word	0x40023800
 80039b4:	42470000 	.word	0x42470000
 80039b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039bc:	4b88      	ldr	r3, [pc, #544]	@ (8003be0 <HAL_RCC_OscConfig+0x470>)
 80039be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1ea      	bne.n	800399e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 8097 	beq.w	8003b04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039d6:	2300      	movs	r3, #0
 80039d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039da:	4b81      	ldr	r3, [pc, #516]	@ (8003be0 <HAL_RCC_OscConfig+0x470>)
 80039dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10f      	bne.n	8003a06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e6:	2300      	movs	r3, #0
 80039e8:	60bb      	str	r3, [r7, #8]
 80039ea:	4b7d      	ldr	r3, [pc, #500]	@ (8003be0 <HAL_RCC_OscConfig+0x470>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ee:	4a7c      	ldr	r2, [pc, #496]	@ (8003be0 <HAL_RCC_OscConfig+0x470>)
 80039f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80039f6:	4b7a      	ldr	r3, [pc, #488]	@ (8003be0 <HAL_RCC_OscConfig+0x470>)
 80039f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039fe:	60bb      	str	r3, [r7, #8]
 8003a00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a02:	2301      	movs	r3, #1
 8003a04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a06:	4b77      	ldr	r3, [pc, #476]	@ (8003be4 <HAL_RCC_OscConfig+0x474>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d118      	bne.n	8003a44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a12:	4b74      	ldr	r3, [pc, #464]	@ (8003be4 <HAL_RCC_OscConfig+0x474>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a73      	ldr	r2, [pc, #460]	@ (8003be4 <HAL_RCC_OscConfig+0x474>)
 8003a18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a1e:	f7fe ff5f 	bl	80028e0 <HAL_GetTick>
 8003a22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a24:	e008      	b.n	8003a38 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a26:	f7fe ff5b 	bl	80028e0 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e10c      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a38:	4b6a      	ldr	r3, [pc, #424]	@ (8003be4 <HAL_RCC_OscConfig+0x474>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0f0      	beq.n	8003a26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d106      	bne.n	8003a5a <HAL_RCC_OscConfig+0x2ea>
 8003a4c:	4b64      	ldr	r3, [pc, #400]	@ (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a50:	4a63      	ldr	r2, [pc, #396]	@ (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003a52:	f043 0301 	orr.w	r3, r3, #1
 8003a56:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a58:	e01c      	b.n	8003a94 <HAL_RCC_OscConfig+0x324>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2b05      	cmp	r3, #5
 8003a60:	d10c      	bne.n	8003a7c <HAL_RCC_OscConfig+0x30c>
 8003a62:	4b5f      	ldr	r3, [pc, #380]	@ (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a66:	4a5e      	ldr	r2, [pc, #376]	@ (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003a68:	f043 0304 	orr.w	r3, r3, #4
 8003a6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a6e:	4b5c      	ldr	r3, [pc, #368]	@ (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a72:	4a5b      	ldr	r2, [pc, #364]	@ (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a7a:	e00b      	b.n	8003a94 <HAL_RCC_OscConfig+0x324>
 8003a7c:	4b58      	ldr	r3, [pc, #352]	@ (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a80:	4a57      	ldr	r2, [pc, #348]	@ (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003a82:	f023 0301 	bic.w	r3, r3, #1
 8003a86:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a88:	4b55      	ldr	r3, [pc, #340]	@ (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a8c:	4a54      	ldr	r2, [pc, #336]	@ (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003a8e:	f023 0304 	bic.w	r3, r3, #4
 8003a92:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d015      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a9c:	f7fe ff20 	bl	80028e0 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa2:	e00a      	b.n	8003aba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa4:	f7fe ff1c 	bl	80028e0 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e0cb      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aba:	4b49      	ldr	r3, [pc, #292]	@ (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0ee      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x334>
 8003ac6:	e014      	b.n	8003af2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac8:	f7fe ff0a 	bl	80028e0 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ace:	e00a      	b.n	8003ae6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad0:	f7fe ff06 	bl	80028e0 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e0b5      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ae6:	4b3e      	ldr	r3, [pc, #248]	@ (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1ee      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003af2:	7dfb      	ldrb	r3, [r7, #23]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d105      	bne.n	8003b04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003af8:	4b39      	ldr	r3, [pc, #228]	@ (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afc:	4a38      	ldr	r2, [pc, #224]	@ (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003afe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b02:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 80a1 	beq.w	8003c50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b0e:	4b34      	ldr	r3, [pc, #208]	@ (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 030c 	and.w	r3, r3, #12
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d05c      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d141      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b22:	4b31      	ldr	r3, [pc, #196]	@ (8003be8 <HAL_RCC_OscConfig+0x478>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b28:	f7fe feda 	bl	80028e0 <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b30:	f7fe fed6 	bl	80028e0 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e087      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b42:	4b27      	ldr	r3, [pc, #156]	@ (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1f0      	bne.n	8003b30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69da      	ldr	r2, [r3, #28]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5c:	019b      	lsls	r3, r3, #6
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b64:	085b      	lsrs	r3, r3, #1
 8003b66:	3b01      	subs	r3, #1
 8003b68:	041b      	lsls	r3, r3, #16
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b70:	061b      	lsls	r3, r3, #24
 8003b72:	491b      	ldr	r1, [pc, #108]	@ (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b78:	4b1b      	ldr	r3, [pc, #108]	@ (8003be8 <HAL_RCC_OscConfig+0x478>)
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7e:	f7fe feaf 	bl	80028e0 <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b86:	f7fe feab 	bl	80028e0 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e05c      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b98:	4b11      	ldr	r3, [pc, #68]	@ (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0f0      	beq.n	8003b86 <HAL_RCC_OscConfig+0x416>
 8003ba4:	e054      	b.n	8003c50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba6:	4b10      	ldr	r3, [pc, #64]	@ (8003be8 <HAL_RCC_OscConfig+0x478>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bac:	f7fe fe98 	bl	80028e0 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bb4:	f7fe fe94 	bl	80028e0 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e045      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bc6:	4b06      	ldr	r3, [pc, #24]	@ (8003be0 <HAL_RCC_OscConfig+0x470>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1f0      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x444>
 8003bd2:	e03d      	b.n	8003c50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d107      	bne.n	8003bec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e038      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
 8003be0:	40023800 	.word	0x40023800
 8003be4:	40007000 	.word	0x40007000
 8003be8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bec:	4b1b      	ldr	r3, [pc, #108]	@ (8003c5c <HAL_RCC_OscConfig+0x4ec>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d028      	beq.n	8003c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d121      	bne.n	8003c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d11a      	bne.n	8003c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d111      	bne.n	8003c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c32:	085b      	lsrs	r3, r3, #1
 8003c34:	3b01      	subs	r3, #1
 8003c36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d107      	bne.n	8003c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d001      	beq.n	8003c50 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e000      	b.n	8003c52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	40023800 	.word	0x40023800

08003c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e0cc      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c74:	4b68      	ldr	r3, [pc, #416]	@ (8003e18 <HAL_RCC_ClockConfig+0x1b8>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d90c      	bls.n	8003c9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c82:	4b65      	ldr	r3, [pc, #404]	@ (8003e18 <HAL_RCC_ClockConfig+0x1b8>)
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c8a:	4b63      	ldr	r3, [pc, #396]	@ (8003e18 <HAL_RCC_ClockConfig+0x1b8>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d001      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e0b8      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d020      	beq.n	8003cea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d005      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cb4:	4b59      	ldr	r3, [pc, #356]	@ (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	4a58      	ldr	r2, [pc, #352]	@ (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003cba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003cbe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0308 	and.w	r3, r3, #8
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ccc:	4b53      	ldr	r3, [pc, #332]	@ (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	4a52      	ldr	r2, [pc, #328]	@ (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003cd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd8:	4b50      	ldr	r3, [pc, #320]	@ (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	494d      	ldr	r1, [pc, #308]	@ (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d044      	beq.n	8003d80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d107      	bne.n	8003d0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfe:	4b47      	ldr	r3, [pc, #284]	@ (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d119      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e07f      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d003      	beq.n	8003d1e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d1a:	2b03      	cmp	r3, #3
 8003d1c:	d107      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d1e:	4b3f      	ldr	r3, [pc, #252]	@ (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d109      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e06f      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2e:	4b3b      	ldr	r3, [pc, #236]	@ (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e067      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d3e:	4b37      	ldr	r3, [pc, #220]	@ (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f023 0203 	bic.w	r2, r3, #3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	4934      	ldr	r1, [pc, #208]	@ (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d50:	f7fe fdc6 	bl	80028e0 <HAL_GetTick>
 8003d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d56:	e00a      	b.n	8003d6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d58:	f7fe fdc2 	bl	80028e0 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e04f      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d6e:	4b2b      	ldr	r3, [pc, #172]	@ (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 020c 	and.w	r2, r3, #12
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d1eb      	bne.n	8003d58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d80:	4b25      	ldr	r3, [pc, #148]	@ (8003e18 <HAL_RCC_ClockConfig+0x1b8>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d20c      	bcs.n	8003da8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8e:	4b22      	ldr	r3, [pc, #136]	@ (8003e18 <HAL_RCC_ClockConfig+0x1b8>)
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d96:	4b20      	ldr	r3, [pc, #128]	@ (8003e18 <HAL_RCC_ClockConfig+0x1b8>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d001      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e032      	b.n	8003e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d008      	beq.n	8003dc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003db4:	4b19      	ldr	r3, [pc, #100]	@ (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	4916      	ldr	r1, [pc, #88]	@ (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d009      	beq.n	8003de6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dd2:	4b12      	ldr	r3, [pc, #72]	@ (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	490e      	ldr	r1, [pc, #56]	@ (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003de6:	f000 f821 	bl	8003e2c <HAL_RCC_GetSysClockFreq>
 8003dea:	4602      	mov	r2, r0
 8003dec:	4b0b      	ldr	r3, [pc, #44]	@ (8003e1c <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	091b      	lsrs	r3, r3, #4
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	490a      	ldr	r1, [pc, #40]	@ (8003e20 <HAL_RCC_ClockConfig+0x1c0>)
 8003df8:	5ccb      	ldrb	r3, [r1, r3]
 8003dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8003dfe:	4a09      	ldr	r2, [pc, #36]	@ (8003e24 <HAL_RCC_ClockConfig+0x1c4>)
 8003e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003e02:	4b09      	ldr	r3, [pc, #36]	@ (8003e28 <HAL_RCC_ClockConfig+0x1c8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fe fd26 	bl	8002858 <HAL_InitTick>

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	40023c00 	.word	0x40023c00
 8003e1c:	40023800 	.word	0x40023800
 8003e20:	0800a6c8 	.word	0x0800a6c8
 8003e24:	20000000 	.word	0x20000000
 8003e28:	20000004 	.word	0x20000004

08003e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e30:	b090      	sub	sp, #64	@ 0x40
 8003e32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e44:	4b59      	ldr	r3, [pc, #356]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x180>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f003 030c 	and.w	r3, r3, #12
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d00d      	beq.n	8003e6c <HAL_RCC_GetSysClockFreq+0x40>
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	f200 80a1 	bhi.w	8003f98 <HAL_RCC_GetSysClockFreq+0x16c>
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <HAL_RCC_GetSysClockFreq+0x34>
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	d003      	beq.n	8003e66 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e5e:	e09b      	b.n	8003f98 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e60:	4b53      	ldr	r3, [pc, #332]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e62:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e64:	e09b      	b.n	8003f9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e66:	4b53      	ldr	r3, [pc, #332]	@ (8003fb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e68:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e6a:	e098      	b.n	8003f9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e6c:	4b4f      	ldr	r3, [pc, #316]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x180>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e74:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e76:	4b4d      	ldr	r3, [pc, #308]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x180>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d028      	beq.n	8003ed4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e82:	4b4a      	ldr	r3, [pc, #296]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x180>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	099b      	lsrs	r3, r3, #6
 8003e88:	2200      	movs	r2, #0
 8003e8a:	623b      	str	r3, [r7, #32]
 8003e8c:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e94:	2100      	movs	r1, #0
 8003e96:	4b47      	ldr	r3, [pc, #284]	@ (8003fb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e98:	fb03 f201 	mul.w	r2, r3, r1
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	fb00 f303 	mul.w	r3, r0, r3
 8003ea2:	4413      	add	r3, r2
 8003ea4:	4a43      	ldr	r2, [pc, #268]	@ (8003fb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ea6:	fba0 1202 	umull	r1, r2, r0, r2
 8003eaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003eac:	460a      	mov	r2, r1
 8003eae:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003eb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003eb2:	4413      	add	r3, r2
 8003eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eb8:	2200      	movs	r2, #0
 8003eba:	61bb      	str	r3, [r7, #24]
 8003ebc:	61fa      	str	r2, [r7, #28]
 8003ebe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ec2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003ec6:	f7fc fdd1 	bl	8000a6c <__aeabi_uldivmod>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	4613      	mov	r3, r2
 8003ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ed2:	e053      	b.n	8003f7c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ed4:	4b35      	ldr	r3, [pc, #212]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x180>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	099b      	lsrs	r3, r3, #6
 8003eda:	2200      	movs	r2, #0
 8003edc:	613b      	str	r3, [r7, #16]
 8003ede:	617a      	str	r2, [r7, #20]
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ee6:	f04f 0b00 	mov.w	fp, #0
 8003eea:	4652      	mov	r2, sl
 8003eec:	465b      	mov	r3, fp
 8003eee:	f04f 0000 	mov.w	r0, #0
 8003ef2:	f04f 0100 	mov.w	r1, #0
 8003ef6:	0159      	lsls	r1, r3, #5
 8003ef8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003efc:	0150      	lsls	r0, r2, #5
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	ebb2 080a 	subs.w	r8, r2, sl
 8003f06:	eb63 090b 	sbc.w	r9, r3, fp
 8003f0a:	f04f 0200 	mov.w	r2, #0
 8003f0e:	f04f 0300 	mov.w	r3, #0
 8003f12:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003f16:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003f1a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f1e:	ebb2 0408 	subs.w	r4, r2, r8
 8003f22:	eb63 0509 	sbc.w	r5, r3, r9
 8003f26:	f04f 0200 	mov.w	r2, #0
 8003f2a:	f04f 0300 	mov.w	r3, #0
 8003f2e:	00eb      	lsls	r3, r5, #3
 8003f30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f34:	00e2      	lsls	r2, r4, #3
 8003f36:	4614      	mov	r4, r2
 8003f38:	461d      	mov	r5, r3
 8003f3a:	eb14 030a 	adds.w	r3, r4, sl
 8003f3e:	603b      	str	r3, [r7, #0]
 8003f40:	eb45 030b 	adc.w	r3, r5, fp
 8003f44:	607b      	str	r3, [r7, #4]
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	f04f 0300 	mov.w	r3, #0
 8003f4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f52:	4629      	mov	r1, r5
 8003f54:	028b      	lsls	r3, r1, #10
 8003f56:	4621      	mov	r1, r4
 8003f58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f5c:	4621      	mov	r1, r4
 8003f5e:	028a      	lsls	r2, r1, #10
 8003f60:	4610      	mov	r0, r2
 8003f62:	4619      	mov	r1, r3
 8003f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f66:	2200      	movs	r2, #0
 8003f68:	60bb      	str	r3, [r7, #8]
 8003f6a:	60fa      	str	r2, [r7, #12]
 8003f6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f70:	f7fc fd7c 	bl	8000a6c <__aeabi_uldivmod>
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	4613      	mov	r3, r2
 8003f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003fac <HAL_RCC_GetSysClockFreq+0x180>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	0c1b      	lsrs	r3, r3, #16
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	3301      	adds	r3, #1
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003f8c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f94:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f96:	e002      	b.n	8003f9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f98:	4b05      	ldr	r3, [pc, #20]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f9a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3740      	adds	r7, #64	@ 0x40
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003faa:	bf00      	nop
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	00f42400 	.word	0x00f42400
 8003fb4:	017d7840 	.word	0x017d7840

08003fb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fbc:	4b03      	ldr	r3, [pc, #12]	@ (8003fcc <HAL_RCC_GetHCLKFreq+0x14>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	20000000 	.word	0x20000000

08003fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fd4:	f7ff fff0 	bl	8003fb8 <HAL_RCC_GetHCLKFreq>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	4b05      	ldr	r3, [pc, #20]	@ (8003ff0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	0a9b      	lsrs	r3, r3, #10
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	4903      	ldr	r1, [pc, #12]	@ (8003ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fe6:	5ccb      	ldrb	r3, [r1, r3]
 8003fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	0800a6d8 	.word	0x0800a6d8

08003ff8 <sniprintf>:
 8003ff8:	b40c      	push	{r2, r3}
 8003ffa:	b530      	push	{r4, r5, lr}
 8003ffc:	4b18      	ldr	r3, [pc, #96]	@ (8004060 <sniprintf+0x68>)
 8003ffe:	1e0c      	subs	r4, r1, #0
 8004000:	681d      	ldr	r5, [r3, #0]
 8004002:	b09d      	sub	sp, #116	@ 0x74
 8004004:	da08      	bge.n	8004018 <sniprintf+0x20>
 8004006:	238b      	movs	r3, #139	@ 0x8b
 8004008:	602b      	str	r3, [r5, #0]
 800400a:	f04f 30ff 	mov.w	r0, #4294967295
 800400e:	b01d      	add	sp, #116	@ 0x74
 8004010:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004014:	b002      	add	sp, #8
 8004016:	4770      	bx	lr
 8004018:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800401c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004020:	f04f 0300 	mov.w	r3, #0
 8004024:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004026:	bf14      	ite	ne
 8004028:	f104 33ff 	addne.w	r3, r4, #4294967295
 800402c:	4623      	moveq	r3, r4
 800402e:	9304      	str	r3, [sp, #16]
 8004030:	9307      	str	r3, [sp, #28]
 8004032:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004036:	9002      	str	r0, [sp, #8]
 8004038:	9006      	str	r0, [sp, #24]
 800403a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800403e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004040:	ab21      	add	r3, sp, #132	@ 0x84
 8004042:	a902      	add	r1, sp, #8
 8004044:	4628      	mov	r0, r5
 8004046:	9301      	str	r3, [sp, #4]
 8004048:	f000 f9bc 	bl	80043c4 <_svfiprintf_r>
 800404c:	1c43      	adds	r3, r0, #1
 800404e:	bfbc      	itt	lt
 8004050:	238b      	movlt	r3, #139	@ 0x8b
 8004052:	602b      	strlt	r3, [r5, #0]
 8004054:	2c00      	cmp	r4, #0
 8004056:	d0da      	beq.n	800400e <sniprintf+0x16>
 8004058:	9b02      	ldr	r3, [sp, #8]
 800405a:	2200      	movs	r2, #0
 800405c:	701a      	strb	r2, [r3, #0]
 800405e:	e7d6      	b.n	800400e <sniprintf+0x16>
 8004060:	2000000c 	.word	0x2000000c

08004064 <memmove>:
 8004064:	4288      	cmp	r0, r1
 8004066:	b510      	push	{r4, lr}
 8004068:	eb01 0402 	add.w	r4, r1, r2
 800406c:	d902      	bls.n	8004074 <memmove+0x10>
 800406e:	4284      	cmp	r4, r0
 8004070:	4623      	mov	r3, r4
 8004072:	d807      	bhi.n	8004084 <memmove+0x20>
 8004074:	1e43      	subs	r3, r0, #1
 8004076:	42a1      	cmp	r1, r4
 8004078:	d008      	beq.n	800408c <memmove+0x28>
 800407a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800407e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004082:	e7f8      	b.n	8004076 <memmove+0x12>
 8004084:	4402      	add	r2, r0
 8004086:	4601      	mov	r1, r0
 8004088:	428a      	cmp	r2, r1
 800408a:	d100      	bne.n	800408e <memmove+0x2a>
 800408c:	bd10      	pop	{r4, pc}
 800408e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004092:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004096:	e7f7      	b.n	8004088 <memmove+0x24>

08004098 <memset>:
 8004098:	4402      	add	r2, r0
 800409a:	4603      	mov	r3, r0
 800409c:	4293      	cmp	r3, r2
 800409e:	d100      	bne.n	80040a2 <memset+0xa>
 80040a0:	4770      	bx	lr
 80040a2:	f803 1b01 	strb.w	r1, [r3], #1
 80040a6:	e7f9      	b.n	800409c <memset+0x4>

080040a8 <__errno>:
 80040a8:	4b01      	ldr	r3, [pc, #4]	@ (80040b0 <__errno+0x8>)
 80040aa:	6818      	ldr	r0, [r3, #0]
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	2000000c 	.word	0x2000000c

080040b4 <__libc_init_array>:
 80040b4:	b570      	push	{r4, r5, r6, lr}
 80040b6:	4d0d      	ldr	r5, [pc, #52]	@ (80040ec <__libc_init_array+0x38>)
 80040b8:	4c0d      	ldr	r4, [pc, #52]	@ (80040f0 <__libc_init_array+0x3c>)
 80040ba:	1b64      	subs	r4, r4, r5
 80040bc:	10a4      	asrs	r4, r4, #2
 80040be:	2600      	movs	r6, #0
 80040c0:	42a6      	cmp	r6, r4
 80040c2:	d109      	bne.n	80040d8 <__libc_init_array+0x24>
 80040c4:	4d0b      	ldr	r5, [pc, #44]	@ (80040f4 <__libc_init_array+0x40>)
 80040c6:	4c0c      	ldr	r4, [pc, #48]	@ (80040f8 <__libc_init_array+0x44>)
 80040c8:	f001 f9be 	bl	8005448 <_init>
 80040cc:	1b64      	subs	r4, r4, r5
 80040ce:	10a4      	asrs	r4, r4, #2
 80040d0:	2600      	movs	r6, #0
 80040d2:	42a6      	cmp	r6, r4
 80040d4:	d105      	bne.n	80040e2 <__libc_init_array+0x2e>
 80040d6:	bd70      	pop	{r4, r5, r6, pc}
 80040d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040dc:	4798      	blx	r3
 80040de:	3601      	adds	r6, #1
 80040e0:	e7ee      	b.n	80040c0 <__libc_init_array+0xc>
 80040e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040e6:	4798      	blx	r3
 80040e8:	3601      	adds	r6, #1
 80040ea:	e7f2      	b.n	80040d2 <__libc_init_array+0x1e>
 80040ec:	0800aaec 	.word	0x0800aaec
 80040f0:	0800aaec 	.word	0x0800aaec
 80040f4:	0800aaec 	.word	0x0800aaec
 80040f8:	0800aaf0 	.word	0x0800aaf0

080040fc <__retarget_lock_acquire_recursive>:
 80040fc:	4770      	bx	lr

080040fe <__retarget_lock_release_recursive>:
 80040fe:	4770      	bx	lr

08004100 <memcpy>:
 8004100:	440a      	add	r2, r1
 8004102:	4291      	cmp	r1, r2
 8004104:	f100 33ff 	add.w	r3, r0, #4294967295
 8004108:	d100      	bne.n	800410c <memcpy+0xc>
 800410a:	4770      	bx	lr
 800410c:	b510      	push	{r4, lr}
 800410e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004112:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004116:	4291      	cmp	r1, r2
 8004118:	d1f9      	bne.n	800410e <memcpy+0xe>
 800411a:	bd10      	pop	{r4, pc}

0800411c <_free_r>:
 800411c:	b538      	push	{r3, r4, r5, lr}
 800411e:	4605      	mov	r5, r0
 8004120:	2900      	cmp	r1, #0
 8004122:	d041      	beq.n	80041a8 <_free_r+0x8c>
 8004124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004128:	1f0c      	subs	r4, r1, #4
 800412a:	2b00      	cmp	r3, #0
 800412c:	bfb8      	it	lt
 800412e:	18e4      	addlt	r4, r4, r3
 8004130:	f000 f8e0 	bl	80042f4 <__malloc_lock>
 8004134:	4a1d      	ldr	r2, [pc, #116]	@ (80041ac <_free_r+0x90>)
 8004136:	6813      	ldr	r3, [r2, #0]
 8004138:	b933      	cbnz	r3, 8004148 <_free_r+0x2c>
 800413a:	6063      	str	r3, [r4, #4]
 800413c:	6014      	str	r4, [r2, #0]
 800413e:	4628      	mov	r0, r5
 8004140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004144:	f000 b8dc 	b.w	8004300 <__malloc_unlock>
 8004148:	42a3      	cmp	r3, r4
 800414a:	d908      	bls.n	800415e <_free_r+0x42>
 800414c:	6820      	ldr	r0, [r4, #0]
 800414e:	1821      	adds	r1, r4, r0
 8004150:	428b      	cmp	r3, r1
 8004152:	bf01      	itttt	eq
 8004154:	6819      	ldreq	r1, [r3, #0]
 8004156:	685b      	ldreq	r3, [r3, #4]
 8004158:	1809      	addeq	r1, r1, r0
 800415a:	6021      	streq	r1, [r4, #0]
 800415c:	e7ed      	b.n	800413a <_free_r+0x1e>
 800415e:	461a      	mov	r2, r3
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	b10b      	cbz	r3, 8004168 <_free_r+0x4c>
 8004164:	42a3      	cmp	r3, r4
 8004166:	d9fa      	bls.n	800415e <_free_r+0x42>
 8004168:	6811      	ldr	r1, [r2, #0]
 800416a:	1850      	adds	r0, r2, r1
 800416c:	42a0      	cmp	r0, r4
 800416e:	d10b      	bne.n	8004188 <_free_r+0x6c>
 8004170:	6820      	ldr	r0, [r4, #0]
 8004172:	4401      	add	r1, r0
 8004174:	1850      	adds	r0, r2, r1
 8004176:	4283      	cmp	r3, r0
 8004178:	6011      	str	r1, [r2, #0]
 800417a:	d1e0      	bne.n	800413e <_free_r+0x22>
 800417c:	6818      	ldr	r0, [r3, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	6053      	str	r3, [r2, #4]
 8004182:	4408      	add	r0, r1
 8004184:	6010      	str	r0, [r2, #0]
 8004186:	e7da      	b.n	800413e <_free_r+0x22>
 8004188:	d902      	bls.n	8004190 <_free_r+0x74>
 800418a:	230c      	movs	r3, #12
 800418c:	602b      	str	r3, [r5, #0]
 800418e:	e7d6      	b.n	800413e <_free_r+0x22>
 8004190:	6820      	ldr	r0, [r4, #0]
 8004192:	1821      	adds	r1, r4, r0
 8004194:	428b      	cmp	r3, r1
 8004196:	bf04      	itt	eq
 8004198:	6819      	ldreq	r1, [r3, #0]
 800419a:	685b      	ldreq	r3, [r3, #4]
 800419c:	6063      	str	r3, [r4, #4]
 800419e:	bf04      	itt	eq
 80041a0:	1809      	addeq	r1, r1, r0
 80041a2:	6021      	streq	r1, [r4, #0]
 80041a4:	6054      	str	r4, [r2, #4]
 80041a6:	e7ca      	b.n	800413e <_free_r+0x22>
 80041a8:	bd38      	pop	{r3, r4, r5, pc}
 80041aa:	bf00      	nop
 80041ac:	20000420 	.word	0x20000420

080041b0 <sbrk_aligned>:
 80041b0:	b570      	push	{r4, r5, r6, lr}
 80041b2:	4e0f      	ldr	r6, [pc, #60]	@ (80041f0 <sbrk_aligned+0x40>)
 80041b4:	460c      	mov	r4, r1
 80041b6:	6831      	ldr	r1, [r6, #0]
 80041b8:	4605      	mov	r5, r0
 80041ba:	b911      	cbnz	r1, 80041c2 <sbrk_aligned+0x12>
 80041bc:	f000 fb8a 	bl	80048d4 <_sbrk_r>
 80041c0:	6030      	str	r0, [r6, #0]
 80041c2:	4621      	mov	r1, r4
 80041c4:	4628      	mov	r0, r5
 80041c6:	f000 fb85 	bl	80048d4 <_sbrk_r>
 80041ca:	1c43      	adds	r3, r0, #1
 80041cc:	d103      	bne.n	80041d6 <sbrk_aligned+0x26>
 80041ce:	f04f 34ff 	mov.w	r4, #4294967295
 80041d2:	4620      	mov	r0, r4
 80041d4:	bd70      	pop	{r4, r5, r6, pc}
 80041d6:	1cc4      	adds	r4, r0, #3
 80041d8:	f024 0403 	bic.w	r4, r4, #3
 80041dc:	42a0      	cmp	r0, r4
 80041de:	d0f8      	beq.n	80041d2 <sbrk_aligned+0x22>
 80041e0:	1a21      	subs	r1, r4, r0
 80041e2:	4628      	mov	r0, r5
 80041e4:	f000 fb76 	bl	80048d4 <_sbrk_r>
 80041e8:	3001      	adds	r0, #1
 80041ea:	d1f2      	bne.n	80041d2 <sbrk_aligned+0x22>
 80041ec:	e7ef      	b.n	80041ce <sbrk_aligned+0x1e>
 80041ee:	bf00      	nop
 80041f0:	2000041c 	.word	0x2000041c

080041f4 <_malloc_r>:
 80041f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041f8:	1ccd      	adds	r5, r1, #3
 80041fa:	f025 0503 	bic.w	r5, r5, #3
 80041fe:	3508      	adds	r5, #8
 8004200:	2d0c      	cmp	r5, #12
 8004202:	bf38      	it	cc
 8004204:	250c      	movcc	r5, #12
 8004206:	2d00      	cmp	r5, #0
 8004208:	4606      	mov	r6, r0
 800420a:	db01      	blt.n	8004210 <_malloc_r+0x1c>
 800420c:	42a9      	cmp	r1, r5
 800420e:	d904      	bls.n	800421a <_malloc_r+0x26>
 8004210:	230c      	movs	r3, #12
 8004212:	6033      	str	r3, [r6, #0]
 8004214:	2000      	movs	r0, #0
 8004216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800421a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80042f0 <_malloc_r+0xfc>
 800421e:	f000 f869 	bl	80042f4 <__malloc_lock>
 8004222:	f8d8 3000 	ldr.w	r3, [r8]
 8004226:	461c      	mov	r4, r3
 8004228:	bb44      	cbnz	r4, 800427c <_malloc_r+0x88>
 800422a:	4629      	mov	r1, r5
 800422c:	4630      	mov	r0, r6
 800422e:	f7ff ffbf 	bl	80041b0 <sbrk_aligned>
 8004232:	1c43      	adds	r3, r0, #1
 8004234:	4604      	mov	r4, r0
 8004236:	d158      	bne.n	80042ea <_malloc_r+0xf6>
 8004238:	f8d8 4000 	ldr.w	r4, [r8]
 800423c:	4627      	mov	r7, r4
 800423e:	2f00      	cmp	r7, #0
 8004240:	d143      	bne.n	80042ca <_malloc_r+0xd6>
 8004242:	2c00      	cmp	r4, #0
 8004244:	d04b      	beq.n	80042de <_malloc_r+0xea>
 8004246:	6823      	ldr	r3, [r4, #0]
 8004248:	4639      	mov	r1, r7
 800424a:	4630      	mov	r0, r6
 800424c:	eb04 0903 	add.w	r9, r4, r3
 8004250:	f000 fb40 	bl	80048d4 <_sbrk_r>
 8004254:	4581      	cmp	r9, r0
 8004256:	d142      	bne.n	80042de <_malloc_r+0xea>
 8004258:	6821      	ldr	r1, [r4, #0]
 800425a:	1a6d      	subs	r5, r5, r1
 800425c:	4629      	mov	r1, r5
 800425e:	4630      	mov	r0, r6
 8004260:	f7ff ffa6 	bl	80041b0 <sbrk_aligned>
 8004264:	3001      	adds	r0, #1
 8004266:	d03a      	beq.n	80042de <_malloc_r+0xea>
 8004268:	6823      	ldr	r3, [r4, #0]
 800426a:	442b      	add	r3, r5
 800426c:	6023      	str	r3, [r4, #0]
 800426e:	f8d8 3000 	ldr.w	r3, [r8]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	bb62      	cbnz	r2, 80042d0 <_malloc_r+0xdc>
 8004276:	f8c8 7000 	str.w	r7, [r8]
 800427a:	e00f      	b.n	800429c <_malloc_r+0xa8>
 800427c:	6822      	ldr	r2, [r4, #0]
 800427e:	1b52      	subs	r2, r2, r5
 8004280:	d420      	bmi.n	80042c4 <_malloc_r+0xd0>
 8004282:	2a0b      	cmp	r2, #11
 8004284:	d917      	bls.n	80042b6 <_malloc_r+0xc2>
 8004286:	1961      	adds	r1, r4, r5
 8004288:	42a3      	cmp	r3, r4
 800428a:	6025      	str	r5, [r4, #0]
 800428c:	bf18      	it	ne
 800428e:	6059      	strne	r1, [r3, #4]
 8004290:	6863      	ldr	r3, [r4, #4]
 8004292:	bf08      	it	eq
 8004294:	f8c8 1000 	streq.w	r1, [r8]
 8004298:	5162      	str	r2, [r4, r5]
 800429a:	604b      	str	r3, [r1, #4]
 800429c:	4630      	mov	r0, r6
 800429e:	f000 f82f 	bl	8004300 <__malloc_unlock>
 80042a2:	f104 000b 	add.w	r0, r4, #11
 80042a6:	1d23      	adds	r3, r4, #4
 80042a8:	f020 0007 	bic.w	r0, r0, #7
 80042ac:	1ac2      	subs	r2, r0, r3
 80042ae:	bf1c      	itt	ne
 80042b0:	1a1b      	subne	r3, r3, r0
 80042b2:	50a3      	strne	r3, [r4, r2]
 80042b4:	e7af      	b.n	8004216 <_malloc_r+0x22>
 80042b6:	6862      	ldr	r2, [r4, #4]
 80042b8:	42a3      	cmp	r3, r4
 80042ba:	bf0c      	ite	eq
 80042bc:	f8c8 2000 	streq.w	r2, [r8]
 80042c0:	605a      	strne	r2, [r3, #4]
 80042c2:	e7eb      	b.n	800429c <_malloc_r+0xa8>
 80042c4:	4623      	mov	r3, r4
 80042c6:	6864      	ldr	r4, [r4, #4]
 80042c8:	e7ae      	b.n	8004228 <_malloc_r+0x34>
 80042ca:	463c      	mov	r4, r7
 80042cc:	687f      	ldr	r7, [r7, #4]
 80042ce:	e7b6      	b.n	800423e <_malloc_r+0x4a>
 80042d0:	461a      	mov	r2, r3
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	42a3      	cmp	r3, r4
 80042d6:	d1fb      	bne.n	80042d0 <_malloc_r+0xdc>
 80042d8:	2300      	movs	r3, #0
 80042da:	6053      	str	r3, [r2, #4]
 80042dc:	e7de      	b.n	800429c <_malloc_r+0xa8>
 80042de:	230c      	movs	r3, #12
 80042e0:	6033      	str	r3, [r6, #0]
 80042e2:	4630      	mov	r0, r6
 80042e4:	f000 f80c 	bl	8004300 <__malloc_unlock>
 80042e8:	e794      	b.n	8004214 <_malloc_r+0x20>
 80042ea:	6005      	str	r5, [r0, #0]
 80042ec:	e7d6      	b.n	800429c <_malloc_r+0xa8>
 80042ee:	bf00      	nop
 80042f0:	20000420 	.word	0x20000420

080042f4 <__malloc_lock>:
 80042f4:	4801      	ldr	r0, [pc, #4]	@ (80042fc <__malloc_lock+0x8>)
 80042f6:	f7ff bf01 	b.w	80040fc <__retarget_lock_acquire_recursive>
 80042fa:	bf00      	nop
 80042fc:	20000418 	.word	0x20000418

08004300 <__malloc_unlock>:
 8004300:	4801      	ldr	r0, [pc, #4]	@ (8004308 <__malloc_unlock+0x8>)
 8004302:	f7ff befc 	b.w	80040fe <__retarget_lock_release_recursive>
 8004306:	bf00      	nop
 8004308:	20000418 	.word	0x20000418

0800430c <__ssputs_r>:
 800430c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004310:	688e      	ldr	r6, [r1, #8]
 8004312:	461f      	mov	r7, r3
 8004314:	42be      	cmp	r6, r7
 8004316:	680b      	ldr	r3, [r1, #0]
 8004318:	4682      	mov	sl, r0
 800431a:	460c      	mov	r4, r1
 800431c:	4690      	mov	r8, r2
 800431e:	d82d      	bhi.n	800437c <__ssputs_r+0x70>
 8004320:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004324:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004328:	d026      	beq.n	8004378 <__ssputs_r+0x6c>
 800432a:	6965      	ldr	r5, [r4, #20]
 800432c:	6909      	ldr	r1, [r1, #16]
 800432e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004332:	eba3 0901 	sub.w	r9, r3, r1
 8004336:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800433a:	1c7b      	adds	r3, r7, #1
 800433c:	444b      	add	r3, r9
 800433e:	106d      	asrs	r5, r5, #1
 8004340:	429d      	cmp	r5, r3
 8004342:	bf38      	it	cc
 8004344:	461d      	movcc	r5, r3
 8004346:	0553      	lsls	r3, r2, #21
 8004348:	d527      	bpl.n	800439a <__ssputs_r+0x8e>
 800434a:	4629      	mov	r1, r5
 800434c:	f7ff ff52 	bl	80041f4 <_malloc_r>
 8004350:	4606      	mov	r6, r0
 8004352:	b360      	cbz	r0, 80043ae <__ssputs_r+0xa2>
 8004354:	6921      	ldr	r1, [r4, #16]
 8004356:	464a      	mov	r2, r9
 8004358:	f7ff fed2 	bl	8004100 <memcpy>
 800435c:	89a3      	ldrh	r3, [r4, #12]
 800435e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004366:	81a3      	strh	r3, [r4, #12]
 8004368:	6126      	str	r6, [r4, #16]
 800436a:	6165      	str	r5, [r4, #20]
 800436c:	444e      	add	r6, r9
 800436e:	eba5 0509 	sub.w	r5, r5, r9
 8004372:	6026      	str	r6, [r4, #0]
 8004374:	60a5      	str	r5, [r4, #8]
 8004376:	463e      	mov	r6, r7
 8004378:	42be      	cmp	r6, r7
 800437a:	d900      	bls.n	800437e <__ssputs_r+0x72>
 800437c:	463e      	mov	r6, r7
 800437e:	6820      	ldr	r0, [r4, #0]
 8004380:	4632      	mov	r2, r6
 8004382:	4641      	mov	r1, r8
 8004384:	f7ff fe6e 	bl	8004064 <memmove>
 8004388:	68a3      	ldr	r3, [r4, #8]
 800438a:	1b9b      	subs	r3, r3, r6
 800438c:	60a3      	str	r3, [r4, #8]
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	4433      	add	r3, r6
 8004392:	6023      	str	r3, [r4, #0]
 8004394:	2000      	movs	r0, #0
 8004396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800439a:	462a      	mov	r2, r5
 800439c:	f000 faaa 	bl	80048f4 <_realloc_r>
 80043a0:	4606      	mov	r6, r0
 80043a2:	2800      	cmp	r0, #0
 80043a4:	d1e0      	bne.n	8004368 <__ssputs_r+0x5c>
 80043a6:	6921      	ldr	r1, [r4, #16]
 80043a8:	4650      	mov	r0, sl
 80043aa:	f7ff feb7 	bl	800411c <_free_r>
 80043ae:	230c      	movs	r3, #12
 80043b0:	f8ca 3000 	str.w	r3, [sl]
 80043b4:	89a3      	ldrh	r3, [r4, #12]
 80043b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043ba:	81a3      	strh	r3, [r4, #12]
 80043bc:	f04f 30ff 	mov.w	r0, #4294967295
 80043c0:	e7e9      	b.n	8004396 <__ssputs_r+0x8a>
	...

080043c4 <_svfiprintf_r>:
 80043c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c8:	4698      	mov	r8, r3
 80043ca:	898b      	ldrh	r3, [r1, #12]
 80043cc:	061b      	lsls	r3, r3, #24
 80043ce:	b09d      	sub	sp, #116	@ 0x74
 80043d0:	4607      	mov	r7, r0
 80043d2:	460d      	mov	r5, r1
 80043d4:	4614      	mov	r4, r2
 80043d6:	d510      	bpl.n	80043fa <_svfiprintf_r+0x36>
 80043d8:	690b      	ldr	r3, [r1, #16]
 80043da:	b973      	cbnz	r3, 80043fa <_svfiprintf_r+0x36>
 80043dc:	2140      	movs	r1, #64	@ 0x40
 80043de:	f7ff ff09 	bl	80041f4 <_malloc_r>
 80043e2:	6028      	str	r0, [r5, #0]
 80043e4:	6128      	str	r0, [r5, #16]
 80043e6:	b930      	cbnz	r0, 80043f6 <_svfiprintf_r+0x32>
 80043e8:	230c      	movs	r3, #12
 80043ea:	603b      	str	r3, [r7, #0]
 80043ec:	f04f 30ff 	mov.w	r0, #4294967295
 80043f0:	b01d      	add	sp, #116	@ 0x74
 80043f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043f6:	2340      	movs	r3, #64	@ 0x40
 80043f8:	616b      	str	r3, [r5, #20]
 80043fa:	2300      	movs	r3, #0
 80043fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80043fe:	2320      	movs	r3, #32
 8004400:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004404:	f8cd 800c 	str.w	r8, [sp, #12]
 8004408:	2330      	movs	r3, #48	@ 0x30
 800440a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80045a8 <_svfiprintf_r+0x1e4>
 800440e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004412:	f04f 0901 	mov.w	r9, #1
 8004416:	4623      	mov	r3, r4
 8004418:	469a      	mov	sl, r3
 800441a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800441e:	b10a      	cbz	r2, 8004424 <_svfiprintf_r+0x60>
 8004420:	2a25      	cmp	r2, #37	@ 0x25
 8004422:	d1f9      	bne.n	8004418 <_svfiprintf_r+0x54>
 8004424:	ebba 0b04 	subs.w	fp, sl, r4
 8004428:	d00b      	beq.n	8004442 <_svfiprintf_r+0x7e>
 800442a:	465b      	mov	r3, fp
 800442c:	4622      	mov	r2, r4
 800442e:	4629      	mov	r1, r5
 8004430:	4638      	mov	r0, r7
 8004432:	f7ff ff6b 	bl	800430c <__ssputs_r>
 8004436:	3001      	adds	r0, #1
 8004438:	f000 80a7 	beq.w	800458a <_svfiprintf_r+0x1c6>
 800443c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800443e:	445a      	add	r2, fp
 8004440:	9209      	str	r2, [sp, #36]	@ 0x24
 8004442:	f89a 3000 	ldrb.w	r3, [sl]
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 809f 	beq.w	800458a <_svfiprintf_r+0x1c6>
 800444c:	2300      	movs	r3, #0
 800444e:	f04f 32ff 	mov.w	r2, #4294967295
 8004452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004456:	f10a 0a01 	add.w	sl, sl, #1
 800445a:	9304      	str	r3, [sp, #16]
 800445c:	9307      	str	r3, [sp, #28]
 800445e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004462:	931a      	str	r3, [sp, #104]	@ 0x68
 8004464:	4654      	mov	r4, sl
 8004466:	2205      	movs	r2, #5
 8004468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800446c:	484e      	ldr	r0, [pc, #312]	@ (80045a8 <_svfiprintf_r+0x1e4>)
 800446e:	f7fb feb7 	bl	80001e0 <memchr>
 8004472:	9a04      	ldr	r2, [sp, #16]
 8004474:	b9d8      	cbnz	r0, 80044ae <_svfiprintf_r+0xea>
 8004476:	06d0      	lsls	r0, r2, #27
 8004478:	bf44      	itt	mi
 800447a:	2320      	movmi	r3, #32
 800447c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004480:	0711      	lsls	r1, r2, #28
 8004482:	bf44      	itt	mi
 8004484:	232b      	movmi	r3, #43	@ 0x2b
 8004486:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800448a:	f89a 3000 	ldrb.w	r3, [sl]
 800448e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004490:	d015      	beq.n	80044be <_svfiprintf_r+0xfa>
 8004492:	9a07      	ldr	r2, [sp, #28]
 8004494:	4654      	mov	r4, sl
 8004496:	2000      	movs	r0, #0
 8004498:	f04f 0c0a 	mov.w	ip, #10
 800449c:	4621      	mov	r1, r4
 800449e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044a2:	3b30      	subs	r3, #48	@ 0x30
 80044a4:	2b09      	cmp	r3, #9
 80044a6:	d94b      	bls.n	8004540 <_svfiprintf_r+0x17c>
 80044a8:	b1b0      	cbz	r0, 80044d8 <_svfiprintf_r+0x114>
 80044aa:	9207      	str	r2, [sp, #28]
 80044ac:	e014      	b.n	80044d8 <_svfiprintf_r+0x114>
 80044ae:	eba0 0308 	sub.w	r3, r0, r8
 80044b2:	fa09 f303 	lsl.w	r3, r9, r3
 80044b6:	4313      	orrs	r3, r2
 80044b8:	9304      	str	r3, [sp, #16]
 80044ba:	46a2      	mov	sl, r4
 80044bc:	e7d2      	b.n	8004464 <_svfiprintf_r+0xa0>
 80044be:	9b03      	ldr	r3, [sp, #12]
 80044c0:	1d19      	adds	r1, r3, #4
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	9103      	str	r1, [sp, #12]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	bfbb      	ittet	lt
 80044ca:	425b      	neglt	r3, r3
 80044cc:	f042 0202 	orrlt.w	r2, r2, #2
 80044d0:	9307      	strge	r3, [sp, #28]
 80044d2:	9307      	strlt	r3, [sp, #28]
 80044d4:	bfb8      	it	lt
 80044d6:	9204      	strlt	r2, [sp, #16]
 80044d8:	7823      	ldrb	r3, [r4, #0]
 80044da:	2b2e      	cmp	r3, #46	@ 0x2e
 80044dc:	d10a      	bne.n	80044f4 <_svfiprintf_r+0x130>
 80044de:	7863      	ldrb	r3, [r4, #1]
 80044e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80044e2:	d132      	bne.n	800454a <_svfiprintf_r+0x186>
 80044e4:	9b03      	ldr	r3, [sp, #12]
 80044e6:	1d1a      	adds	r2, r3, #4
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	9203      	str	r2, [sp, #12]
 80044ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80044f0:	3402      	adds	r4, #2
 80044f2:	9305      	str	r3, [sp, #20]
 80044f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80045b8 <_svfiprintf_r+0x1f4>
 80044f8:	7821      	ldrb	r1, [r4, #0]
 80044fa:	2203      	movs	r2, #3
 80044fc:	4650      	mov	r0, sl
 80044fe:	f7fb fe6f 	bl	80001e0 <memchr>
 8004502:	b138      	cbz	r0, 8004514 <_svfiprintf_r+0x150>
 8004504:	9b04      	ldr	r3, [sp, #16]
 8004506:	eba0 000a 	sub.w	r0, r0, sl
 800450a:	2240      	movs	r2, #64	@ 0x40
 800450c:	4082      	lsls	r2, r0
 800450e:	4313      	orrs	r3, r2
 8004510:	3401      	adds	r4, #1
 8004512:	9304      	str	r3, [sp, #16]
 8004514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004518:	4824      	ldr	r0, [pc, #144]	@ (80045ac <_svfiprintf_r+0x1e8>)
 800451a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800451e:	2206      	movs	r2, #6
 8004520:	f7fb fe5e 	bl	80001e0 <memchr>
 8004524:	2800      	cmp	r0, #0
 8004526:	d036      	beq.n	8004596 <_svfiprintf_r+0x1d2>
 8004528:	4b21      	ldr	r3, [pc, #132]	@ (80045b0 <_svfiprintf_r+0x1ec>)
 800452a:	bb1b      	cbnz	r3, 8004574 <_svfiprintf_r+0x1b0>
 800452c:	9b03      	ldr	r3, [sp, #12]
 800452e:	3307      	adds	r3, #7
 8004530:	f023 0307 	bic.w	r3, r3, #7
 8004534:	3308      	adds	r3, #8
 8004536:	9303      	str	r3, [sp, #12]
 8004538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800453a:	4433      	add	r3, r6
 800453c:	9309      	str	r3, [sp, #36]	@ 0x24
 800453e:	e76a      	b.n	8004416 <_svfiprintf_r+0x52>
 8004540:	fb0c 3202 	mla	r2, ip, r2, r3
 8004544:	460c      	mov	r4, r1
 8004546:	2001      	movs	r0, #1
 8004548:	e7a8      	b.n	800449c <_svfiprintf_r+0xd8>
 800454a:	2300      	movs	r3, #0
 800454c:	3401      	adds	r4, #1
 800454e:	9305      	str	r3, [sp, #20]
 8004550:	4619      	mov	r1, r3
 8004552:	f04f 0c0a 	mov.w	ip, #10
 8004556:	4620      	mov	r0, r4
 8004558:	f810 2b01 	ldrb.w	r2, [r0], #1
 800455c:	3a30      	subs	r2, #48	@ 0x30
 800455e:	2a09      	cmp	r2, #9
 8004560:	d903      	bls.n	800456a <_svfiprintf_r+0x1a6>
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0c6      	beq.n	80044f4 <_svfiprintf_r+0x130>
 8004566:	9105      	str	r1, [sp, #20]
 8004568:	e7c4      	b.n	80044f4 <_svfiprintf_r+0x130>
 800456a:	fb0c 2101 	mla	r1, ip, r1, r2
 800456e:	4604      	mov	r4, r0
 8004570:	2301      	movs	r3, #1
 8004572:	e7f0      	b.n	8004556 <_svfiprintf_r+0x192>
 8004574:	ab03      	add	r3, sp, #12
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	462a      	mov	r2, r5
 800457a:	4b0e      	ldr	r3, [pc, #56]	@ (80045b4 <_svfiprintf_r+0x1f0>)
 800457c:	a904      	add	r1, sp, #16
 800457e:	4638      	mov	r0, r7
 8004580:	f3af 8000 	nop.w
 8004584:	1c42      	adds	r2, r0, #1
 8004586:	4606      	mov	r6, r0
 8004588:	d1d6      	bne.n	8004538 <_svfiprintf_r+0x174>
 800458a:	89ab      	ldrh	r3, [r5, #12]
 800458c:	065b      	lsls	r3, r3, #25
 800458e:	f53f af2d 	bmi.w	80043ec <_svfiprintf_r+0x28>
 8004592:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004594:	e72c      	b.n	80043f0 <_svfiprintf_r+0x2c>
 8004596:	ab03      	add	r3, sp, #12
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	462a      	mov	r2, r5
 800459c:	4b05      	ldr	r3, [pc, #20]	@ (80045b4 <_svfiprintf_r+0x1f0>)
 800459e:	a904      	add	r1, sp, #16
 80045a0:	4638      	mov	r0, r7
 80045a2:	f000 f879 	bl	8004698 <_printf_i>
 80045a6:	e7ed      	b.n	8004584 <_svfiprintf_r+0x1c0>
 80045a8:	0800a6e0 	.word	0x0800a6e0
 80045ac:	0800a6ea 	.word	0x0800a6ea
 80045b0:	00000000 	.word	0x00000000
 80045b4:	0800430d 	.word	0x0800430d
 80045b8:	0800a6e6 	.word	0x0800a6e6

080045bc <_printf_common>:
 80045bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045c0:	4616      	mov	r6, r2
 80045c2:	4698      	mov	r8, r3
 80045c4:	688a      	ldr	r2, [r1, #8]
 80045c6:	690b      	ldr	r3, [r1, #16]
 80045c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80045cc:	4293      	cmp	r3, r2
 80045ce:	bfb8      	it	lt
 80045d0:	4613      	movlt	r3, r2
 80045d2:	6033      	str	r3, [r6, #0]
 80045d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80045d8:	4607      	mov	r7, r0
 80045da:	460c      	mov	r4, r1
 80045dc:	b10a      	cbz	r2, 80045e2 <_printf_common+0x26>
 80045de:	3301      	adds	r3, #1
 80045e0:	6033      	str	r3, [r6, #0]
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	0699      	lsls	r1, r3, #26
 80045e6:	bf42      	ittt	mi
 80045e8:	6833      	ldrmi	r3, [r6, #0]
 80045ea:	3302      	addmi	r3, #2
 80045ec:	6033      	strmi	r3, [r6, #0]
 80045ee:	6825      	ldr	r5, [r4, #0]
 80045f0:	f015 0506 	ands.w	r5, r5, #6
 80045f4:	d106      	bne.n	8004604 <_printf_common+0x48>
 80045f6:	f104 0a19 	add.w	sl, r4, #25
 80045fa:	68e3      	ldr	r3, [r4, #12]
 80045fc:	6832      	ldr	r2, [r6, #0]
 80045fe:	1a9b      	subs	r3, r3, r2
 8004600:	42ab      	cmp	r3, r5
 8004602:	dc26      	bgt.n	8004652 <_printf_common+0x96>
 8004604:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004608:	6822      	ldr	r2, [r4, #0]
 800460a:	3b00      	subs	r3, #0
 800460c:	bf18      	it	ne
 800460e:	2301      	movne	r3, #1
 8004610:	0692      	lsls	r2, r2, #26
 8004612:	d42b      	bmi.n	800466c <_printf_common+0xb0>
 8004614:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004618:	4641      	mov	r1, r8
 800461a:	4638      	mov	r0, r7
 800461c:	47c8      	blx	r9
 800461e:	3001      	adds	r0, #1
 8004620:	d01e      	beq.n	8004660 <_printf_common+0xa4>
 8004622:	6823      	ldr	r3, [r4, #0]
 8004624:	6922      	ldr	r2, [r4, #16]
 8004626:	f003 0306 	and.w	r3, r3, #6
 800462a:	2b04      	cmp	r3, #4
 800462c:	bf02      	ittt	eq
 800462e:	68e5      	ldreq	r5, [r4, #12]
 8004630:	6833      	ldreq	r3, [r6, #0]
 8004632:	1aed      	subeq	r5, r5, r3
 8004634:	68a3      	ldr	r3, [r4, #8]
 8004636:	bf0c      	ite	eq
 8004638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800463c:	2500      	movne	r5, #0
 800463e:	4293      	cmp	r3, r2
 8004640:	bfc4      	itt	gt
 8004642:	1a9b      	subgt	r3, r3, r2
 8004644:	18ed      	addgt	r5, r5, r3
 8004646:	2600      	movs	r6, #0
 8004648:	341a      	adds	r4, #26
 800464a:	42b5      	cmp	r5, r6
 800464c:	d11a      	bne.n	8004684 <_printf_common+0xc8>
 800464e:	2000      	movs	r0, #0
 8004650:	e008      	b.n	8004664 <_printf_common+0xa8>
 8004652:	2301      	movs	r3, #1
 8004654:	4652      	mov	r2, sl
 8004656:	4641      	mov	r1, r8
 8004658:	4638      	mov	r0, r7
 800465a:	47c8      	blx	r9
 800465c:	3001      	adds	r0, #1
 800465e:	d103      	bne.n	8004668 <_printf_common+0xac>
 8004660:	f04f 30ff 	mov.w	r0, #4294967295
 8004664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004668:	3501      	adds	r5, #1
 800466a:	e7c6      	b.n	80045fa <_printf_common+0x3e>
 800466c:	18e1      	adds	r1, r4, r3
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	2030      	movs	r0, #48	@ 0x30
 8004672:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004676:	4422      	add	r2, r4
 8004678:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800467c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004680:	3302      	adds	r3, #2
 8004682:	e7c7      	b.n	8004614 <_printf_common+0x58>
 8004684:	2301      	movs	r3, #1
 8004686:	4622      	mov	r2, r4
 8004688:	4641      	mov	r1, r8
 800468a:	4638      	mov	r0, r7
 800468c:	47c8      	blx	r9
 800468e:	3001      	adds	r0, #1
 8004690:	d0e6      	beq.n	8004660 <_printf_common+0xa4>
 8004692:	3601      	adds	r6, #1
 8004694:	e7d9      	b.n	800464a <_printf_common+0x8e>
	...

08004698 <_printf_i>:
 8004698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800469c:	7e0f      	ldrb	r7, [r1, #24]
 800469e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80046a0:	2f78      	cmp	r7, #120	@ 0x78
 80046a2:	4691      	mov	r9, r2
 80046a4:	4680      	mov	r8, r0
 80046a6:	460c      	mov	r4, r1
 80046a8:	469a      	mov	sl, r3
 80046aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80046ae:	d807      	bhi.n	80046c0 <_printf_i+0x28>
 80046b0:	2f62      	cmp	r7, #98	@ 0x62
 80046b2:	d80a      	bhi.n	80046ca <_printf_i+0x32>
 80046b4:	2f00      	cmp	r7, #0
 80046b6:	f000 80d1 	beq.w	800485c <_printf_i+0x1c4>
 80046ba:	2f58      	cmp	r7, #88	@ 0x58
 80046bc:	f000 80b8 	beq.w	8004830 <_printf_i+0x198>
 80046c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80046c8:	e03a      	b.n	8004740 <_printf_i+0xa8>
 80046ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80046ce:	2b15      	cmp	r3, #21
 80046d0:	d8f6      	bhi.n	80046c0 <_printf_i+0x28>
 80046d2:	a101      	add	r1, pc, #4	@ (adr r1, 80046d8 <_printf_i+0x40>)
 80046d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046d8:	08004731 	.word	0x08004731
 80046dc:	08004745 	.word	0x08004745
 80046e0:	080046c1 	.word	0x080046c1
 80046e4:	080046c1 	.word	0x080046c1
 80046e8:	080046c1 	.word	0x080046c1
 80046ec:	080046c1 	.word	0x080046c1
 80046f0:	08004745 	.word	0x08004745
 80046f4:	080046c1 	.word	0x080046c1
 80046f8:	080046c1 	.word	0x080046c1
 80046fc:	080046c1 	.word	0x080046c1
 8004700:	080046c1 	.word	0x080046c1
 8004704:	08004843 	.word	0x08004843
 8004708:	0800476f 	.word	0x0800476f
 800470c:	080047fd 	.word	0x080047fd
 8004710:	080046c1 	.word	0x080046c1
 8004714:	080046c1 	.word	0x080046c1
 8004718:	08004865 	.word	0x08004865
 800471c:	080046c1 	.word	0x080046c1
 8004720:	0800476f 	.word	0x0800476f
 8004724:	080046c1 	.word	0x080046c1
 8004728:	080046c1 	.word	0x080046c1
 800472c:	08004805 	.word	0x08004805
 8004730:	6833      	ldr	r3, [r6, #0]
 8004732:	1d1a      	adds	r2, r3, #4
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6032      	str	r2, [r6, #0]
 8004738:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800473c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004740:	2301      	movs	r3, #1
 8004742:	e09c      	b.n	800487e <_printf_i+0x1e6>
 8004744:	6833      	ldr	r3, [r6, #0]
 8004746:	6820      	ldr	r0, [r4, #0]
 8004748:	1d19      	adds	r1, r3, #4
 800474a:	6031      	str	r1, [r6, #0]
 800474c:	0606      	lsls	r6, r0, #24
 800474e:	d501      	bpl.n	8004754 <_printf_i+0xbc>
 8004750:	681d      	ldr	r5, [r3, #0]
 8004752:	e003      	b.n	800475c <_printf_i+0xc4>
 8004754:	0645      	lsls	r5, r0, #25
 8004756:	d5fb      	bpl.n	8004750 <_printf_i+0xb8>
 8004758:	f9b3 5000 	ldrsh.w	r5, [r3]
 800475c:	2d00      	cmp	r5, #0
 800475e:	da03      	bge.n	8004768 <_printf_i+0xd0>
 8004760:	232d      	movs	r3, #45	@ 0x2d
 8004762:	426d      	negs	r5, r5
 8004764:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004768:	4858      	ldr	r0, [pc, #352]	@ (80048cc <_printf_i+0x234>)
 800476a:	230a      	movs	r3, #10
 800476c:	e011      	b.n	8004792 <_printf_i+0xfa>
 800476e:	6821      	ldr	r1, [r4, #0]
 8004770:	6833      	ldr	r3, [r6, #0]
 8004772:	0608      	lsls	r0, r1, #24
 8004774:	f853 5b04 	ldr.w	r5, [r3], #4
 8004778:	d402      	bmi.n	8004780 <_printf_i+0xe8>
 800477a:	0649      	lsls	r1, r1, #25
 800477c:	bf48      	it	mi
 800477e:	b2ad      	uxthmi	r5, r5
 8004780:	2f6f      	cmp	r7, #111	@ 0x6f
 8004782:	4852      	ldr	r0, [pc, #328]	@ (80048cc <_printf_i+0x234>)
 8004784:	6033      	str	r3, [r6, #0]
 8004786:	bf14      	ite	ne
 8004788:	230a      	movne	r3, #10
 800478a:	2308      	moveq	r3, #8
 800478c:	2100      	movs	r1, #0
 800478e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004792:	6866      	ldr	r6, [r4, #4]
 8004794:	60a6      	str	r6, [r4, #8]
 8004796:	2e00      	cmp	r6, #0
 8004798:	db05      	blt.n	80047a6 <_printf_i+0x10e>
 800479a:	6821      	ldr	r1, [r4, #0]
 800479c:	432e      	orrs	r6, r5
 800479e:	f021 0104 	bic.w	r1, r1, #4
 80047a2:	6021      	str	r1, [r4, #0]
 80047a4:	d04b      	beq.n	800483e <_printf_i+0x1a6>
 80047a6:	4616      	mov	r6, r2
 80047a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80047ac:	fb03 5711 	mls	r7, r3, r1, r5
 80047b0:	5dc7      	ldrb	r7, [r0, r7]
 80047b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047b6:	462f      	mov	r7, r5
 80047b8:	42bb      	cmp	r3, r7
 80047ba:	460d      	mov	r5, r1
 80047bc:	d9f4      	bls.n	80047a8 <_printf_i+0x110>
 80047be:	2b08      	cmp	r3, #8
 80047c0:	d10b      	bne.n	80047da <_printf_i+0x142>
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	07df      	lsls	r7, r3, #31
 80047c6:	d508      	bpl.n	80047da <_printf_i+0x142>
 80047c8:	6923      	ldr	r3, [r4, #16]
 80047ca:	6861      	ldr	r1, [r4, #4]
 80047cc:	4299      	cmp	r1, r3
 80047ce:	bfde      	ittt	le
 80047d0:	2330      	movle	r3, #48	@ 0x30
 80047d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80047da:	1b92      	subs	r2, r2, r6
 80047dc:	6122      	str	r2, [r4, #16]
 80047de:	f8cd a000 	str.w	sl, [sp]
 80047e2:	464b      	mov	r3, r9
 80047e4:	aa03      	add	r2, sp, #12
 80047e6:	4621      	mov	r1, r4
 80047e8:	4640      	mov	r0, r8
 80047ea:	f7ff fee7 	bl	80045bc <_printf_common>
 80047ee:	3001      	adds	r0, #1
 80047f0:	d14a      	bne.n	8004888 <_printf_i+0x1f0>
 80047f2:	f04f 30ff 	mov.w	r0, #4294967295
 80047f6:	b004      	add	sp, #16
 80047f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047fc:	6823      	ldr	r3, [r4, #0]
 80047fe:	f043 0320 	orr.w	r3, r3, #32
 8004802:	6023      	str	r3, [r4, #0]
 8004804:	4832      	ldr	r0, [pc, #200]	@ (80048d0 <_printf_i+0x238>)
 8004806:	2778      	movs	r7, #120	@ 0x78
 8004808:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800480c:	6823      	ldr	r3, [r4, #0]
 800480e:	6831      	ldr	r1, [r6, #0]
 8004810:	061f      	lsls	r7, r3, #24
 8004812:	f851 5b04 	ldr.w	r5, [r1], #4
 8004816:	d402      	bmi.n	800481e <_printf_i+0x186>
 8004818:	065f      	lsls	r7, r3, #25
 800481a:	bf48      	it	mi
 800481c:	b2ad      	uxthmi	r5, r5
 800481e:	6031      	str	r1, [r6, #0]
 8004820:	07d9      	lsls	r1, r3, #31
 8004822:	bf44      	itt	mi
 8004824:	f043 0320 	orrmi.w	r3, r3, #32
 8004828:	6023      	strmi	r3, [r4, #0]
 800482a:	b11d      	cbz	r5, 8004834 <_printf_i+0x19c>
 800482c:	2310      	movs	r3, #16
 800482e:	e7ad      	b.n	800478c <_printf_i+0xf4>
 8004830:	4826      	ldr	r0, [pc, #152]	@ (80048cc <_printf_i+0x234>)
 8004832:	e7e9      	b.n	8004808 <_printf_i+0x170>
 8004834:	6823      	ldr	r3, [r4, #0]
 8004836:	f023 0320 	bic.w	r3, r3, #32
 800483a:	6023      	str	r3, [r4, #0]
 800483c:	e7f6      	b.n	800482c <_printf_i+0x194>
 800483e:	4616      	mov	r6, r2
 8004840:	e7bd      	b.n	80047be <_printf_i+0x126>
 8004842:	6833      	ldr	r3, [r6, #0]
 8004844:	6825      	ldr	r5, [r4, #0]
 8004846:	6961      	ldr	r1, [r4, #20]
 8004848:	1d18      	adds	r0, r3, #4
 800484a:	6030      	str	r0, [r6, #0]
 800484c:	062e      	lsls	r6, r5, #24
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	d501      	bpl.n	8004856 <_printf_i+0x1be>
 8004852:	6019      	str	r1, [r3, #0]
 8004854:	e002      	b.n	800485c <_printf_i+0x1c4>
 8004856:	0668      	lsls	r0, r5, #25
 8004858:	d5fb      	bpl.n	8004852 <_printf_i+0x1ba>
 800485a:	8019      	strh	r1, [r3, #0]
 800485c:	2300      	movs	r3, #0
 800485e:	6123      	str	r3, [r4, #16]
 8004860:	4616      	mov	r6, r2
 8004862:	e7bc      	b.n	80047de <_printf_i+0x146>
 8004864:	6833      	ldr	r3, [r6, #0]
 8004866:	1d1a      	adds	r2, r3, #4
 8004868:	6032      	str	r2, [r6, #0]
 800486a:	681e      	ldr	r6, [r3, #0]
 800486c:	6862      	ldr	r2, [r4, #4]
 800486e:	2100      	movs	r1, #0
 8004870:	4630      	mov	r0, r6
 8004872:	f7fb fcb5 	bl	80001e0 <memchr>
 8004876:	b108      	cbz	r0, 800487c <_printf_i+0x1e4>
 8004878:	1b80      	subs	r0, r0, r6
 800487a:	6060      	str	r0, [r4, #4]
 800487c:	6863      	ldr	r3, [r4, #4]
 800487e:	6123      	str	r3, [r4, #16]
 8004880:	2300      	movs	r3, #0
 8004882:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004886:	e7aa      	b.n	80047de <_printf_i+0x146>
 8004888:	6923      	ldr	r3, [r4, #16]
 800488a:	4632      	mov	r2, r6
 800488c:	4649      	mov	r1, r9
 800488e:	4640      	mov	r0, r8
 8004890:	47d0      	blx	sl
 8004892:	3001      	adds	r0, #1
 8004894:	d0ad      	beq.n	80047f2 <_printf_i+0x15a>
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	079b      	lsls	r3, r3, #30
 800489a:	d413      	bmi.n	80048c4 <_printf_i+0x22c>
 800489c:	68e0      	ldr	r0, [r4, #12]
 800489e:	9b03      	ldr	r3, [sp, #12]
 80048a0:	4298      	cmp	r0, r3
 80048a2:	bfb8      	it	lt
 80048a4:	4618      	movlt	r0, r3
 80048a6:	e7a6      	b.n	80047f6 <_printf_i+0x15e>
 80048a8:	2301      	movs	r3, #1
 80048aa:	4632      	mov	r2, r6
 80048ac:	4649      	mov	r1, r9
 80048ae:	4640      	mov	r0, r8
 80048b0:	47d0      	blx	sl
 80048b2:	3001      	adds	r0, #1
 80048b4:	d09d      	beq.n	80047f2 <_printf_i+0x15a>
 80048b6:	3501      	adds	r5, #1
 80048b8:	68e3      	ldr	r3, [r4, #12]
 80048ba:	9903      	ldr	r1, [sp, #12]
 80048bc:	1a5b      	subs	r3, r3, r1
 80048be:	42ab      	cmp	r3, r5
 80048c0:	dcf2      	bgt.n	80048a8 <_printf_i+0x210>
 80048c2:	e7eb      	b.n	800489c <_printf_i+0x204>
 80048c4:	2500      	movs	r5, #0
 80048c6:	f104 0619 	add.w	r6, r4, #25
 80048ca:	e7f5      	b.n	80048b8 <_printf_i+0x220>
 80048cc:	0800a6f1 	.word	0x0800a6f1
 80048d0:	0800a702 	.word	0x0800a702

080048d4 <_sbrk_r>:
 80048d4:	b538      	push	{r3, r4, r5, lr}
 80048d6:	4d06      	ldr	r5, [pc, #24]	@ (80048f0 <_sbrk_r+0x1c>)
 80048d8:	2300      	movs	r3, #0
 80048da:	4604      	mov	r4, r0
 80048dc:	4608      	mov	r0, r1
 80048de:	602b      	str	r3, [r5, #0]
 80048e0:	f7fd ff26 	bl	8002730 <_sbrk>
 80048e4:	1c43      	adds	r3, r0, #1
 80048e6:	d102      	bne.n	80048ee <_sbrk_r+0x1a>
 80048e8:	682b      	ldr	r3, [r5, #0]
 80048ea:	b103      	cbz	r3, 80048ee <_sbrk_r+0x1a>
 80048ec:	6023      	str	r3, [r4, #0]
 80048ee:	bd38      	pop	{r3, r4, r5, pc}
 80048f0:	20000414 	.word	0x20000414

080048f4 <_realloc_r>:
 80048f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048f8:	4607      	mov	r7, r0
 80048fa:	4614      	mov	r4, r2
 80048fc:	460d      	mov	r5, r1
 80048fe:	b921      	cbnz	r1, 800490a <_realloc_r+0x16>
 8004900:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004904:	4611      	mov	r1, r2
 8004906:	f7ff bc75 	b.w	80041f4 <_malloc_r>
 800490a:	b92a      	cbnz	r2, 8004918 <_realloc_r+0x24>
 800490c:	f7ff fc06 	bl	800411c <_free_r>
 8004910:	4625      	mov	r5, r4
 8004912:	4628      	mov	r0, r5
 8004914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004918:	f000 f81a 	bl	8004950 <_malloc_usable_size_r>
 800491c:	4284      	cmp	r4, r0
 800491e:	4606      	mov	r6, r0
 8004920:	d802      	bhi.n	8004928 <_realloc_r+0x34>
 8004922:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004926:	d8f4      	bhi.n	8004912 <_realloc_r+0x1e>
 8004928:	4621      	mov	r1, r4
 800492a:	4638      	mov	r0, r7
 800492c:	f7ff fc62 	bl	80041f4 <_malloc_r>
 8004930:	4680      	mov	r8, r0
 8004932:	b908      	cbnz	r0, 8004938 <_realloc_r+0x44>
 8004934:	4645      	mov	r5, r8
 8004936:	e7ec      	b.n	8004912 <_realloc_r+0x1e>
 8004938:	42b4      	cmp	r4, r6
 800493a:	4622      	mov	r2, r4
 800493c:	4629      	mov	r1, r5
 800493e:	bf28      	it	cs
 8004940:	4632      	movcs	r2, r6
 8004942:	f7ff fbdd 	bl	8004100 <memcpy>
 8004946:	4629      	mov	r1, r5
 8004948:	4638      	mov	r0, r7
 800494a:	f7ff fbe7 	bl	800411c <_free_r>
 800494e:	e7f1      	b.n	8004934 <_realloc_r+0x40>

08004950 <_malloc_usable_size_r>:
 8004950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004954:	1f18      	subs	r0, r3, #4
 8004956:	2b00      	cmp	r3, #0
 8004958:	bfbc      	itt	lt
 800495a:	580b      	ldrlt	r3, [r1, r0]
 800495c:	18c0      	addlt	r0, r0, r3
 800495e:	4770      	bx	lr

08004960 <cosf>:
 8004960:	ee10 3a10 	vmov	r3, s0
 8004964:	b507      	push	{r0, r1, r2, lr}
 8004966:	4a1e      	ldr	r2, [pc, #120]	@ (80049e0 <cosf+0x80>)
 8004968:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800496c:	4293      	cmp	r3, r2
 800496e:	d806      	bhi.n	800497e <cosf+0x1e>
 8004970:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80049e4 <cosf+0x84>
 8004974:	b003      	add	sp, #12
 8004976:	f85d eb04 	ldr.w	lr, [sp], #4
 800497a:	f000 b87b 	b.w	8004a74 <__kernel_cosf>
 800497e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8004982:	d304      	bcc.n	800498e <cosf+0x2e>
 8004984:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004988:	b003      	add	sp, #12
 800498a:	f85d fb04 	ldr.w	pc, [sp], #4
 800498e:	4668      	mov	r0, sp
 8004990:	f000 f910 	bl	8004bb4 <__ieee754_rem_pio2f>
 8004994:	f000 0003 	and.w	r0, r0, #3
 8004998:	2801      	cmp	r0, #1
 800499a:	d009      	beq.n	80049b0 <cosf+0x50>
 800499c:	2802      	cmp	r0, #2
 800499e:	d010      	beq.n	80049c2 <cosf+0x62>
 80049a0:	b9b0      	cbnz	r0, 80049d0 <cosf+0x70>
 80049a2:	eddd 0a01 	vldr	s1, [sp, #4]
 80049a6:	ed9d 0a00 	vldr	s0, [sp]
 80049aa:	f000 f863 	bl	8004a74 <__kernel_cosf>
 80049ae:	e7eb      	b.n	8004988 <cosf+0x28>
 80049b0:	eddd 0a01 	vldr	s1, [sp, #4]
 80049b4:	ed9d 0a00 	vldr	s0, [sp]
 80049b8:	f000 f8b4 	bl	8004b24 <__kernel_sinf>
 80049bc:	eeb1 0a40 	vneg.f32	s0, s0
 80049c0:	e7e2      	b.n	8004988 <cosf+0x28>
 80049c2:	eddd 0a01 	vldr	s1, [sp, #4]
 80049c6:	ed9d 0a00 	vldr	s0, [sp]
 80049ca:	f000 f853 	bl	8004a74 <__kernel_cosf>
 80049ce:	e7f5      	b.n	80049bc <cosf+0x5c>
 80049d0:	eddd 0a01 	vldr	s1, [sp, #4]
 80049d4:	ed9d 0a00 	vldr	s0, [sp]
 80049d8:	2001      	movs	r0, #1
 80049da:	f000 f8a3 	bl	8004b24 <__kernel_sinf>
 80049de:	e7d3      	b.n	8004988 <cosf+0x28>
 80049e0:	3f490fd8 	.word	0x3f490fd8
 80049e4:	00000000 	.word	0x00000000

080049e8 <sinf>:
 80049e8:	ee10 3a10 	vmov	r3, s0
 80049ec:	b507      	push	{r0, r1, r2, lr}
 80049ee:	4a1f      	ldr	r2, [pc, #124]	@ (8004a6c <sinf+0x84>)
 80049f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d807      	bhi.n	8004a08 <sinf+0x20>
 80049f8:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8004a70 <sinf+0x88>
 80049fc:	2000      	movs	r0, #0
 80049fe:	b003      	add	sp, #12
 8004a00:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a04:	f000 b88e 	b.w	8004b24 <__kernel_sinf>
 8004a08:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8004a0c:	d304      	bcc.n	8004a18 <sinf+0x30>
 8004a0e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004a12:	b003      	add	sp, #12
 8004a14:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a18:	4668      	mov	r0, sp
 8004a1a:	f000 f8cb 	bl	8004bb4 <__ieee754_rem_pio2f>
 8004a1e:	f000 0003 	and.w	r0, r0, #3
 8004a22:	2801      	cmp	r0, #1
 8004a24:	d00a      	beq.n	8004a3c <sinf+0x54>
 8004a26:	2802      	cmp	r0, #2
 8004a28:	d00f      	beq.n	8004a4a <sinf+0x62>
 8004a2a:	b9c0      	cbnz	r0, 8004a5e <sinf+0x76>
 8004a2c:	eddd 0a01 	vldr	s1, [sp, #4]
 8004a30:	ed9d 0a00 	vldr	s0, [sp]
 8004a34:	2001      	movs	r0, #1
 8004a36:	f000 f875 	bl	8004b24 <__kernel_sinf>
 8004a3a:	e7ea      	b.n	8004a12 <sinf+0x2a>
 8004a3c:	eddd 0a01 	vldr	s1, [sp, #4]
 8004a40:	ed9d 0a00 	vldr	s0, [sp]
 8004a44:	f000 f816 	bl	8004a74 <__kernel_cosf>
 8004a48:	e7e3      	b.n	8004a12 <sinf+0x2a>
 8004a4a:	eddd 0a01 	vldr	s1, [sp, #4]
 8004a4e:	ed9d 0a00 	vldr	s0, [sp]
 8004a52:	2001      	movs	r0, #1
 8004a54:	f000 f866 	bl	8004b24 <__kernel_sinf>
 8004a58:	eeb1 0a40 	vneg.f32	s0, s0
 8004a5c:	e7d9      	b.n	8004a12 <sinf+0x2a>
 8004a5e:	eddd 0a01 	vldr	s1, [sp, #4]
 8004a62:	ed9d 0a00 	vldr	s0, [sp]
 8004a66:	f000 f805 	bl	8004a74 <__kernel_cosf>
 8004a6a:	e7f5      	b.n	8004a58 <sinf+0x70>
 8004a6c:	3f490fd8 	.word	0x3f490fd8
 8004a70:	00000000 	.word	0x00000000

08004a74 <__kernel_cosf>:
 8004a74:	ee10 3a10 	vmov	r3, s0
 8004a78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a7c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8004a80:	eef0 6a40 	vmov.f32	s13, s0
 8004a84:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004a88:	d204      	bcs.n	8004a94 <__kernel_cosf+0x20>
 8004a8a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8004a8e:	ee17 2a90 	vmov	r2, s15
 8004a92:	b342      	cbz	r2, 8004ae6 <__kernel_cosf+0x72>
 8004a94:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8004a98:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8004b04 <__kernel_cosf+0x90>
 8004a9c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8004b08 <__kernel_cosf+0x94>
 8004aa0:	4a1a      	ldr	r2, [pc, #104]	@ (8004b0c <__kernel_cosf+0x98>)
 8004aa2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8004b10 <__kernel_cosf+0x9c>
 8004aac:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004ab0:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8004b14 <__kernel_cosf+0xa0>
 8004ab4:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004ab8:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8004b18 <__kernel_cosf+0xa4>
 8004abc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004ac0:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8004b1c <__kernel_cosf+0xa8>
 8004ac4:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004ac8:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8004acc:	ee26 6a07 	vmul.f32	s12, s12, s14
 8004ad0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004ad4:	eee7 0a06 	vfma.f32	s1, s14, s12
 8004ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004adc:	d804      	bhi.n	8004ae8 <__kernel_cosf+0x74>
 8004ade:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8004ae2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004ae6:	4770      	bx	lr
 8004ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8004b20 <__kernel_cosf+0xac>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	bf9a      	itte	ls
 8004aee:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8004af2:	ee07 3a10 	vmovls	s14, r3
 8004af6:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8004afa:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004afe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b02:	e7ec      	b.n	8004ade <__kernel_cosf+0x6a>
 8004b04:	ad47d74e 	.word	0xad47d74e
 8004b08:	310f74f6 	.word	0x310f74f6
 8004b0c:	3e999999 	.word	0x3e999999
 8004b10:	b493f27c 	.word	0xb493f27c
 8004b14:	37d00d01 	.word	0x37d00d01
 8004b18:	bab60b61 	.word	0xbab60b61
 8004b1c:	3d2aaaab 	.word	0x3d2aaaab
 8004b20:	3f480000 	.word	0x3f480000

08004b24 <__kernel_sinf>:
 8004b24:	ee10 3a10 	vmov	r3, s0
 8004b28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b2c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8004b30:	d204      	bcs.n	8004b3c <__kernel_sinf+0x18>
 8004b32:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004b36:	ee17 3a90 	vmov	r3, s15
 8004b3a:	b35b      	cbz	r3, 8004b94 <__kernel_sinf+0x70>
 8004b3c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004b40:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8004b98 <__kernel_sinf+0x74>
 8004b44:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8004b9c <__kernel_sinf+0x78>
 8004b48:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004b4c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8004ba0 <__kernel_sinf+0x7c>
 8004b50:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004b54:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8004ba4 <__kernel_sinf+0x80>
 8004b58:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004b5c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8004ba8 <__kernel_sinf+0x84>
 8004b60:	ee60 6a07 	vmul.f32	s13, s0, s14
 8004b64:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004b68:	b930      	cbnz	r0, 8004b78 <__kernel_sinf+0x54>
 8004b6a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8004bac <__kernel_sinf+0x88>
 8004b6e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004b72:	eea6 0a26 	vfma.f32	s0, s12, s13
 8004b76:	4770      	bx	lr
 8004b78:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004b7c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8004b80:	eee0 7a86 	vfma.f32	s15, s1, s12
 8004b84:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8004b88:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8004bb0 <__kernel_sinf+0x8c>
 8004b8c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8004b90:	ee30 0a60 	vsub.f32	s0, s0, s1
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	2f2ec9d3 	.word	0x2f2ec9d3
 8004b9c:	b2d72f34 	.word	0xb2d72f34
 8004ba0:	3638ef1b 	.word	0x3638ef1b
 8004ba4:	b9500d01 	.word	0xb9500d01
 8004ba8:	3c088889 	.word	0x3c088889
 8004bac:	be2aaaab 	.word	0xbe2aaaab
 8004bb0:	3e2aaaab 	.word	0x3e2aaaab

08004bb4 <__ieee754_rem_pio2f>:
 8004bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bb6:	ee10 6a10 	vmov	r6, s0
 8004bba:	4b88      	ldr	r3, [pc, #544]	@ (8004ddc <__ieee754_rem_pio2f+0x228>)
 8004bbc:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8004bc0:	429d      	cmp	r5, r3
 8004bc2:	b087      	sub	sp, #28
 8004bc4:	4604      	mov	r4, r0
 8004bc6:	d805      	bhi.n	8004bd4 <__ieee754_rem_pio2f+0x20>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	ed80 0a00 	vstr	s0, [r0]
 8004bce:	6043      	str	r3, [r0, #4]
 8004bd0:	2000      	movs	r0, #0
 8004bd2:	e022      	b.n	8004c1a <__ieee754_rem_pio2f+0x66>
 8004bd4:	4b82      	ldr	r3, [pc, #520]	@ (8004de0 <__ieee754_rem_pio2f+0x22c>)
 8004bd6:	429d      	cmp	r5, r3
 8004bd8:	d83a      	bhi.n	8004c50 <__ieee754_rem_pio2f+0x9c>
 8004bda:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8004bde:	2e00      	cmp	r6, #0
 8004be0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8004de4 <__ieee754_rem_pio2f+0x230>
 8004be4:	4a80      	ldr	r2, [pc, #512]	@ (8004de8 <__ieee754_rem_pio2f+0x234>)
 8004be6:	f023 030f 	bic.w	r3, r3, #15
 8004bea:	dd18      	ble.n	8004c1e <__ieee754_rem_pio2f+0x6a>
 8004bec:	4293      	cmp	r3, r2
 8004bee:	ee70 7a47 	vsub.f32	s15, s0, s14
 8004bf2:	bf09      	itett	eq
 8004bf4:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8004dec <__ieee754_rem_pio2f+0x238>
 8004bf8:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8004df0 <__ieee754_rem_pio2f+0x23c>
 8004bfc:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8004df4 <__ieee754_rem_pio2f+0x240>
 8004c00:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8004c04:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8004c08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c0c:	ed80 7a00 	vstr	s14, [r0]
 8004c10:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004c14:	edc0 7a01 	vstr	s15, [r0, #4]
 8004c18:	2001      	movs	r0, #1
 8004c1a:	b007      	add	sp, #28
 8004c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	ee70 7a07 	vadd.f32	s15, s0, s14
 8004c24:	bf09      	itett	eq
 8004c26:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8004dec <__ieee754_rem_pio2f+0x238>
 8004c2a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8004df0 <__ieee754_rem_pio2f+0x23c>
 8004c2e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8004df4 <__ieee754_rem_pio2f+0x240>
 8004c32:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8004c36:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004c3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c3e:	ed80 7a00 	vstr	s14, [r0]
 8004c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c46:	edc0 7a01 	vstr	s15, [r0, #4]
 8004c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c4e:	e7e4      	b.n	8004c1a <__ieee754_rem_pio2f+0x66>
 8004c50:	4b69      	ldr	r3, [pc, #420]	@ (8004df8 <__ieee754_rem_pio2f+0x244>)
 8004c52:	429d      	cmp	r5, r3
 8004c54:	d873      	bhi.n	8004d3e <__ieee754_rem_pio2f+0x18a>
 8004c56:	f000 f8dd 	bl	8004e14 <fabsf>
 8004c5a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8004dfc <__ieee754_rem_pio2f+0x248>
 8004c5e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004c62:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004c66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c6e:	ee17 0a90 	vmov	r0, s15
 8004c72:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8004de4 <__ieee754_rem_pio2f+0x230>
 8004c76:	eea7 0a67 	vfms.f32	s0, s14, s15
 8004c7a:	281f      	cmp	r0, #31
 8004c7c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8004df0 <__ieee754_rem_pio2f+0x23c>
 8004c80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c84:	eeb1 6a47 	vneg.f32	s12, s14
 8004c88:	ee70 6a67 	vsub.f32	s13, s0, s15
 8004c8c:	ee16 1a90 	vmov	r1, s13
 8004c90:	dc09      	bgt.n	8004ca6 <__ieee754_rem_pio2f+0xf2>
 8004c92:	4a5b      	ldr	r2, [pc, #364]	@ (8004e00 <__ieee754_rem_pio2f+0x24c>)
 8004c94:	1e47      	subs	r7, r0, #1
 8004c96:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8004c9a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8004c9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d107      	bne.n	8004cb6 <__ieee754_rem_pio2f+0x102>
 8004ca6:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8004caa:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8004cae:	2a08      	cmp	r2, #8
 8004cb0:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8004cb4:	dc14      	bgt.n	8004ce0 <__ieee754_rem_pio2f+0x12c>
 8004cb6:	6021      	str	r1, [r4, #0]
 8004cb8:	ed94 7a00 	vldr	s14, [r4]
 8004cbc:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004cc0:	2e00      	cmp	r6, #0
 8004cc2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004cc6:	ed84 0a01 	vstr	s0, [r4, #4]
 8004cca:	daa6      	bge.n	8004c1a <__ieee754_rem_pio2f+0x66>
 8004ccc:	eeb1 7a47 	vneg.f32	s14, s14
 8004cd0:	eeb1 0a40 	vneg.f32	s0, s0
 8004cd4:	ed84 7a00 	vstr	s14, [r4]
 8004cd8:	ed84 0a01 	vstr	s0, [r4, #4]
 8004cdc:	4240      	negs	r0, r0
 8004cde:	e79c      	b.n	8004c1a <__ieee754_rem_pio2f+0x66>
 8004ce0:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8004dec <__ieee754_rem_pio2f+0x238>
 8004ce4:	eef0 6a40 	vmov.f32	s13, s0
 8004ce8:	eee6 6a25 	vfma.f32	s13, s12, s11
 8004cec:	ee70 7a66 	vsub.f32	s15, s0, s13
 8004cf0:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004cf4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004df4 <__ieee754_rem_pio2f+0x240>
 8004cf8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8004cfc:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8004d00:	ee15 2a90 	vmov	r2, s11
 8004d04:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8004d08:	1a5b      	subs	r3, r3, r1
 8004d0a:	2b19      	cmp	r3, #25
 8004d0c:	dc04      	bgt.n	8004d18 <__ieee754_rem_pio2f+0x164>
 8004d0e:	edc4 5a00 	vstr	s11, [r4]
 8004d12:	eeb0 0a66 	vmov.f32	s0, s13
 8004d16:	e7cf      	b.n	8004cb8 <__ieee754_rem_pio2f+0x104>
 8004d18:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8004e04 <__ieee754_rem_pio2f+0x250>
 8004d1c:	eeb0 0a66 	vmov.f32	s0, s13
 8004d20:	eea6 0a25 	vfma.f32	s0, s12, s11
 8004d24:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8004d28:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8004e08 <__ieee754_rem_pio2f+0x254>
 8004d2c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004d30:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8004d34:	ee30 7a67 	vsub.f32	s14, s0, s15
 8004d38:	ed84 7a00 	vstr	s14, [r4]
 8004d3c:	e7bc      	b.n	8004cb8 <__ieee754_rem_pio2f+0x104>
 8004d3e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8004d42:	d306      	bcc.n	8004d52 <__ieee754_rem_pio2f+0x19e>
 8004d44:	ee70 7a40 	vsub.f32	s15, s0, s0
 8004d48:	edc0 7a01 	vstr	s15, [r0, #4]
 8004d4c:	edc0 7a00 	vstr	s15, [r0]
 8004d50:	e73e      	b.n	8004bd0 <__ieee754_rem_pio2f+0x1c>
 8004d52:	15ea      	asrs	r2, r5, #23
 8004d54:	3a86      	subs	r2, #134	@ 0x86
 8004d56:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8004d5a:	ee07 3a90 	vmov	s15, r3
 8004d5e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004d62:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8004e0c <__ieee754_rem_pio2f+0x258>
 8004d66:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004d6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d6e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8004d72:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004d76:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004d7a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004d7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d82:	ed8d 7a04 	vstr	s14, [sp, #16]
 8004d86:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004d8a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d92:	edcd 7a05 	vstr	s15, [sp, #20]
 8004d96:	d11e      	bne.n	8004dd6 <__ieee754_rem_pio2f+0x222>
 8004d98:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da0:	bf0c      	ite	eq
 8004da2:	2301      	moveq	r3, #1
 8004da4:	2302      	movne	r3, #2
 8004da6:	491a      	ldr	r1, [pc, #104]	@ (8004e10 <__ieee754_rem_pio2f+0x25c>)
 8004da8:	9101      	str	r1, [sp, #4]
 8004daa:	2102      	movs	r1, #2
 8004dac:	9100      	str	r1, [sp, #0]
 8004dae:	a803      	add	r0, sp, #12
 8004db0:	4621      	mov	r1, r4
 8004db2:	f000 f837 	bl	8004e24 <__kernel_rem_pio2f>
 8004db6:	2e00      	cmp	r6, #0
 8004db8:	f6bf af2f 	bge.w	8004c1a <__ieee754_rem_pio2f+0x66>
 8004dbc:	edd4 7a00 	vldr	s15, [r4]
 8004dc0:	eef1 7a67 	vneg.f32	s15, s15
 8004dc4:	edc4 7a00 	vstr	s15, [r4]
 8004dc8:	edd4 7a01 	vldr	s15, [r4, #4]
 8004dcc:	eef1 7a67 	vneg.f32	s15, s15
 8004dd0:	edc4 7a01 	vstr	s15, [r4, #4]
 8004dd4:	e782      	b.n	8004cdc <__ieee754_rem_pio2f+0x128>
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e7e5      	b.n	8004da6 <__ieee754_rem_pio2f+0x1f2>
 8004dda:	bf00      	nop
 8004ddc:	3f490fd8 	.word	0x3f490fd8
 8004de0:	4016cbe3 	.word	0x4016cbe3
 8004de4:	3fc90f80 	.word	0x3fc90f80
 8004de8:	3fc90fd0 	.word	0x3fc90fd0
 8004dec:	37354400 	.word	0x37354400
 8004df0:	37354443 	.word	0x37354443
 8004df4:	2e85a308 	.word	0x2e85a308
 8004df8:	43490f80 	.word	0x43490f80
 8004dfc:	3f22f984 	.word	0x3f22f984
 8004e00:	0800a714 	.word	0x0800a714
 8004e04:	2e85a300 	.word	0x2e85a300
 8004e08:	248d3132 	.word	0x248d3132
 8004e0c:	43800000 	.word	0x43800000
 8004e10:	0800a794 	.word	0x0800a794

08004e14 <fabsf>:
 8004e14:	ee10 3a10 	vmov	r3, s0
 8004e18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004e1c:	ee00 3a10 	vmov	s0, r3
 8004e20:	4770      	bx	lr
	...

08004e24 <__kernel_rem_pio2f>:
 8004e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e28:	ed2d 8b04 	vpush	{d8-d9}
 8004e2c:	b0d9      	sub	sp, #356	@ 0x164
 8004e2e:	4690      	mov	r8, r2
 8004e30:	9001      	str	r0, [sp, #4]
 8004e32:	4ab6      	ldr	r2, [pc, #728]	@ (800510c <__kernel_rem_pio2f+0x2e8>)
 8004e34:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8004e36:	f118 0f04 	cmn.w	r8, #4
 8004e3a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8004e3e:	460f      	mov	r7, r1
 8004e40:	f103 3bff 	add.w	fp, r3, #4294967295
 8004e44:	db26      	blt.n	8004e94 <__kernel_rem_pio2f+0x70>
 8004e46:	f1b8 0203 	subs.w	r2, r8, #3
 8004e4a:	bf48      	it	mi
 8004e4c:	f108 0204 	addmi.w	r2, r8, #4
 8004e50:	10d2      	asrs	r2, r2, #3
 8004e52:	1c55      	adds	r5, r2, #1
 8004e54:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8004e56:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800511c <__kernel_rem_pio2f+0x2f8>
 8004e5a:	00e8      	lsls	r0, r5, #3
 8004e5c:	eba2 060b 	sub.w	r6, r2, fp
 8004e60:	9002      	str	r0, [sp, #8]
 8004e62:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8004e66:	eb0a 0c0b 	add.w	ip, sl, fp
 8004e6a:	ac1c      	add	r4, sp, #112	@ 0x70
 8004e6c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8004e70:	2000      	movs	r0, #0
 8004e72:	4560      	cmp	r0, ip
 8004e74:	dd10      	ble.n	8004e98 <__kernel_rem_pio2f+0x74>
 8004e76:	a91c      	add	r1, sp, #112	@ 0x70
 8004e78:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8004e7c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8004e80:	2600      	movs	r6, #0
 8004e82:	4556      	cmp	r6, sl
 8004e84:	dc24      	bgt.n	8004ed0 <__kernel_rem_pio2f+0xac>
 8004e86:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004e8a:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800511c <__kernel_rem_pio2f+0x2f8>
 8004e8e:	4684      	mov	ip, r0
 8004e90:	2400      	movs	r4, #0
 8004e92:	e016      	b.n	8004ec2 <__kernel_rem_pio2f+0x9e>
 8004e94:	2200      	movs	r2, #0
 8004e96:	e7dc      	b.n	8004e52 <__kernel_rem_pio2f+0x2e>
 8004e98:	42c6      	cmn	r6, r0
 8004e9a:	bf5d      	ittte	pl
 8004e9c:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8004ea0:	ee07 1a90 	vmovpl	s15, r1
 8004ea4:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8004ea8:	eef0 7a47 	vmovmi.f32	s15, s14
 8004eac:	ece4 7a01 	vstmia	r4!, {s15}
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	e7de      	b.n	8004e72 <__kernel_rem_pio2f+0x4e>
 8004eb4:	ecfe 6a01 	vldmia	lr!, {s13}
 8004eb8:	ed3c 7a01 	vldmdb	ip!, {s14}
 8004ebc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004ec0:	3401      	adds	r4, #1
 8004ec2:	455c      	cmp	r4, fp
 8004ec4:	ddf6      	ble.n	8004eb4 <__kernel_rem_pio2f+0x90>
 8004ec6:	ece9 7a01 	vstmia	r9!, {s15}
 8004eca:	3601      	adds	r6, #1
 8004ecc:	3004      	adds	r0, #4
 8004ece:	e7d8      	b.n	8004e82 <__kernel_rem_pio2f+0x5e>
 8004ed0:	a908      	add	r1, sp, #32
 8004ed2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004ed6:	9104      	str	r1, [sp, #16]
 8004ed8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8004eda:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8005118 <__kernel_rem_pio2f+0x2f4>
 8004ede:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8005114 <__kernel_rem_pio2f+0x2f0>
 8004ee2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8004ee6:	9203      	str	r2, [sp, #12]
 8004ee8:	4654      	mov	r4, sl
 8004eea:	00a2      	lsls	r2, r4, #2
 8004eec:	9205      	str	r2, [sp, #20]
 8004eee:	aa58      	add	r2, sp, #352	@ 0x160
 8004ef0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8004ef4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8004ef8:	a944      	add	r1, sp, #272	@ 0x110
 8004efa:	aa08      	add	r2, sp, #32
 8004efc:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8004f00:	4694      	mov	ip, r2
 8004f02:	4626      	mov	r6, r4
 8004f04:	2e00      	cmp	r6, #0
 8004f06:	dc4c      	bgt.n	8004fa2 <__kernel_rem_pio2f+0x17e>
 8004f08:	4628      	mov	r0, r5
 8004f0a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004f0e:	f000 f9f1 	bl	80052f4 <scalbnf>
 8004f12:	eeb0 8a40 	vmov.f32	s16, s0
 8004f16:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8004f1a:	ee28 0a00 	vmul.f32	s0, s16, s0
 8004f1e:	f000 fa4f 	bl	80053c0 <floorf>
 8004f22:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8004f26:	eea0 8a67 	vfms.f32	s16, s0, s15
 8004f2a:	2d00      	cmp	r5, #0
 8004f2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004f30:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8004f34:	ee17 9a90 	vmov	r9, s15
 8004f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f3c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8004f40:	dd41      	ble.n	8004fc6 <__kernel_rem_pio2f+0x1a2>
 8004f42:	f104 3cff 	add.w	ip, r4, #4294967295
 8004f46:	a908      	add	r1, sp, #32
 8004f48:	f1c5 0e08 	rsb	lr, r5, #8
 8004f4c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8004f50:	fa46 f00e 	asr.w	r0, r6, lr
 8004f54:	4481      	add	r9, r0
 8004f56:	fa00 f00e 	lsl.w	r0, r0, lr
 8004f5a:	1a36      	subs	r6, r6, r0
 8004f5c:	f1c5 0007 	rsb	r0, r5, #7
 8004f60:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8004f64:	4106      	asrs	r6, r0
 8004f66:	2e00      	cmp	r6, #0
 8004f68:	dd3c      	ble.n	8004fe4 <__kernel_rem_pio2f+0x1c0>
 8004f6a:	f04f 0e00 	mov.w	lr, #0
 8004f6e:	f109 0901 	add.w	r9, r9, #1
 8004f72:	4670      	mov	r0, lr
 8004f74:	4574      	cmp	r4, lr
 8004f76:	dc68      	bgt.n	800504a <__kernel_rem_pio2f+0x226>
 8004f78:	2d00      	cmp	r5, #0
 8004f7a:	dd03      	ble.n	8004f84 <__kernel_rem_pio2f+0x160>
 8004f7c:	2d01      	cmp	r5, #1
 8004f7e:	d074      	beq.n	800506a <__kernel_rem_pio2f+0x246>
 8004f80:	2d02      	cmp	r5, #2
 8004f82:	d07d      	beq.n	8005080 <__kernel_rem_pio2f+0x25c>
 8004f84:	2e02      	cmp	r6, #2
 8004f86:	d12d      	bne.n	8004fe4 <__kernel_rem_pio2f+0x1c0>
 8004f88:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004f8c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8004f90:	b340      	cbz	r0, 8004fe4 <__kernel_rem_pio2f+0x1c0>
 8004f92:	4628      	mov	r0, r5
 8004f94:	9306      	str	r3, [sp, #24]
 8004f96:	f000 f9ad 	bl	80052f4 <scalbnf>
 8004f9a:	9b06      	ldr	r3, [sp, #24]
 8004f9c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004fa0:	e020      	b.n	8004fe4 <__kernel_rem_pio2f+0x1c0>
 8004fa2:	ee60 7a28 	vmul.f32	s15, s0, s17
 8004fa6:	3e01      	subs	r6, #1
 8004fa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fb0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8004fb4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004fb8:	ecac 0a01 	vstmia	ip!, {s0}
 8004fbc:	ed30 0a01 	vldmdb	r0!, {s0}
 8004fc0:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004fc4:	e79e      	b.n	8004f04 <__kernel_rem_pio2f+0xe0>
 8004fc6:	d105      	bne.n	8004fd4 <__kernel_rem_pio2f+0x1b0>
 8004fc8:	1e60      	subs	r0, r4, #1
 8004fca:	a908      	add	r1, sp, #32
 8004fcc:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8004fd0:	11f6      	asrs	r6, r6, #7
 8004fd2:	e7c8      	b.n	8004f66 <__kernel_rem_pio2f+0x142>
 8004fd4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004fd8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fe0:	da31      	bge.n	8005046 <__kernel_rem_pio2f+0x222>
 8004fe2:	2600      	movs	r6, #0
 8004fe4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fec:	f040 8098 	bne.w	8005120 <__kernel_rem_pio2f+0x2fc>
 8004ff0:	1e60      	subs	r0, r4, #1
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	4550      	cmp	r0, sl
 8004ff6:	da4b      	bge.n	8005090 <__kernel_rem_pio2f+0x26c>
 8004ff8:	2a00      	cmp	r2, #0
 8004ffa:	d065      	beq.n	80050c8 <__kernel_rem_pio2f+0x2a4>
 8004ffc:	3c01      	subs	r4, #1
 8004ffe:	ab08      	add	r3, sp, #32
 8005000:	3d08      	subs	r5, #8
 8005002:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d0f8      	beq.n	8004ffc <__kernel_rem_pio2f+0x1d8>
 800500a:	4628      	mov	r0, r5
 800500c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005010:	f000 f970 	bl	80052f4 <scalbnf>
 8005014:	1c63      	adds	r3, r4, #1
 8005016:	aa44      	add	r2, sp, #272	@ 0x110
 8005018:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8005118 <__kernel_rem_pio2f+0x2f4>
 800501c:	0099      	lsls	r1, r3, #2
 800501e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005022:	4623      	mov	r3, r4
 8005024:	2b00      	cmp	r3, #0
 8005026:	f280 80a9 	bge.w	800517c <__kernel_rem_pio2f+0x358>
 800502a:	4623      	mov	r3, r4
 800502c:	2b00      	cmp	r3, #0
 800502e:	f2c0 80c7 	blt.w	80051c0 <__kernel_rem_pio2f+0x39c>
 8005032:	aa44      	add	r2, sp, #272	@ 0x110
 8005034:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8005038:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8005110 <__kernel_rem_pio2f+0x2ec>
 800503c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800511c <__kernel_rem_pio2f+0x2f8>
 8005040:	2000      	movs	r0, #0
 8005042:	1ae2      	subs	r2, r4, r3
 8005044:	e0b1      	b.n	80051aa <__kernel_rem_pio2f+0x386>
 8005046:	2602      	movs	r6, #2
 8005048:	e78f      	b.n	8004f6a <__kernel_rem_pio2f+0x146>
 800504a:	f852 1b04 	ldr.w	r1, [r2], #4
 800504e:	b948      	cbnz	r0, 8005064 <__kernel_rem_pio2f+0x240>
 8005050:	b121      	cbz	r1, 800505c <__kernel_rem_pio2f+0x238>
 8005052:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8005056:	f842 1c04 	str.w	r1, [r2, #-4]
 800505a:	2101      	movs	r1, #1
 800505c:	f10e 0e01 	add.w	lr, lr, #1
 8005060:	4608      	mov	r0, r1
 8005062:	e787      	b.n	8004f74 <__kernel_rem_pio2f+0x150>
 8005064:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8005068:	e7f5      	b.n	8005056 <__kernel_rem_pio2f+0x232>
 800506a:	f104 3cff 	add.w	ip, r4, #4294967295
 800506e:	aa08      	add	r2, sp, #32
 8005070:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8005074:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005078:	a908      	add	r1, sp, #32
 800507a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800507e:	e781      	b.n	8004f84 <__kernel_rem_pio2f+0x160>
 8005080:	f104 3cff 	add.w	ip, r4, #4294967295
 8005084:	aa08      	add	r2, sp, #32
 8005086:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800508a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800508e:	e7f3      	b.n	8005078 <__kernel_rem_pio2f+0x254>
 8005090:	a908      	add	r1, sp, #32
 8005092:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8005096:	3801      	subs	r0, #1
 8005098:	430a      	orrs	r2, r1
 800509a:	e7ab      	b.n	8004ff4 <__kernel_rem_pio2f+0x1d0>
 800509c:	3201      	adds	r2, #1
 800509e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80050a2:	2e00      	cmp	r6, #0
 80050a4:	d0fa      	beq.n	800509c <__kernel_rem_pio2f+0x278>
 80050a6:	9905      	ldr	r1, [sp, #20]
 80050a8:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80050ac:	eb0d 0001 	add.w	r0, sp, r1
 80050b0:	18e6      	adds	r6, r4, r3
 80050b2:	a91c      	add	r1, sp, #112	@ 0x70
 80050b4:	f104 0c01 	add.w	ip, r4, #1
 80050b8:	384c      	subs	r0, #76	@ 0x4c
 80050ba:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80050be:	4422      	add	r2, r4
 80050c0:	4562      	cmp	r2, ip
 80050c2:	da04      	bge.n	80050ce <__kernel_rem_pio2f+0x2aa>
 80050c4:	4614      	mov	r4, r2
 80050c6:	e710      	b.n	8004eea <__kernel_rem_pio2f+0xc6>
 80050c8:	9804      	ldr	r0, [sp, #16]
 80050ca:	2201      	movs	r2, #1
 80050cc:	e7e7      	b.n	800509e <__kernel_rem_pio2f+0x27a>
 80050ce:	9903      	ldr	r1, [sp, #12]
 80050d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80050d4:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80050d8:	9105      	str	r1, [sp, #20]
 80050da:	ee07 1a90 	vmov	s15, r1
 80050de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050e2:	2400      	movs	r4, #0
 80050e4:	ece6 7a01 	vstmia	r6!, {s15}
 80050e8:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800511c <__kernel_rem_pio2f+0x2f8>
 80050ec:	46b1      	mov	r9, r6
 80050ee:	455c      	cmp	r4, fp
 80050f0:	dd04      	ble.n	80050fc <__kernel_rem_pio2f+0x2d8>
 80050f2:	ece0 7a01 	vstmia	r0!, {s15}
 80050f6:	f10c 0c01 	add.w	ip, ip, #1
 80050fa:	e7e1      	b.n	80050c0 <__kernel_rem_pio2f+0x29c>
 80050fc:	ecfe 6a01 	vldmia	lr!, {s13}
 8005100:	ed39 7a01 	vldmdb	r9!, {s14}
 8005104:	3401      	adds	r4, #1
 8005106:	eee6 7a87 	vfma.f32	s15, s13, s14
 800510a:	e7f0      	b.n	80050ee <__kernel_rem_pio2f+0x2ca>
 800510c:	0800aad8 	.word	0x0800aad8
 8005110:	0800aaac 	.word	0x0800aaac
 8005114:	43800000 	.word	0x43800000
 8005118:	3b800000 	.word	0x3b800000
 800511c:	00000000 	.word	0x00000000
 8005120:	9b02      	ldr	r3, [sp, #8]
 8005122:	eeb0 0a48 	vmov.f32	s0, s16
 8005126:	eba3 0008 	sub.w	r0, r3, r8
 800512a:	f000 f8e3 	bl	80052f4 <scalbnf>
 800512e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8005114 <__kernel_rem_pio2f+0x2f0>
 8005132:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8005136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800513a:	db19      	blt.n	8005170 <__kernel_rem_pio2f+0x34c>
 800513c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8005118 <__kernel_rem_pio2f+0x2f4>
 8005140:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005144:	aa08      	add	r2, sp, #32
 8005146:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800514a:	3508      	adds	r5, #8
 800514c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005150:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8005154:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005158:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800515c:	ee10 3a10 	vmov	r3, s0
 8005160:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8005164:	ee17 3a90 	vmov	r3, s15
 8005168:	3401      	adds	r4, #1
 800516a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800516e:	e74c      	b.n	800500a <__kernel_rem_pio2f+0x1e6>
 8005170:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005174:	aa08      	add	r2, sp, #32
 8005176:	ee10 3a10 	vmov	r3, s0
 800517a:	e7f6      	b.n	800516a <__kernel_rem_pio2f+0x346>
 800517c:	a808      	add	r0, sp, #32
 800517e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8005182:	9001      	str	r0, [sp, #4]
 8005184:	ee07 0a90 	vmov	s15, r0
 8005188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800518c:	3b01      	subs	r3, #1
 800518e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005192:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005196:	ed62 7a01 	vstmdb	r2!, {s15}
 800519a:	e743      	b.n	8005024 <__kernel_rem_pio2f+0x200>
 800519c:	ecfc 6a01 	vldmia	ip!, {s13}
 80051a0:	ecb5 7a01 	vldmia	r5!, {s14}
 80051a4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80051a8:	3001      	adds	r0, #1
 80051aa:	4550      	cmp	r0, sl
 80051ac:	dc01      	bgt.n	80051b2 <__kernel_rem_pio2f+0x38e>
 80051ae:	4290      	cmp	r0, r2
 80051b0:	ddf4      	ble.n	800519c <__kernel_rem_pio2f+0x378>
 80051b2:	a858      	add	r0, sp, #352	@ 0x160
 80051b4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80051b8:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80051bc:	3b01      	subs	r3, #1
 80051be:	e735      	b.n	800502c <__kernel_rem_pio2f+0x208>
 80051c0:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	dc09      	bgt.n	80051da <__kernel_rem_pio2f+0x3b6>
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	dc27      	bgt.n	800521a <__kernel_rem_pio2f+0x3f6>
 80051ca:	d040      	beq.n	800524e <__kernel_rem_pio2f+0x42a>
 80051cc:	f009 0007 	and.w	r0, r9, #7
 80051d0:	b059      	add	sp, #356	@ 0x164
 80051d2:	ecbd 8b04 	vpop	{d8-d9}
 80051d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051da:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80051dc:	2b03      	cmp	r3, #3
 80051de:	d1f5      	bne.n	80051cc <__kernel_rem_pio2f+0x3a8>
 80051e0:	aa30      	add	r2, sp, #192	@ 0xc0
 80051e2:	1f0b      	subs	r3, r1, #4
 80051e4:	4413      	add	r3, r2
 80051e6:	461a      	mov	r2, r3
 80051e8:	4620      	mov	r0, r4
 80051ea:	2800      	cmp	r0, #0
 80051ec:	dc50      	bgt.n	8005290 <__kernel_rem_pio2f+0x46c>
 80051ee:	4622      	mov	r2, r4
 80051f0:	2a01      	cmp	r2, #1
 80051f2:	dc5d      	bgt.n	80052b0 <__kernel_rem_pio2f+0x48c>
 80051f4:	ab30      	add	r3, sp, #192	@ 0xc0
 80051f6:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800511c <__kernel_rem_pio2f+0x2f8>
 80051fa:	440b      	add	r3, r1
 80051fc:	2c01      	cmp	r4, #1
 80051fe:	dc67      	bgt.n	80052d0 <__kernel_rem_pio2f+0x4ac>
 8005200:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8005204:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8005208:	2e00      	cmp	r6, #0
 800520a:	d167      	bne.n	80052dc <__kernel_rem_pio2f+0x4b8>
 800520c:	edc7 6a00 	vstr	s13, [r7]
 8005210:	ed87 7a01 	vstr	s14, [r7, #4]
 8005214:	edc7 7a02 	vstr	s15, [r7, #8]
 8005218:	e7d8      	b.n	80051cc <__kernel_rem_pio2f+0x3a8>
 800521a:	ab30      	add	r3, sp, #192	@ 0xc0
 800521c:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800511c <__kernel_rem_pio2f+0x2f8>
 8005220:	440b      	add	r3, r1
 8005222:	4622      	mov	r2, r4
 8005224:	2a00      	cmp	r2, #0
 8005226:	da24      	bge.n	8005272 <__kernel_rem_pio2f+0x44e>
 8005228:	b34e      	cbz	r6, 800527e <__kernel_rem_pio2f+0x45a>
 800522a:	eef1 7a47 	vneg.f32	s15, s14
 800522e:	edc7 7a00 	vstr	s15, [r7]
 8005232:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8005236:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800523a:	aa31      	add	r2, sp, #196	@ 0xc4
 800523c:	2301      	movs	r3, #1
 800523e:	429c      	cmp	r4, r3
 8005240:	da20      	bge.n	8005284 <__kernel_rem_pio2f+0x460>
 8005242:	b10e      	cbz	r6, 8005248 <__kernel_rem_pio2f+0x424>
 8005244:	eef1 7a67 	vneg.f32	s15, s15
 8005248:	edc7 7a01 	vstr	s15, [r7, #4]
 800524c:	e7be      	b.n	80051cc <__kernel_rem_pio2f+0x3a8>
 800524e:	ab30      	add	r3, sp, #192	@ 0xc0
 8005250:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800511c <__kernel_rem_pio2f+0x2f8>
 8005254:	440b      	add	r3, r1
 8005256:	2c00      	cmp	r4, #0
 8005258:	da05      	bge.n	8005266 <__kernel_rem_pio2f+0x442>
 800525a:	b10e      	cbz	r6, 8005260 <__kernel_rem_pio2f+0x43c>
 800525c:	eef1 7a67 	vneg.f32	s15, s15
 8005260:	edc7 7a00 	vstr	s15, [r7]
 8005264:	e7b2      	b.n	80051cc <__kernel_rem_pio2f+0x3a8>
 8005266:	ed33 7a01 	vldmdb	r3!, {s14}
 800526a:	3c01      	subs	r4, #1
 800526c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005270:	e7f1      	b.n	8005256 <__kernel_rem_pio2f+0x432>
 8005272:	ed73 7a01 	vldmdb	r3!, {s15}
 8005276:	3a01      	subs	r2, #1
 8005278:	ee37 7a27 	vadd.f32	s14, s14, s15
 800527c:	e7d2      	b.n	8005224 <__kernel_rem_pio2f+0x400>
 800527e:	eef0 7a47 	vmov.f32	s15, s14
 8005282:	e7d4      	b.n	800522e <__kernel_rem_pio2f+0x40a>
 8005284:	ecb2 7a01 	vldmia	r2!, {s14}
 8005288:	3301      	adds	r3, #1
 800528a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800528e:	e7d6      	b.n	800523e <__kernel_rem_pio2f+0x41a>
 8005290:	ed72 7a01 	vldmdb	r2!, {s15}
 8005294:	edd2 6a01 	vldr	s13, [r2, #4]
 8005298:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800529c:	3801      	subs	r0, #1
 800529e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80052a2:	ed82 7a00 	vstr	s14, [r2]
 80052a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052aa:	edc2 7a01 	vstr	s15, [r2, #4]
 80052ae:	e79c      	b.n	80051ea <__kernel_rem_pio2f+0x3c6>
 80052b0:	ed73 7a01 	vldmdb	r3!, {s15}
 80052b4:	edd3 6a01 	vldr	s13, [r3, #4]
 80052b8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80052bc:	3a01      	subs	r2, #1
 80052be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80052c2:	ed83 7a00 	vstr	s14, [r3]
 80052c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ca:	edc3 7a01 	vstr	s15, [r3, #4]
 80052ce:	e78f      	b.n	80051f0 <__kernel_rem_pio2f+0x3cc>
 80052d0:	ed33 7a01 	vldmdb	r3!, {s14}
 80052d4:	3c01      	subs	r4, #1
 80052d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052da:	e78f      	b.n	80051fc <__kernel_rem_pio2f+0x3d8>
 80052dc:	eef1 6a66 	vneg.f32	s13, s13
 80052e0:	eeb1 7a47 	vneg.f32	s14, s14
 80052e4:	edc7 6a00 	vstr	s13, [r7]
 80052e8:	ed87 7a01 	vstr	s14, [r7, #4]
 80052ec:	eef1 7a67 	vneg.f32	s15, s15
 80052f0:	e790      	b.n	8005214 <__kernel_rem_pio2f+0x3f0>
 80052f2:	bf00      	nop

080052f4 <scalbnf>:
 80052f4:	ee10 3a10 	vmov	r3, s0
 80052f8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80052fc:	d02b      	beq.n	8005356 <scalbnf+0x62>
 80052fe:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8005302:	d302      	bcc.n	800530a <scalbnf+0x16>
 8005304:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005308:	4770      	bx	lr
 800530a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800530e:	d123      	bne.n	8005358 <scalbnf+0x64>
 8005310:	4b24      	ldr	r3, [pc, #144]	@ (80053a4 <scalbnf+0xb0>)
 8005312:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80053a8 <scalbnf+0xb4>
 8005316:	4298      	cmp	r0, r3
 8005318:	ee20 0a27 	vmul.f32	s0, s0, s15
 800531c:	db17      	blt.n	800534e <scalbnf+0x5a>
 800531e:	ee10 3a10 	vmov	r3, s0
 8005322:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005326:	3a19      	subs	r2, #25
 8005328:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800532c:	4288      	cmp	r0, r1
 800532e:	dd15      	ble.n	800535c <scalbnf+0x68>
 8005330:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80053ac <scalbnf+0xb8>
 8005334:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80053b0 <scalbnf+0xbc>
 8005338:	ee10 3a10 	vmov	r3, s0
 800533c:	eeb0 7a67 	vmov.f32	s14, s15
 8005340:	2b00      	cmp	r3, #0
 8005342:	bfb8      	it	lt
 8005344:	eef0 7a66 	vmovlt.f32	s15, s13
 8005348:	ee27 0a87 	vmul.f32	s0, s15, s14
 800534c:	4770      	bx	lr
 800534e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80053b4 <scalbnf+0xc0>
 8005352:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005356:	4770      	bx	lr
 8005358:	0dd2      	lsrs	r2, r2, #23
 800535a:	e7e5      	b.n	8005328 <scalbnf+0x34>
 800535c:	4410      	add	r0, r2
 800535e:	28fe      	cmp	r0, #254	@ 0xfe
 8005360:	dce6      	bgt.n	8005330 <scalbnf+0x3c>
 8005362:	2800      	cmp	r0, #0
 8005364:	dd06      	ble.n	8005374 <scalbnf+0x80>
 8005366:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800536a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800536e:	ee00 3a10 	vmov	s0, r3
 8005372:	4770      	bx	lr
 8005374:	f110 0f16 	cmn.w	r0, #22
 8005378:	da09      	bge.n	800538e <scalbnf+0x9a>
 800537a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80053b4 <scalbnf+0xc0>
 800537e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80053b8 <scalbnf+0xc4>
 8005382:	ee10 3a10 	vmov	r3, s0
 8005386:	eeb0 7a67 	vmov.f32	s14, s15
 800538a:	2b00      	cmp	r3, #0
 800538c:	e7d9      	b.n	8005342 <scalbnf+0x4e>
 800538e:	3019      	adds	r0, #25
 8005390:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005394:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8005398:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80053bc <scalbnf+0xc8>
 800539c:	ee07 3a90 	vmov	s15, r3
 80053a0:	e7d7      	b.n	8005352 <scalbnf+0x5e>
 80053a2:	bf00      	nop
 80053a4:	ffff3cb0 	.word	0xffff3cb0
 80053a8:	4c000000 	.word	0x4c000000
 80053ac:	7149f2ca 	.word	0x7149f2ca
 80053b0:	f149f2ca 	.word	0xf149f2ca
 80053b4:	0da24260 	.word	0x0da24260
 80053b8:	8da24260 	.word	0x8da24260
 80053bc:	33000000 	.word	0x33000000

080053c0 <floorf>:
 80053c0:	ee10 3a10 	vmov	r3, s0
 80053c4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80053c8:	3a7f      	subs	r2, #127	@ 0x7f
 80053ca:	2a16      	cmp	r2, #22
 80053cc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80053d0:	dc2b      	bgt.n	800542a <floorf+0x6a>
 80053d2:	2a00      	cmp	r2, #0
 80053d4:	da12      	bge.n	80053fc <floorf+0x3c>
 80053d6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800543c <floorf+0x7c>
 80053da:	ee30 0a27 	vadd.f32	s0, s0, s15
 80053de:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80053e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053e6:	dd06      	ble.n	80053f6 <floorf+0x36>
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	da24      	bge.n	8005436 <floorf+0x76>
 80053ec:	2900      	cmp	r1, #0
 80053ee:	4b14      	ldr	r3, [pc, #80]	@ (8005440 <floorf+0x80>)
 80053f0:	bf08      	it	eq
 80053f2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80053f6:	ee00 3a10 	vmov	s0, r3
 80053fa:	4770      	bx	lr
 80053fc:	4911      	ldr	r1, [pc, #68]	@ (8005444 <floorf+0x84>)
 80053fe:	4111      	asrs	r1, r2
 8005400:	420b      	tst	r3, r1
 8005402:	d0fa      	beq.n	80053fa <floorf+0x3a>
 8005404:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800543c <floorf+0x7c>
 8005408:	ee30 0a27 	vadd.f32	s0, s0, s15
 800540c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005414:	ddef      	ble.n	80053f6 <floorf+0x36>
 8005416:	2b00      	cmp	r3, #0
 8005418:	bfbe      	ittt	lt
 800541a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800541e:	fa40 f202 	asrlt.w	r2, r0, r2
 8005422:	189b      	addlt	r3, r3, r2
 8005424:	ea23 0301 	bic.w	r3, r3, r1
 8005428:	e7e5      	b.n	80053f6 <floorf+0x36>
 800542a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800542e:	d3e4      	bcc.n	80053fa <floorf+0x3a>
 8005430:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005434:	4770      	bx	lr
 8005436:	2300      	movs	r3, #0
 8005438:	e7dd      	b.n	80053f6 <floorf+0x36>
 800543a:	bf00      	nop
 800543c:	7149f2ca 	.word	0x7149f2ca
 8005440:	bf800000 	.word	0xbf800000
 8005444:	007fffff 	.word	0x007fffff

08005448 <_init>:
 8005448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800544a:	bf00      	nop
 800544c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800544e:	bc08      	pop	{r3}
 8005450:	469e      	mov	lr, r3
 8005452:	4770      	bx	lr

08005454 <_fini>:
 8005454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005456:	bf00      	nop
 8005458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800545a:	bc08      	pop	{r3}
 800545c:	469e      	mov	lr, r3
 800545e:	4770      	bx	lr
